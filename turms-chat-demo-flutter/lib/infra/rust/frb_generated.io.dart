// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

import 'api/icu.dart';
import 'api/image.dart';
import 'api/system.dart';
import 'frb_generated.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  int dco_decode_box_autoadd_i_8(dynamic raw);

  @protected
  ResizeError dco_decode_box_autoadd_resize_error(dynamic raw);

  @protected
  DiskSpaceInfo dco_decode_disk_space_info(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  int dco_decode_i_8(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<DiskSpaceInfo> dco_decode_list_disk_space_info(dynamic raw);

  @protected
  Uint16List dco_decode_list_prim_u_16_strict(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_i_8(dynamic raw);

  @protected
  ResizeError? dco_decode_opt_box_autoadd_resize_error(dynamic raw);

  @protected
  Uint16List? dco_decode_opt_list_prim_u_16_strict(dynamic raw);

  @protected
  ResizeError dco_decode_resize_error(dynamic raw);

  @protected
  ResizeResult dco_decode_resize_result(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_i_8(SseDeserializer deserializer);

  @protected
  ResizeError sse_decode_box_autoadd_resize_error(SseDeserializer deserializer);

  @protected
  DiskSpaceInfo sse_decode_disk_space_info(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  int sse_decode_i_8(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<DiskSpaceInfo> sse_decode_list_disk_space_info(
      SseDeserializer deserializer);

  @protected
  Uint16List sse_decode_list_prim_u_16_strict(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_i_8(SseDeserializer deserializer);

  @protected
  ResizeError? sse_decode_opt_box_autoadd_resize_error(
      SseDeserializer deserializer);

  @protected
  Uint16List? sse_decode_opt_list_prim_u_16_strict(
      SseDeserializer deserializer);

  @protected
  ResizeError sse_decode_resize_error(SseDeserializer deserializer);

  @protected
  ResizeResult sse_decode_resize_result(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_resize_error(
      ResizeError self, SseSerializer serializer);

  @protected
  void sse_encode_disk_space_info(DiskSpaceInfo self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_disk_space_info(
      List<DiskSpaceInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_16_strict(
      Uint16List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_8(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_resize_error(
      ResizeError? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_u_16_strict(
      Uint16List? self, SseSerializer serializer);

  @protected
  void sse_encode_resize_error(ResizeError self, SseSerializer serializer);

  @protected
  void sse_encode_resize_result(ResizeResult self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;
}
