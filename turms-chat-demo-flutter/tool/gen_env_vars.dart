import 'dart:io';

import 'package:turms_chat_demo/infra/built_in_types/built_in_type_helpers.dart';

Future<void> generateEnvFile() async {
  final currentDir = Directory.current;
  final baseDir =
      (currentDir.path.endsWith('tool') ? currentDir.parent : currentDir).path;
  final envFile = File('$baseDir/.env');
  final lines = envFile.readAsLinesSync();

  final code = StringBuffer()
    ..write('// Do not edit this file manually.\n')
    ..write('class EnvVars {\n')
    ..write('  EnvVars._();\n\n');

  for (final line in lines) {
    if (line.isBlank || line.startsWith('#')) {
      continue;
    }
    final parts = line.split('=');
    final key = parts[0];
    final value = parts[1];
    final name = key.constCaseToCamelCase();
    if (value == 'true' || value == 'false') {
      code.write("  static const bool $name = bool.fromEnvironment('$key');\n");
    } else if (value.contains('.') && double.tryParse(value) != null) {
      code.write(
        "  static final double $name = double.parse(const String.fromEnvironment('$key'));\n",
      );
    } else if (int.tryParse(value) != null) {
      code.write("  static const int $name = int.fromEnvironment('$key');\n");
    } else {
      code.write(
        "  static const String $name = String.fromEnvironment('$key');\n",
      );
    }
  }
  code.write('}');
  final file = File('$baseDir/lib/infra/env/env_vars.dart');
  await file.create(recursive: true);
  await file.writeAsString(code.toString());
  print('Generated the environment variables file: ${file.absolute.path}');
}

Future<void> main() async {
  await generateEnvFile();
}
