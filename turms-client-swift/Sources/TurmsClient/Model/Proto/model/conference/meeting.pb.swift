// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: model/conference/meeting.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct Meeting {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: Int64 = 0

    public var userID: Int64 {
        get { return _userID ?? 0 }
        set { _userID = newValue }
    }

    /// Returns true if `userID` has been explicitly set.
    public var hasUserID: Bool { return _userID != nil }
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
    public mutating func clearUserID() { _userID = nil }

    public var groupID: Int64 {
        get { return _groupID ?? 0 }
        set { _groupID = newValue }
    }

    /// Returns true if `groupID` has been explicitly set.
    public var hasGroupID: Bool { return _groupID != nil }
    /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
    public mutating func clearGroupID() { _groupID = nil }

    public var creatorID: Int64 = 0

    public var accessToken: String {
        get { return _accessToken ?? String() }
        set { _accessToken = newValue }
    }

    /// Returns true if `accessToken` has been explicitly set.
    public var hasAccessToken: Bool { return _accessToken != nil }
    /// Clears the value of `accessToken`. Subsequent reads from it will return its default value.
    public mutating func clearAccessToken() { _accessToken = nil }

    public var name: String {
        get { return _name ?? String() }
        set { _name = newValue }
    }

    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool { return _name != nil }
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    public mutating func clearName() { _name = nil }

    public var intro: String {
        get { return _intro ?? String() }
        set { _intro = newValue }
    }

    /// Returns true if `intro` has been explicitly set.
    public var hasIntro: Bool { return _intro != nil }
    /// Clears the value of `intro`. Subsequent reads from it will return its default value.
    public mutating func clearIntro() { _intro = nil }

    public var password: String {
        get { return _password ?? String() }
        set { _password = newValue }
    }

    /// Returns true if `password` has been explicitly set.
    public var hasPassword: Bool { return _password != nil }
    /// Clears the value of `password`. Subsequent reads from it will return its default value.
    public mutating func clearPassword() { _password = nil }

    public var startDate: Int64 = 0

    public var endDate: Int64 {
        get { return _endDate ?? 0 }
        set { _endDate = newValue }
    }

    /// Returns true if `endDate` has been explicitly set.
    public var hasEndDate: Bool { return _endDate != nil }
    /// Clears the value of `endDate`. Subsequent reads from it will return its default value.
    public mutating func clearEndDate() { _endDate = nil }

    public var cancelDate: Int64 {
        get { return _cancelDate ?? 0 }
        set { _cancelDate = newValue }
    }

    /// Returns true if `cancelDate` has been explicitly set.
    public var hasCancelDate: Bool { return _cancelDate != nil }
    /// Clears the value of `cancelDate`. Subsequent reads from it will return its default value.
    public mutating func clearCancelDate() { _cancelDate = nil }

    public var customAttributes: [Value] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _userID: Int64?
    fileprivate var _groupID: Int64?
    fileprivate var _accessToken: String?
    fileprivate var _name: String?
    fileprivate var _intro: String?
    fileprivate var _password: String?
    fileprivate var _endDate: Int64?
    fileprivate var _cancelDate: Int64?
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Meeting: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "im.turms.proto"

extension Meeting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Meeting"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .standard(proto: "user_id"),
        3: .standard(proto: "group_id"),
        4: .standard(proto: "creator_id"),
        5: .standard(proto: "access_token"),
        6: .same(proto: "name"),
        7: .same(proto: "intro"),
        8: .same(proto: "password"),
        9: .standard(proto: "start_date"),
        10: .standard(proto: "end_date"),
        11: .standard(proto: "cancel_date"),
        15: .standard(proto: "custom_attributes"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &id)
            case 2: try decoder.decodeSingularInt64Field(value: &_userID)
            case 3: try decoder.decodeSingularInt64Field(value: &_groupID)
            case 4: try decoder.decodeSingularInt64Field(value: &creatorID)
            case 5: try decoder.decodeSingularStringField(value: &_accessToken)
            case 6: try decoder.decodeSingularStringField(value: &_name)
            case 7: try decoder.decodeSingularStringField(value: &_intro)
            case 8: try decoder.decodeSingularStringField(value: &_password)
            case 9: try decoder.decodeSingularInt64Field(value: &startDate)
            case 10: try decoder.decodeSingularInt64Field(value: &_endDate)
            case 11: try decoder.decodeSingularInt64Field(value: &_cancelDate)
            case 15: try decoder.decodeRepeatedMessageField(value: &customAttributes)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if id != 0 {
            try visitor.visitSingularInt64Field(value: id, fieldNumber: 1)
        }
        try { if let v = self._userID {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._groupID {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
        } }()
        if creatorID != 0 {
            try visitor.visitSingularInt64Field(value: creatorID, fieldNumber: 4)
        }
        try { if let v = self._accessToken {
            try visitor.visitSingularStringField(value: v, fieldNumber: 5)
        } }()
        try { if let v = self._name {
            try visitor.visitSingularStringField(value: v, fieldNumber: 6)
        } }()
        try { if let v = self._intro {
            try visitor.visitSingularStringField(value: v, fieldNumber: 7)
        } }()
        try { if let v = self._password {
            try visitor.visitSingularStringField(value: v, fieldNumber: 8)
        } }()
        if startDate != 0 {
            try visitor.visitSingularInt64Field(value: startDate, fieldNumber: 9)
        }
        try { if let v = self._endDate {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
        } }()
        try { if let v = self._cancelDate {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 11)
        } }()
        if !customAttributes.isEmpty {
            try visitor.visitRepeatedMessageField(value: customAttributes, fieldNumber: 15)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Meeting, rhs: Meeting) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs._userID != rhs._userID { return false }
        if lhs._groupID != rhs._groupID { return false }
        if lhs.creatorID != rhs.creatorID { return false }
        if lhs._accessToken != rhs._accessToken { return false }
        if lhs._name != rhs._name { return false }
        if lhs._intro != rhs._intro { return false }
        if lhs._password != rhs._password { return false }
        if lhs.startDate != rhs.startDate { return false }
        if lhs._endDate != rhs._endDate { return false }
        if lhs._cancelDate != rhs._cancelDate { return false }
        if lhs.customAttributes != rhs.customAttributes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
