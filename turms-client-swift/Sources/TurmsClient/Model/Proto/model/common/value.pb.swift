// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: model/common/value.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct Value {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var kind: Value.OneOf_Kind?

    public var int32Value: Int32 {
        get {
            if case let .int32Value(v)? = kind { return v }
            return 0
        }
        set { kind = .int32Value(newValue) }
    }

    public var int64Value: Int64 {
        get {
            if case let .int64Value(v)? = kind { return v }
            return 0
        }
        set { kind = .int64Value(newValue) }
    }

    public var floatValue: Float {
        get {
            if case let .floatValue(v)? = kind { return v }
            return 0
        }
        set { kind = .floatValue(newValue) }
    }

    public var doubleValue: Double {
        get {
            if case let .doubleValue(v)? = kind { return v }
            return 0
        }
        set { kind = .doubleValue(newValue) }
    }

    public var boolValue: Bool {
        get {
            if case let .boolValue(v)? = kind { return v }
            return false
        }
        set { kind = .boolValue(newValue) }
    }

    public var bytesValue: Data {
        get {
            if case let .bytesValue(v)? = kind { return v }
            return Data()
        }
        set { kind = .bytesValue(newValue) }
    }

    public var stringValue: String {
        get {
            if case let .stringValue(v)? = kind { return v }
            return String()
        }
        set { kind = .stringValue(newValue) }
    }

    public var listValue: [Value] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Kind: Equatable {
        case int32Value(Int32)
        case int64Value(Int64)
        case floatValue(Float)
        case doubleValue(Double)
        case boolValue(Bool)
        case bytesValue(Data)
        case stringValue(String)

        #if !swift(>=4.1)
            public static func == (lhs: Value.OneOf_Kind, rhs: Value.OneOf_Kind) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.int32Value, .int32Value): return {
                        guard case let .int32Value(l) = lhs, case let .int32Value(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.int64Value, .int64Value): return {
                        guard case let .int64Value(l) = lhs, case let .int64Value(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.floatValue, .floatValue): return {
                        guard case let .floatValue(l) = lhs, case let .floatValue(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.doubleValue, .doubleValue): return {
                        guard case let .doubleValue(l) = lhs, case let .doubleValue(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.boolValue, .boolValue): return {
                        guard case let .boolValue(l) = lhs, case let .boolValue(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.bytesValue, .bytesValue): return {
                        guard case let .bytesValue(l) = lhs, case let .bytesValue(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.stringValue, .stringValue): return {
                        guard case let .stringValue(l) = lhs, case let .stringValue(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Value: @unchecked Sendable {}
    extension Value.OneOf_Kind: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "im.turms.proto"

extension Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Value"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "int32_value"),
        2: .standard(proto: "int64_value"),
        3: .standard(proto: "float_value"),
        4: .standard(proto: "double_value"),
        5: .standard(proto: "bool_value"),
        6: .standard(proto: "bytes_value"),
        7: .standard(proto: "string_value"),
        8: .standard(proto: "list_value"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: Int32?
                    try decoder.decodeSingularInt32Field(value: &v)
                    if let v = v {
                        if self.kind != nil { try decoder.handleConflictingOneOf() }
                        self.kind = .int32Value(v)
                    }
                }()
            case 2: try {
                    var v: Int64?
                    try decoder.decodeSingularInt64Field(value: &v)
                    if let v = v {
                        if self.kind != nil { try decoder.handleConflictingOneOf() }
                        self.kind = .int64Value(v)
                    }
                }()
            case 3: try {
                    var v: Float?
                    try decoder.decodeSingularFloatField(value: &v)
                    if let v = v {
                        if self.kind != nil { try decoder.handleConflictingOneOf() }
                        self.kind = .floatValue(v)
                    }
                }()
            case 4: try {
                    var v: Double?
                    try decoder.decodeSingularDoubleField(value: &v)
                    if let v = v {
                        if self.kind != nil { try decoder.handleConflictingOneOf() }
                        self.kind = .doubleValue(v)
                    }
                }()
            case 5: try {
                    var v: Bool?
                    try decoder.decodeSingularBoolField(value: &v)
                    if let v = v {
                        if self.kind != nil { try decoder.handleConflictingOneOf() }
                        self.kind = .boolValue(v)
                    }
                }()
            case 6: try {
                    var v: Data?
                    try decoder.decodeSingularBytesField(value: &v)
                    if let v = v {
                        if self.kind != nil { try decoder.handleConflictingOneOf() }
                        self.kind = .bytesValue(v)
                    }
                }()
            case 7: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.kind != nil { try decoder.handleConflictingOneOf() }
                        self.kind = .stringValue(v)
                    }
                }()
            case 8: try decoder.decodeRepeatedMessageField(value: &listValue)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch kind {
        case .int32Value?: try {
                guard case let .int32Value(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
            }()
        case .int64Value?: try {
                guard case let .int64Value(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
            }()
        case .floatValue?: try {
                guard case let .floatValue(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
            }()
        case .doubleValue?: try {
                guard case let .doubleValue(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
            }()
        case .boolValue?: try {
                guard case let .boolValue(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
            }()
        case .bytesValue?: try {
                guard case let .bytesValue(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
            }()
        case .stringValue?: try {
                guard case let .stringValue(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 7)
            }()
        case nil: break
        }
        if !listValue.isEmpty {
            try visitor.visitRepeatedMessageField(value: listValue, fieldNumber: 8)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Value, rhs: Value) -> Bool {
        if lhs.kind != rhs.kind { return false }
        if lhs.listValue != rhs.listValue { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
