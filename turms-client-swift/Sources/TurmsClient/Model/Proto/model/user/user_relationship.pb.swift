// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: model/user/user_relationship.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct UserRelationship {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var ownerID: Int64 {
        get { return _ownerID ?? 0 }
        set { _ownerID = newValue }
    }

    /// Returns true if `ownerID` has been explicitly set.
    public var hasOwnerID: Bool { return _ownerID != nil }
    /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
    public mutating func clearOwnerID() { _ownerID = nil }

    public var relatedUserID: Int64 {
        get { return _relatedUserID ?? 0 }
        set { _relatedUserID = newValue }
    }

    /// Returns true if `relatedUserID` has been explicitly set.
    public var hasRelatedUserID: Bool { return _relatedUserID != nil }
    /// Clears the value of `relatedUserID`. Subsequent reads from it will return its default value.
    public mutating func clearRelatedUserID() { _relatedUserID = nil }

    public var blockDate: Int64 {
        get { return _blockDate ?? 0 }
        set { _blockDate = newValue }
    }

    /// Returns true if `blockDate` has been explicitly set.
    public var hasBlockDate: Bool { return _blockDate != nil }
    /// Clears the value of `blockDate`. Subsequent reads from it will return its default value.
    public mutating func clearBlockDate() { _blockDate = nil }

    public var groupIndex: Int64 {
        get { return _groupIndex ?? 0 }
        set { _groupIndex = newValue }
    }

    /// Returns true if `groupIndex` has been explicitly set.
    public var hasGroupIndex: Bool { return _groupIndex != nil }
    /// Clears the value of `groupIndex`. Subsequent reads from it will return its default value.
    public mutating func clearGroupIndex() { _groupIndex = nil }

    public var establishmentDate: Int64 {
        get { return _establishmentDate ?? 0 }
        set { _establishmentDate = newValue }
    }

    /// Returns true if `establishmentDate` has been explicitly set.
    public var hasEstablishmentDate: Bool { return _establishmentDate != nil }
    /// Clears the value of `establishmentDate`. Subsequent reads from it will return its default value.
    public mutating func clearEstablishmentDate() { _establishmentDate = nil }

    public var name: String {
        get { return _name ?? String() }
        set { _name = newValue }
    }

    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool { return _name != nil }
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    public mutating func clearName() { _name = nil }

    public var customAttributes: [Value] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _ownerID: Int64?
    fileprivate var _relatedUserID: Int64?
    fileprivate var _blockDate: Int64?
    fileprivate var _groupIndex: Int64?
    fileprivate var _establishmentDate: Int64?
    fileprivate var _name: String?
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension UserRelationship: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "im.turms.proto"

extension UserRelationship: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UserRelationship"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "owner_id"),
        2: .standard(proto: "related_user_id"),
        3: .standard(proto: "block_date"),
        4: .standard(proto: "group_index"),
        5: .standard(proto: "establishment_date"),
        6: .same(proto: "name"),
        15: .standard(proto: "custom_attributes"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &_ownerID)
            case 2: try decoder.decodeSingularInt64Field(value: &_relatedUserID)
            case 3: try decoder.decodeSingularInt64Field(value: &_blockDate)
            case 4: try decoder.decodeSingularInt64Field(value: &_groupIndex)
            case 5: try decoder.decodeSingularInt64Field(value: &_establishmentDate)
            case 6: try decoder.decodeSingularStringField(value: &_name)
            case 15: try decoder.decodeRepeatedMessageField(value: &customAttributes)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._ownerID {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._relatedUserID {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._blockDate {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
        } }()
        try { if let v = self._groupIndex {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
        } }()
        try { if let v = self._establishmentDate {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
        } }()
        try { if let v = self._name {
            try visitor.visitSingularStringField(value: v, fieldNumber: 6)
        } }()
        if !customAttributes.isEmpty {
            try visitor.visitRepeatedMessageField(value: customAttributes, fieldNumber: 15)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: UserRelationship, rhs: UserRelationship) -> Bool {
        if lhs._ownerID != rhs._ownerID { return false }
        if lhs._relatedUserID != rhs._relatedUserID { return false }
        if lhs._blockDate != rhs._blockDate { return false }
        if lhs._groupIndex != rhs._groupIndex { return false }
        if lhs._establishmentDate != rhs._establishmentDate { return false }
        if lhs._name != rhs._name { return false }
        if lhs.customAttributes != rhs.customAttributes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
