// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: request/turms_request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// Client -> Server -> Client
public struct TurmsRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Note: "request_id" is allowed to be duplicate because
    /// it is used for clients to identify the response of the same request id in a session
    public var requestID: Int64 {
        get { return _requestID ?? 0 }
        set { _requestID = newValue }
    }

    /// Returns true if `requestID` has been explicitly set.
    public var hasRequestID: Bool { return _requestID != nil }
    /// Clears the value of `requestID`. Subsequent reads from it will return its default value.
    public mutating func clearRequestID() { _requestID = nil }

    public var customAttributes: [Value] = []

    public var kind: TurmsRequest.OneOf_Kind?

    /// User - Session
    public var createSessionRequest: CreateSessionRequest {
        get {
            if case let .createSessionRequest(v)? = kind { return v }
            return CreateSessionRequest()
        }
        set { kind = .createSessionRequest(newValue) }
    }

    public var deleteSessionRequest: DeleteSessionRequest {
        get {
            if case let .deleteSessionRequest(v)? = kind { return v }
            return DeleteSessionRequest()
        }
        set { kind = .deleteSessionRequest(newValue) }
    }

    /// Conversation
    public var queryConversationsRequest: QueryConversationsRequest {
        get {
            if case let .queryConversationsRequest(v)? = kind { return v }
            return QueryConversationsRequest()
        }
        set { kind = .queryConversationsRequest(newValue) }
    }

    public var updateConversationRequest: UpdateConversationRequest {
        get {
            if case let .updateConversationRequest(v)? = kind { return v }
            return UpdateConversationRequest()
        }
        set { kind = .updateConversationRequest(newValue) }
    }

    public var updateTypingStatusRequest: UpdateTypingStatusRequest {
        get {
            if case let .updateTypingStatusRequest(v)? = kind { return v }
            return UpdateTypingStatusRequest()
        }
        set { kind = .updateTypingStatusRequest(newValue) }
    }

    /// Message
    public var createMessageRequest: CreateMessageRequest {
        get {
            if case let .createMessageRequest(v)? = kind { return v }
            return CreateMessageRequest()
        }
        set { kind = .createMessageRequest(newValue) }
    }

    public var queryMessagesRequest: QueryMessagesRequest {
        get {
            if case let .queryMessagesRequest(v)? = kind { return v }
            return QueryMessagesRequest()
        }
        set { kind = .queryMessagesRequest(newValue) }
    }

    public var updateMessageRequest: UpdateMessageRequest {
        get {
            if case let .updateMessageRequest(v)? = kind { return v }
            return UpdateMessageRequest()
        }
        set { kind = .updateMessageRequest(newValue) }
    }

    /// Group Member
    public var createGroupMembersRequest: CreateGroupMembersRequest {
        get {
            if case let .createGroupMembersRequest(v)? = kind { return v }
            return CreateGroupMembersRequest()
        }
        set { kind = .createGroupMembersRequest(newValue) }
    }

    public var deleteGroupMembersRequest: DeleteGroupMembersRequest {
        get {
            if case let .deleteGroupMembersRequest(v)? = kind { return v }
            return DeleteGroupMembersRequest()
        }
        set { kind = .deleteGroupMembersRequest(newValue) }
    }

    public var queryGroupMembersRequest: QueryGroupMembersRequest {
        get {
            if case let .queryGroupMembersRequest(v)? = kind { return v }
            return QueryGroupMembersRequest()
        }
        set { kind = .queryGroupMembersRequest(newValue) }
    }

    public var updateGroupMemberRequest: UpdateGroupMemberRequest {
        get {
            if case let .updateGroupMemberRequest(v)? = kind { return v }
            return UpdateGroupMemberRequest()
        }
        set { kind = .updateGroupMemberRequest(newValue) }
    }

    /// User
    public var queryUserProfilesRequest: QueryUserProfilesRequest {
        get {
            if case let .queryUserProfilesRequest(v)? = kind { return v }
            return QueryUserProfilesRequest()
        }
        set { kind = .queryUserProfilesRequest(newValue) }
    }

    public var queryNearbyUsersRequest: QueryNearbyUsersRequest {
        get {
            if case let .queryNearbyUsersRequest(v)? = kind { return v }
            return QueryNearbyUsersRequest()
        }
        set { kind = .queryNearbyUsersRequest(newValue) }
    }

    public var queryUserOnlineStatusesRequest: QueryUserOnlineStatusesRequest {
        get {
            if case let .queryUserOnlineStatusesRequest(v)? = kind { return v }
            return QueryUserOnlineStatusesRequest()
        }
        set { kind = .queryUserOnlineStatusesRequest(newValue) }
    }

    public var updateUserLocationRequest: UpdateUserLocationRequest {
        get {
            if case let .updateUserLocationRequest(v)? = kind { return v }
            return UpdateUserLocationRequest()
        }
        set { kind = .updateUserLocationRequest(newValue) }
    }

    public var updateUserOnlineStatusRequest: UpdateUserOnlineStatusRequest {
        get {
            if case let .updateUserOnlineStatusRequest(v)? = kind { return v }
            return UpdateUserOnlineStatusRequest()
        }
        set { kind = .updateUserOnlineStatusRequest(newValue) }
    }

    public var updateUserRequest: UpdateUserRequest {
        get {
            if case let .updateUserRequest(v)? = kind { return v }
            return UpdateUserRequest()
        }
        set { kind = .updateUserRequest(newValue) }
    }

    public var updateUserSettingsRequest: UpdateUserSettingsRequest {
        get {
            if case let .updateUserSettingsRequest(v)? = kind { return v }
            return UpdateUserSettingsRequest()
        }
        set { kind = .updateUserSettingsRequest(newValue) }
    }

    public var deleteUserSettingsRequest: DeleteUserSettingsRequest {
        get {
            if case let .deleteUserSettingsRequest(v)? = kind { return v }
            return DeleteUserSettingsRequest()
        }
        set { kind = .deleteUserSettingsRequest(newValue) }
    }

    public var queryUserSettingsRequest: QueryUserSettingsRequest {
        get {
            if case let .queryUserSettingsRequest(v)? = kind { return v }
            return QueryUserSettingsRequest()
        }
        set { kind = .queryUserSettingsRequest(newValue) }
    }

    /// User Relationship
    public var createFriendRequestRequest: CreateFriendRequestRequest {
        get {
            if case let .createFriendRequestRequest(v)? = kind { return v }
            return CreateFriendRequestRequest()
        }
        set { kind = .createFriendRequestRequest(newValue) }
    }

    public var createRelationshipGroupRequest: CreateRelationshipGroupRequest {
        get {
            if case let .createRelationshipGroupRequest(v)? = kind { return v }
            return CreateRelationshipGroupRequest()
        }
        set { kind = .createRelationshipGroupRequest(newValue) }
    }

    public var createRelationshipRequest: CreateRelationshipRequest {
        get {
            if case let .createRelationshipRequest(v)? = kind { return v }
            return CreateRelationshipRequest()
        }
        set { kind = .createRelationshipRequest(newValue) }
    }

    public var deleteFriendRequestRequest: DeleteFriendRequestRequest {
        get {
            if case let .deleteFriendRequestRequest(v)? = kind { return v }
            return DeleteFriendRequestRequest()
        }
        set { kind = .deleteFriendRequestRequest(newValue) }
    }

    public var deleteRelationshipGroupRequest: DeleteRelationshipGroupRequest {
        get {
            if case let .deleteRelationshipGroupRequest(v)? = kind { return v }
            return DeleteRelationshipGroupRequest()
        }
        set { kind = .deleteRelationshipGroupRequest(newValue) }
    }

    public var deleteRelationshipRequest: DeleteRelationshipRequest {
        get {
            if case let .deleteRelationshipRequest(v)? = kind { return v }
            return DeleteRelationshipRequest()
        }
        set { kind = .deleteRelationshipRequest(newValue) }
    }

    public var queryFriendRequestsRequest: QueryFriendRequestsRequest {
        get {
            if case let .queryFriendRequestsRequest(v)? = kind { return v }
            return QueryFriendRequestsRequest()
        }
        set { kind = .queryFriendRequestsRequest(newValue) }
    }

    public var queryRelatedUserIdsRequest: QueryRelatedUserIdsRequest {
        get {
            if case let .queryRelatedUserIdsRequest(v)? = kind { return v }
            return QueryRelatedUserIdsRequest()
        }
        set { kind = .queryRelatedUserIdsRequest(newValue) }
    }

    public var queryRelationshipGroupsRequest: QueryRelationshipGroupsRequest {
        get {
            if case let .queryRelationshipGroupsRequest(v)? = kind { return v }
            return QueryRelationshipGroupsRequest()
        }
        set { kind = .queryRelationshipGroupsRequest(newValue) }
    }

    public var queryRelationshipsRequest: QueryRelationshipsRequest {
        get {
            if case let .queryRelationshipsRequest(v)? = kind { return v }
            return QueryRelationshipsRequest()
        }
        set { kind = .queryRelationshipsRequest(newValue) }
    }

    public var updateFriendRequestRequest: UpdateFriendRequestRequest {
        get {
            if case let .updateFriendRequestRequest(v)? = kind { return v }
            return UpdateFriendRequestRequest()
        }
        set { kind = .updateFriendRequestRequest(newValue) }
    }

    public var updateRelationshipGroupRequest: UpdateRelationshipGroupRequest {
        get {
            if case let .updateRelationshipGroupRequest(v)? = kind { return v }
            return UpdateRelationshipGroupRequest()
        }
        set { kind = .updateRelationshipGroupRequest(newValue) }
    }

    public var updateRelationshipRequest: UpdateRelationshipRequest {
        get {
            if case let .updateRelationshipRequest(v)? = kind { return v }
            return UpdateRelationshipRequest()
        }
        set { kind = .updateRelationshipRequest(newValue) }
    }

    /// Group
    public var createGroupRequest: CreateGroupRequest {
        get {
            if case let .createGroupRequest(v)? = kind { return v }
            return CreateGroupRequest()
        }
        set { kind = .createGroupRequest(newValue) }
    }

    public var deleteGroupRequest: DeleteGroupRequest {
        get {
            if case let .deleteGroupRequest(v)? = kind { return v }
            return DeleteGroupRequest()
        }
        set { kind = .deleteGroupRequest(newValue) }
    }

    public var queryGroupsRequest: QueryGroupsRequest {
        get {
            if case let .queryGroupsRequest(v)? = kind { return v }
            return QueryGroupsRequest()
        }
        set { kind = .queryGroupsRequest(newValue) }
    }

    public var queryJoinedGroupIdsRequest: QueryJoinedGroupIdsRequest {
        get {
            if case let .queryJoinedGroupIdsRequest(v)? = kind { return v }
            return QueryJoinedGroupIdsRequest()
        }
        set { kind = .queryJoinedGroupIdsRequest(newValue) }
    }

    public var queryJoinedGroupInfosRequest: QueryJoinedGroupInfosRequest {
        get {
            if case let .queryJoinedGroupInfosRequest(v)? = kind { return v }
            return QueryJoinedGroupInfosRequest()
        }
        set { kind = .queryJoinedGroupInfosRequest(newValue) }
    }

    public var updateGroupRequest: UpdateGroupRequest {
        get {
            if case let .updateGroupRequest(v)? = kind { return v }
            return UpdateGroupRequest()
        }
        set { kind = .updateGroupRequest(newValue) }
    }

    /// Group Blocklist
    public var createGroupBlockedUserRequest: CreateGroupBlockedUserRequest {
        get {
            if case let .createGroupBlockedUserRequest(v)? = kind { return v }
            return CreateGroupBlockedUserRequest()
        }
        set { kind = .createGroupBlockedUserRequest(newValue) }
    }

    public var deleteGroupBlockedUserRequest: DeleteGroupBlockedUserRequest {
        get {
            if case let .deleteGroupBlockedUserRequest(v)? = kind { return v }
            return DeleteGroupBlockedUserRequest()
        }
        set { kind = .deleteGroupBlockedUserRequest(newValue) }
    }

    public var queryGroupBlockedUserIdsRequest: QueryGroupBlockedUserIdsRequest {
        get {
            if case let .queryGroupBlockedUserIdsRequest(v)? = kind { return v }
            return QueryGroupBlockedUserIdsRequest()
        }
        set { kind = .queryGroupBlockedUserIdsRequest(newValue) }
    }

    public var queryGroupBlockedUserInfosRequest: QueryGroupBlockedUserInfosRequest {
        get {
            if case let .queryGroupBlockedUserInfosRequest(v)? = kind { return v }
            return QueryGroupBlockedUserInfosRequest()
        }
        set { kind = .queryGroupBlockedUserInfosRequest(newValue) }
    }

    /// Group Enrollment
    public var checkGroupJoinQuestionsAnswersRequest: CheckGroupJoinQuestionsAnswersRequest {
        get {
            if case let .checkGroupJoinQuestionsAnswersRequest(v)? = kind { return v }
            return CheckGroupJoinQuestionsAnswersRequest()
        }
        set { kind = .checkGroupJoinQuestionsAnswersRequest(newValue) }
    }

    public var createGroupInvitationRequest: CreateGroupInvitationRequest {
        get {
            if case let .createGroupInvitationRequest(v)? = kind { return v }
            return CreateGroupInvitationRequest()
        }
        set { kind = .createGroupInvitationRequest(newValue) }
    }

    public var createGroupJoinRequestRequest: CreateGroupJoinRequestRequest {
        get {
            if case let .createGroupJoinRequestRequest(v)? = kind { return v }
            return CreateGroupJoinRequestRequest()
        }
        set { kind = .createGroupJoinRequestRequest(newValue) }
    }

    public var createGroupJoinQuestionsRequest: CreateGroupJoinQuestionsRequest {
        get {
            if case let .createGroupJoinQuestionsRequest(v)? = kind { return v }
            return CreateGroupJoinQuestionsRequest()
        }
        set { kind = .createGroupJoinQuestionsRequest(newValue) }
    }

    public var deleteGroupInvitationRequest: DeleteGroupInvitationRequest {
        get {
            if case let .deleteGroupInvitationRequest(v)? = kind { return v }
            return DeleteGroupInvitationRequest()
        }
        set { kind = .deleteGroupInvitationRequest(newValue) }
    }

    public var deleteGroupJoinRequestRequest: DeleteGroupJoinRequestRequest {
        get {
            if case let .deleteGroupJoinRequestRequest(v)? = kind { return v }
            return DeleteGroupJoinRequestRequest()
        }
        set { kind = .deleteGroupJoinRequestRequest(newValue) }
    }

    public var deleteGroupJoinQuestionsRequest: DeleteGroupJoinQuestionsRequest {
        get {
            if case let .deleteGroupJoinQuestionsRequest(v)? = kind { return v }
            return DeleteGroupJoinQuestionsRequest()
        }
        set { kind = .deleteGroupJoinQuestionsRequest(newValue) }
    }

    public var queryGroupInvitationsRequest: QueryGroupInvitationsRequest {
        get {
            if case let .queryGroupInvitationsRequest(v)? = kind { return v }
            return QueryGroupInvitationsRequest()
        }
        set { kind = .queryGroupInvitationsRequest(newValue) }
    }

    public var queryGroupJoinRequestsRequest: QueryGroupJoinRequestsRequest {
        get {
            if case let .queryGroupJoinRequestsRequest(v)? = kind { return v }
            return QueryGroupJoinRequestsRequest()
        }
        set { kind = .queryGroupJoinRequestsRequest(newValue) }
    }

    public var queryGroupJoinQuestionsRequest: QueryGroupJoinQuestionsRequest {
        get {
            if case let .queryGroupJoinQuestionsRequest(v)? = kind { return v }
            return QueryGroupJoinQuestionsRequest()
        }
        set { kind = .queryGroupJoinQuestionsRequest(newValue) }
    }

    public var updateGroupInvitationRequest: UpdateGroupInvitationRequest {
        get {
            if case let .updateGroupInvitationRequest(v)? = kind { return v }
            return UpdateGroupInvitationRequest()
        }
        set { kind = .updateGroupInvitationRequest(newValue) }
    }

    public var updateGroupJoinQuestionRequest: UpdateGroupJoinQuestionRequest {
        get {
            if case let .updateGroupJoinQuestionRequest(v)? = kind { return v }
            return UpdateGroupJoinQuestionRequest()
        }
        set { kind = .updateGroupJoinQuestionRequest(newValue) }
    }

    public var updateGroupJoinRequestRequest: UpdateGroupJoinRequestRequest {
        get {
            if case let .updateGroupJoinRequestRequest(v)? = kind { return v }
            return UpdateGroupJoinRequestRequest()
        }
        set { kind = .updateGroupJoinRequestRequest(newValue) }
    }

    /// Conference
    public var createMeetingRequest: CreateMeetingRequest {
        get {
            if case let .createMeetingRequest(v)? = kind { return v }
            return CreateMeetingRequest()
        }
        set { kind = .createMeetingRequest(newValue) }
    }

    public var deleteMeetingRequest: DeleteMeetingRequest {
        get {
            if case let .deleteMeetingRequest(v)? = kind { return v }
            return DeleteMeetingRequest()
        }
        set { kind = .deleteMeetingRequest(newValue) }
    }

    public var queryMeetingsRequest: QueryMeetingsRequest {
        get {
            if case let .queryMeetingsRequest(v)? = kind { return v }
            return QueryMeetingsRequest()
        }
        set { kind = .queryMeetingsRequest(newValue) }
    }

    public var updateMeetingRequest: UpdateMeetingRequest {
        get {
            if case let .updateMeetingRequest(v)? = kind { return v }
            return UpdateMeetingRequest()
        }
        set { kind = .updateMeetingRequest(newValue) }
    }

    public var updateMeetingInvitationRequest: UpdateMeetingInvitationRequest {
        get {
            if case let .updateMeetingInvitationRequest(v)? = kind { return v }
            return UpdateMeetingInvitationRequest()
        }
        set { kind = .updateMeetingInvitationRequest(newValue) }
    }

    /// Storage
    public var deleteResourceRequest: DeleteResourceRequest {
        get {
            if case let .deleteResourceRequest(v)? = kind { return v }
            return DeleteResourceRequest()
        }
        set { kind = .deleteResourceRequest(newValue) }
    }

    public var queryResourceDownloadInfoRequest: QueryResourceDownloadInfoRequest {
        get {
            if case let .queryResourceDownloadInfoRequest(v)? = kind { return v }
            return QueryResourceDownloadInfoRequest()
        }
        set { kind = .queryResourceDownloadInfoRequest(newValue) }
    }

    public var queryResourceUploadInfoRequest: QueryResourceUploadInfoRequest {
        get {
            if case let .queryResourceUploadInfoRequest(v)? = kind { return v }
            return QueryResourceUploadInfoRequest()
        }
        set { kind = .queryResourceUploadInfoRequest(newValue) }
    }

    public var queryMessageAttachmentInfosRequest: QueryMessageAttachmentInfosRequest {
        get {
            if case let .queryMessageAttachmentInfosRequest(v)? = kind { return v }
            return QueryMessageAttachmentInfosRequest()
        }
        set { kind = .queryMessageAttachmentInfosRequest(newValue) }
    }

    public var updateMessageAttachmentInfoRequest: UpdateMessageAttachmentInfoRequest {
        get {
            if case let .updateMessageAttachmentInfoRequest(v)? = kind { return v }
            return UpdateMessageAttachmentInfoRequest()
        }
        set { kind = .updateMessageAttachmentInfoRequest(newValue) }
    }

    /// Conversation - Supplement
    public var deleteConversationSettingsRequest: DeleteConversationSettingsRequest {
        get {
            if case let .deleteConversationSettingsRequest(v)? = kind { return v }
            return DeleteConversationSettingsRequest()
        }
        set { kind = .deleteConversationSettingsRequest(newValue) }
    }

    public var queryConversationSettingsRequest: QueryConversationSettingsRequest {
        get {
            if case let .queryConversationSettingsRequest(v)? = kind { return v }
            return QueryConversationSettingsRequest()
        }
        set { kind = .queryConversationSettingsRequest(newValue) }
    }

    public var updateConversationSettingsRequest: UpdateConversationSettingsRequest {
        get {
            if case let .updateConversationSettingsRequest(v)? = kind { return v }
            return UpdateConversationSettingsRequest()
        }
        set { kind = .updateConversationSettingsRequest(newValue) }
    }

    /// Message - Supplement
    public var createMessageReactionsRequest: CreateMessageReactionsRequest {
        get {
            if case let .createMessageReactionsRequest(v)? = kind { return v }
            return CreateMessageReactionsRequest()
        }
        set { kind = .createMessageReactionsRequest(newValue) }
    }

    public var deleteMessageReactionsRequest: DeleteMessageReactionsRequest {
        get {
            if case let .deleteMessageReactionsRequest(v)? = kind { return v }
            return DeleteMessageReactionsRequest()
        }
        set { kind = .deleteMessageReactionsRequest(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Kind: Equatable {
        /// User - Session
        case createSessionRequest(CreateSessionRequest)
        case deleteSessionRequest(DeleteSessionRequest)
        /// Conversation
        case queryConversationsRequest(QueryConversationsRequest)
        case updateConversationRequest(UpdateConversationRequest)
        case updateTypingStatusRequest(UpdateTypingStatusRequest)
        /// Message
        case createMessageRequest(CreateMessageRequest)
        case queryMessagesRequest(QueryMessagesRequest)
        case updateMessageRequest(UpdateMessageRequest)
        /// Group Member
        case createGroupMembersRequest(CreateGroupMembersRequest)
        case deleteGroupMembersRequest(DeleteGroupMembersRequest)
        case queryGroupMembersRequest(QueryGroupMembersRequest)
        case updateGroupMemberRequest(UpdateGroupMemberRequest)
        /// User
        case queryUserProfilesRequest(QueryUserProfilesRequest)
        case queryNearbyUsersRequest(QueryNearbyUsersRequest)
        case queryUserOnlineStatusesRequest(QueryUserOnlineStatusesRequest)
        case updateUserLocationRequest(UpdateUserLocationRequest)
        case updateUserOnlineStatusRequest(UpdateUserOnlineStatusRequest)
        case updateUserRequest(UpdateUserRequest)
        case updateUserSettingsRequest(UpdateUserSettingsRequest)
        case deleteUserSettingsRequest(DeleteUserSettingsRequest)
        case queryUserSettingsRequest(QueryUserSettingsRequest)
        /// User Relationship
        case createFriendRequestRequest(CreateFriendRequestRequest)
        case createRelationshipGroupRequest(CreateRelationshipGroupRequest)
        case createRelationshipRequest(CreateRelationshipRequest)
        case deleteFriendRequestRequest(DeleteFriendRequestRequest)
        case deleteRelationshipGroupRequest(DeleteRelationshipGroupRequest)
        case deleteRelationshipRequest(DeleteRelationshipRequest)
        case queryFriendRequestsRequest(QueryFriendRequestsRequest)
        case queryRelatedUserIdsRequest(QueryRelatedUserIdsRequest)
        case queryRelationshipGroupsRequest(QueryRelationshipGroupsRequest)
        case queryRelationshipsRequest(QueryRelationshipsRequest)
        case updateFriendRequestRequest(UpdateFriendRequestRequest)
        case updateRelationshipGroupRequest(UpdateRelationshipGroupRequest)
        case updateRelationshipRequest(UpdateRelationshipRequest)
        /// Group
        case createGroupRequest(CreateGroupRequest)
        case deleteGroupRequest(DeleteGroupRequest)
        case queryGroupsRequest(QueryGroupsRequest)
        case queryJoinedGroupIdsRequest(QueryJoinedGroupIdsRequest)
        case queryJoinedGroupInfosRequest(QueryJoinedGroupInfosRequest)
        case updateGroupRequest(UpdateGroupRequest)
        /// Group Blocklist
        case createGroupBlockedUserRequest(CreateGroupBlockedUserRequest)
        case deleteGroupBlockedUserRequest(DeleteGroupBlockedUserRequest)
        case queryGroupBlockedUserIdsRequest(QueryGroupBlockedUserIdsRequest)
        case queryGroupBlockedUserInfosRequest(QueryGroupBlockedUserInfosRequest)
        /// Group Enrollment
        case checkGroupJoinQuestionsAnswersRequest(CheckGroupJoinQuestionsAnswersRequest)
        case createGroupInvitationRequest(CreateGroupInvitationRequest)
        case createGroupJoinRequestRequest(CreateGroupJoinRequestRequest)
        case createGroupJoinQuestionsRequest(CreateGroupJoinQuestionsRequest)
        case deleteGroupInvitationRequest(DeleteGroupInvitationRequest)
        case deleteGroupJoinRequestRequest(DeleteGroupJoinRequestRequest)
        case deleteGroupJoinQuestionsRequest(DeleteGroupJoinQuestionsRequest)
        case queryGroupInvitationsRequest(QueryGroupInvitationsRequest)
        case queryGroupJoinRequestsRequest(QueryGroupJoinRequestsRequest)
        case queryGroupJoinQuestionsRequest(QueryGroupJoinQuestionsRequest)
        case updateGroupInvitationRequest(UpdateGroupInvitationRequest)
        case updateGroupJoinQuestionRequest(UpdateGroupJoinQuestionRequest)
        case updateGroupJoinRequestRequest(UpdateGroupJoinRequestRequest)
        /// Conference
        case createMeetingRequest(CreateMeetingRequest)
        case deleteMeetingRequest(DeleteMeetingRequest)
        case queryMeetingsRequest(QueryMeetingsRequest)
        case updateMeetingRequest(UpdateMeetingRequest)
        case updateMeetingInvitationRequest(UpdateMeetingInvitationRequest)
        /// Storage
        case deleteResourceRequest(DeleteResourceRequest)
        case queryResourceDownloadInfoRequest(QueryResourceDownloadInfoRequest)
        case queryResourceUploadInfoRequest(QueryResourceUploadInfoRequest)
        case queryMessageAttachmentInfosRequest(QueryMessageAttachmentInfosRequest)
        case updateMessageAttachmentInfoRequest(UpdateMessageAttachmentInfoRequest)
        /// Conversation - Supplement
        case deleteConversationSettingsRequest(DeleteConversationSettingsRequest)
        case queryConversationSettingsRequest(QueryConversationSettingsRequest)
        case updateConversationSettingsRequest(UpdateConversationSettingsRequest)
        /// Message - Supplement
        case createMessageReactionsRequest(CreateMessageReactionsRequest)
        case deleteMessageReactionsRequest(DeleteMessageReactionsRequest)

        #if !swift(>=4.1)
            public static func == (lhs: TurmsRequest.OneOf_Kind, rhs: TurmsRequest.OneOf_Kind) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.createSessionRequest, .createSessionRequest): return {
                        guard case let .createSessionRequest(l) = lhs, case let .createSessionRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteSessionRequest, .deleteSessionRequest): return {
                        guard case let .deleteSessionRequest(l) = lhs, case let .deleteSessionRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryConversationsRequest, .queryConversationsRequest): return {
                        guard case let .queryConversationsRequest(l) = lhs, case let .queryConversationsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateConversationRequest, .updateConversationRequest): return {
                        guard case let .updateConversationRequest(l) = lhs, case let .updateConversationRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateTypingStatusRequest, .updateTypingStatusRequest): return {
                        guard case let .updateTypingStatusRequest(l) = lhs, case let .updateTypingStatusRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createMessageRequest, .createMessageRequest): return {
                        guard case let .createMessageRequest(l) = lhs, case let .createMessageRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryMessagesRequest, .queryMessagesRequest): return {
                        guard case let .queryMessagesRequest(l) = lhs, case let .queryMessagesRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateMessageRequest, .updateMessageRequest): return {
                        guard case let .updateMessageRequest(l) = lhs, case let .updateMessageRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createGroupMembersRequest, .createGroupMembersRequest): return {
                        guard case let .createGroupMembersRequest(l) = lhs, case let .createGroupMembersRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteGroupMembersRequest, .deleteGroupMembersRequest): return {
                        guard case let .deleteGroupMembersRequest(l) = lhs, case let .deleteGroupMembersRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryGroupMembersRequest, .queryGroupMembersRequest): return {
                        guard case let .queryGroupMembersRequest(l) = lhs, case let .queryGroupMembersRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateGroupMemberRequest, .updateGroupMemberRequest): return {
                        guard case let .updateGroupMemberRequest(l) = lhs, case let .updateGroupMemberRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryUserProfilesRequest, .queryUserProfilesRequest): return {
                        guard case let .queryUserProfilesRequest(l) = lhs, case let .queryUserProfilesRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryNearbyUsersRequest, .queryNearbyUsersRequest): return {
                        guard case let .queryNearbyUsersRequest(l) = lhs, case let .queryNearbyUsersRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryUserOnlineStatusesRequest, .queryUserOnlineStatusesRequest): return {
                        guard case let .queryUserOnlineStatusesRequest(l) = lhs, case let .queryUserOnlineStatusesRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateUserLocationRequest, .updateUserLocationRequest): return {
                        guard case let .updateUserLocationRequest(l) = lhs, case let .updateUserLocationRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateUserOnlineStatusRequest, .updateUserOnlineStatusRequest): return {
                        guard case let .updateUserOnlineStatusRequest(l) = lhs, case let .updateUserOnlineStatusRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateUserRequest, .updateUserRequest): return {
                        guard case let .updateUserRequest(l) = lhs, case let .updateUserRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateUserSettingsRequest, .updateUserSettingsRequest): return {
                        guard case let .updateUserSettingsRequest(l) = lhs, case let .updateUserSettingsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteUserSettingsRequest, .deleteUserSettingsRequest): return {
                        guard case let .deleteUserSettingsRequest(l) = lhs, case let .deleteUserSettingsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryUserSettingsRequest, .queryUserSettingsRequest): return {
                        guard case let .queryUserSettingsRequest(l) = lhs, case let .queryUserSettingsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createFriendRequestRequest, .createFriendRequestRequest): return {
                        guard case let .createFriendRequestRequest(l) = lhs, case let .createFriendRequestRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createRelationshipGroupRequest, .createRelationshipGroupRequest): return {
                        guard case let .createRelationshipGroupRequest(l) = lhs, case let .createRelationshipGroupRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createRelationshipRequest, .createRelationshipRequest): return {
                        guard case let .createRelationshipRequest(l) = lhs, case let .createRelationshipRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteFriendRequestRequest, .deleteFriendRequestRequest): return {
                        guard case let .deleteFriendRequestRequest(l) = lhs, case let .deleteFriendRequestRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteRelationshipGroupRequest, .deleteRelationshipGroupRequest): return {
                        guard case let .deleteRelationshipGroupRequest(l) = lhs, case let .deleteRelationshipGroupRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteRelationshipRequest, .deleteRelationshipRequest): return {
                        guard case let .deleteRelationshipRequest(l) = lhs, case let .deleteRelationshipRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryFriendRequestsRequest, .queryFriendRequestsRequest): return {
                        guard case let .queryFriendRequestsRequest(l) = lhs, case let .queryFriendRequestsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryRelatedUserIdsRequest, .queryRelatedUserIdsRequest): return {
                        guard case let .queryRelatedUserIdsRequest(l) = lhs, case let .queryRelatedUserIdsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryRelationshipGroupsRequest, .queryRelationshipGroupsRequest): return {
                        guard case let .queryRelationshipGroupsRequest(l) = lhs, case let .queryRelationshipGroupsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryRelationshipsRequest, .queryRelationshipsRequest): return {
                        guard case let .queryRelationshipsRequest(l) = lhs, case let .queryRelationshipsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateFriendRequestRequest, .updateFriendRequestRequest): return {
                        guard case let .updateFriendRequestRequest(l) = lhs, case let .updateFriendRequestRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateRelationshipGroupRequest, .updateRelationshipGroupRequest): return {
                        guard case let .updateRelationshipGroupRequest(l) = lhs, case let .updateRelationshipGroupRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateRelationshipRequest, .updateRelationshipRequest): return {
                        guard case let .updateRelationshipRequest(l) = lhs, case let .updateRelationshipRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createGroupRequest, .createGroupRequest): return {
                        guard case let .createGroupRequest(l) = lhs, case let .createGroupRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteGroupRequest, .deleteGroupRequest): return {
                        guard case let .deleteGroupRequest(l) = lhs, case let .deleteGroupRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryGroupsRequest, .queryGroupsRequest): return {
                        guard case let .queryGroupsRequest(l) = lhs, case let .queryGroupsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryJoinedGroupIdsRequest, .queryJoinedGroupIdsRequest): return {
                        guard case let .queryJoinedGroupIdsRequest(l) = lhs, case let .queryJoinedGroupIdsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryJoinedGroupInfosRequest, .queryJoinedGroupInfosRequest): return {
                        guard case let .queryJoinedGroupInfosRequest(l) = lhs, case let .queryJoinedGroupInfosRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateGroupRequest, .updateGroupRequest): return {
                        guard case let .updateGroupRequest(l) = lhs, case let .updateGroupRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createGroupBlockedUserRequest, .createGroupBlockedUserRequest): return {
                        guard case let .createGroupBlockedUserRequest(l) = lhs, case let .createGroupBlockedUserRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteGroupBlockedUserRequest, .deleteGroupBlockedUserRequest): return {
                        guard case let .deleteGroupBlockedUserRequest(l) = lhs, case let .deleteGroupBlockedUserRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryGroupBlockedUserIdsRequest, .queryGroupBlockedUserIdsRequest): return {
                        guard case let .queryGroupBlockedUserIdsRequest(l) = lhs, case let .queryGroupBlockedUserIdsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryGroupBlockedUserInfosRequest, .queryGroupBlockedUserInfosRequest): return {
                        guard case let .queryGroupBlockedUserInfosRequest(l) = lhs, case let .queryGroupBlockedUserInfosRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.checkGroupJoinQuestionsAnswersRequest, .checkGroupJoinQuestionsAnswersRequest): return {
                        guard case let .checkGroupJoinQuestionsAnswersRequest(l) = lhs, case let .checkGroupJoinQuestionsAnswersRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createGroupInvitationRequest, .createGroupInvitationRequest): return {
                        guard case let .createGroupInvitationRequest(l) = lhs, case let .createGroupInvitationRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createGroupJoinRequestRequest, .createGroupJoinRequestRequest): return {
                        guard case let .createGroupJoinRequestRequest(l) = lhs, case let .createGroupJoinRequestRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createGroupJoinQuestionsRequest, .createGroupJoinQuestionsRequest): return {
                        guard case let .createGroupJoinQuestionsRequest(l) = lhs, case let .createGroupJoinQuestionsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteGroupInvitationRequest, .deleteGroupInvitationRequest): return {
                        guard case let .deleteGroupInvitationRequest(l) = lhs, case let .deleteGroupInvitationRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteGroupJoinRequestRequest, .deleteGroupJoinRequestRequest): return {
                        guard case let .deleteGroupJoinRequestRequest(l) = lhs, case let .deleteGroupJoinRequestRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteGroupJoinQuestionsRequest, .deleteGroupJoinQuestionsRequest): return {
                        guard case let .deleteGroupJoinQuestionsRequest(l) = lhs, case let .deleteGroupJoinQuestionsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryGroupInvitationsRequest, .queryGroupInvitationsRequest): return {
                        guard case let .queryGroupInvitationsRequest(l) = lhs, case let .queryGroupInvitationsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryGroupJoinRequestsRequest, .queryGroupJoinRequestsRequest): return {
                        guard case let .queryGroupJoinRequestsRequest(l) = lhs, case let .queryGroupJoinRequestsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryGroupJoinQuestionsRequest, .queryGroupJoinQuestionsRequest): return {
                        guard case let .queryGroupJoinQuestionsRequest(l) = lhs, case let .queryGroupJoinQuestionsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateGroupInvitationRequest, .updateGroupInvitationRequest): return {
                        guard case let .updateGroupInvitationRequest(l) = lhs, case let .updateGroupInvitationRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateGroupJoinQuestionRequest, .updateGroupJoinQuestionRequest): return {
                        guard case let .updateGroupJoinQuestionRequest(l) = lhs, case let .updateGroupJoinQuestionRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateGroupJoinRequestRequest, .updateGroupJoinRequestRequest): return {
                        guard case let .updateGroupJoinRequestRequest(l) = lhs, case let .updateGroupJoinRequestRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createMeetingRequest, .createMeetingRequest): return {
                        guard case let .createMeetingRequest(l) = lhs, case let .createMeetingRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteMeetingRequest, .deleteMeetingRequest): return {
                        guard case let .deleteMeetingRequest(l) = lhs, case let .deleteMeetingRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryMeetingsRequest, .queryMeetingsRequest): return {
                        guard case let .queryMeetingsRequest(l) = lhs, case let .queryMeetingsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateMeetingRequest, .updateMeetingRequest): return {
                        guard case let .updateMeetingRequest(l) = lhs, case let .updateMeetingRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateMeetingInvitationRequest, .updateMeetingInvitationRequest): return {
                        guard case let .updateMeetingInvitationRequest(l) = lhs, case let .updateMeetingInvitationRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteResourceRequest, .deleteResourceRequest): return {
                        guard case let .deleteResourceRequest(l) = lhs, case let .deleteResourceRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryResourceDownloadInfoRequest, .queryResourceDownloadInfoRequest): return {
                        guard case let .queryResourceDownloadInfoRequest(l) = lhs, case let .queryResourceDownloadInfoRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryResourceUploadInfoRequest, .queryResourceUploadInfoRequest): return {
                        guard case let .queryResourceUploadInfoRequest(l) = lhs, case let .queryResourceUploadInfoRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryMessageAttachmentInfosRequest, .queryMessageAttachmentInfosRequest): return {
                        guard case let .queryMessageAttachmentInfosRequest(l) = lhs, case let .queryMessageAttachmentInfosRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateMessageAttachmentInfoRequest, .updateMessageAttachmentInfoRequest): return {
                        guard case let .updateMessageAttachmentInfoRequest(l) = lhs, case let .updateMessageAttachmentInfoRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteConversationSettingsRequest, .deleteConversationSettingsRequest): return {
                        guard case let .deleteConversationSettingsRequest(l) = lhs, case let .deleteConversationSettingsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.queryConversationSettingsRequest, .queryConversationSettingsRequest): return {
                        guard case let .queryConversationSettingsRequest(l) = lhs, case let .queryConversationSettingsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.updateConversationSettingsRequest, .updateConversationSettingsRequest): return {
                        guard case let .updateConversationSettingsRequest(l) = lhs, case let .updateConversationSettingsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.createMessageReactionsRequest, .createMessageReactionsRequest): return {
                        guard case let .createMessageReactionsRequest(l) = lhs, case let .createMessageReactionsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.deleteMessageReactionsRequest, .deleteMessageReactionsRequest): return {
                        guard case let .deleteMessageReactionsRequest(l) = lhs, case let .deleteMessageReactionsRequest(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}

    fileprivate var _requestID: Int64?
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension TurmsRequest: @unchecked Sendable {}
    extension TurmsRequest.OneOf_Kind: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "im.turms.proto"

extension TurmsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".TurmsRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "request_id"),
        2: .standard(proto: "custom_attributes"),
        3: .standard(proto: "create_session_request"),
        4: .standard(proto: "delete_session_request"),
        5: .standard(proto: "query_conversations_request"),
        6: .standard(proto: "update_conversation_request"),
        7: .standard(proto: "update_typing_status_request"),
        8: .standard(proto: "create_message_request"),
        9: .standard(proto: "query_messages_request"),
        10: .standard(proto: "update_message_request"),
        11: .standard(proto: "create_group_members_request"),
        12: .standard(proto: "delete_group_members_request"),
        13: .standard(proto: "query_group_members_request"),
        14: .standard(proto: "update_group_member_request"),
        100: .standard(proto: "query_user_profiles_request"),
        101: .standard(proto: "query_nearby_users_request"),
        102: .standard(proto: "query_user_online_statuses_request"),
        103: .standard(proto: "update_user_location_request"),
        104: .standard(proto: "update_user_online_status_request"),
        105: .standard(proto: "update_user_request"),
        106: .standard(proto: "update_user_settings_request"),
        107: .standard(proto: "delete_user_settings_request"),
        108: .standard(proto: "query_user_settings_request"),
        200: .standard(proto: "create_friend_request_request"),
        201: .standard(proto: "create_relationship_group_request"),
        202: .standard(proto: "create_relationship_request"),
        203: .standard(proto: "delete_friend_request_request"),
        204: .standard(proto: "delete_relationship_group_request"),
        205: .standard(proto: "delete_relationship_request"),
        206: .standard(proto: "query_friend_requests_request"),
        207: .standard(proto: "query_related_user_ids_request"),
        208: .standard(proto: "query_relationship_groups_request"),
        209: .standard(proto: "query_relationships_request"),
        210: .standard(proto: "update_friend_request_request"),
        211: .standard(proto: "update_relationship_group_request"),
        212: .standard(proto: "update_relationship_request"),
        300: .standard(proto: "create_group_request"),
        301: .standard(proto: "delete_group_request"),
        302: .standard(proto: "query_groups_request"),
        303: .standard(proto: "query_joined_group_ids_request"),
        304: .standard(proto: "query_joined_group_infos_request"),
        305: .standard(proto: "update_group_request"),
        400: .standard(proto: "create_group_blocked_user_request"),
        401: .standard(proto: "delete_group_blocked_user_request"),
        402: .standard(proto: "query_group_blocked_user_ids_request"),
        403: .standard(proto: "query_group_blocked_user_infos_request"),
        500: .standard(proto: "check_group_join_questions_answers_request"),
        501: .standard(proto: "create_group_invitation_request"),
        502: .standard(proto: "create_group_join_request_request"),
        503: .standard(proto: "create_group_join_questions_request"),
        504: .standard(proto: "delete_group_invitation_request"),
        505: .standard(proto: "delete_group_join_request_request"),
        506: .standard(proto: "delete_group_join_questions_request"),
        507: .standard(proto: "query_group_invitations_request"),
        508: .standard(proto: "query_group_join_requests_request"),
        509: .standard(proto: "query_group_join_questions_request"),
        510: .standard(proto: "update_group_invitation_request"),
        511: .standard(proto: "update_group_join_question_request"),
        512: .standard(proto: "update_group_join_request_request"),
        900: .standard(proto: "create_meeting_request"),
        901: .standard(proto: "delete_meeting_request"),
        902: .standard(proto: "query_meetings_request"),
        903: .standard(proto: "update_meeting_request"),
        904: .standard(proto: "update_meeting_invitation_request"),
        1000: .standard(proto: "delete_resource_request"),
        1001: .standard(proto: "query_resource_download_info_request"),
        1002: .standard(proto: "query_resource_upload_info_request"),
        1003: .standard(proto: "query_message_attachment_infos_request"),
        1004: .standard(proto: "update_message_attachment_info_request"),
        1100: .standard(proto: "delete_conversation_settings_request"),
        1101: .standard(proto: "query_conversation_settings_request"),
        1102: .standard(proto: "update_conversation_settings_request"),
        1200: .standard(proto: "create_message_reactions_request"),
        1201: .standard(proto: "delete_message_reactions_request"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &_requestID)
            case 2: try decoder.decodeRepeatedMessageField(value: &customAttributes)
            case 3: try {
                    var v: CreateSessionRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createSessionRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createSessionRequest(v)
                    }
                }()
            case 4: try {
                    var v: DeleteSessionRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteSessionRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteSessionRequest(v)
                    }
                }()
            case 5: try {
                    var v: QueryConversationsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryConversationsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryConversationsRequest(v)
                    }
                }()
            case 6: try {
                    var v: UpdateConversationRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateConversationRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateConversationRequest(v)
                    }
                }()
            case 7: try {
                    var v: UpdateTypingStatusRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateTypingStatusRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateTypingStatusRequest(v)
                    }
                }()
            case 8: try {
                    var v: CreateMessageRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createMessageRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createMessageRequest(v)
                    }
                }()
            case 9: try {
                    var v: QueryMessagesRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryMessagesRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryMessagesRequest(v)
                    }
                }()
            case 10: try {
                    var v: UpdateMessageRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateMessageRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateMessageRequest(v)
                    }
                }()
            case 11: try {
                    var v: CreateGroupMembersRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createGroupMembersRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createGroupMembersRequest(v)
                    }
                }()
            case 12: try {
                    var v: DeleteGroupMembersRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteGroupMembersRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteGroupMembersRequest(v)
                    }
                }()
            case 13: try {
                    var v: QueryGroupMembersRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryGroupMembersRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryGroupMembersRequest(v)
                    }
                }()
            case 14: try {
                    var v: UpdateGroupMemberRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateGroupMemberRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateGroupMemberRequest(v)
                    }
                }()
            case 100: try {
                    var v: QueryUserProfilesRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryUserProfilesRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryUserProfilesRequest(v)
                    }
                }()
            case 101: try {
                    var v: QueryNearbyUsersRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryNearbyUsersRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryNearbyUsersRequest(v)
                    }
                }()
            case 102: try {
                    var v: QueryUserOnlineStatusesRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryUserOnlineStatusesRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryUserOnlineStatusesRequest(v)
                    }
                }()
            case 103: try {
                    var v: UpdateUserLocationRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateUserLocationRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateUserLocationRequest(v)
                    }
                }()
            case 104: try {
                    var v: UpdateUserOnlineStatusRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateUserOnlineStatusRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateUserOnlineStatusRequest(v)
                    }
                }()
            case 105: try {
                    var v: UpdateUserRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateUserRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateUserRequest(v)
                    }
                }()
            case 106: try {
                    var v: UpdateUserSettingsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateUserSettingsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateUserSettingsRequest(v)
                    }
                }()
            case 107: try {
                    var v: DeleteUserSettingsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteUserSettingsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteUserSettingsRequest(v)
                    }
                }()
            case 108: try {
                    var v: QueryUserSettingsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryUserSettingsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryUserSettingsRequest(v)
                    }
                }()
            case 200: try {
                    var v: CreateFriendRequestRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createFriendRequestRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createFriendRequestRequest(v)
                    }
                }()
            case 201: try {
                    var v: CreateRelationshipGroupRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createRelationshipGroupRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createRelationshipGroupRequest(v)
                    }
                }()
            case 202: try {
                    var v: CreateRelationshipRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createRelationshipRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createRelationshipRequest(v)
                    }
                }()
            case 203: try {
                    var v: DeleteFriendRequestRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteFriendRequestRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteFriendRequestRequest(v)
                    }
                }()
            case 204: try {
                    var v: DeleteRelationshipGroupRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteRelationshipGroupRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteRelationshipGroupRequest(v)
                    }
                }()
            case 205: try {
                    var v: DeleteRelationshipRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteRelationshipRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteRelationshipRequest(v)
                    }
                }()
            case 206: try {
                    var v: QueryFriendRequestsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryFriendRequestsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryFriendRequestsRequest(v)
                    }
                }()
            case 207: try {
                    var v: QueryRelatedUserIdsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryRelatedUserIdsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryRelatedUserIdsRequest(v)
                    }
                }()
            case 208: try {
                    var v: QueryRelationshipGroupsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryRelationshipGroupsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryRelationshipGroupsRequest(v)
                    }
                }()
            case 209: try {
                    var v: QueryRelationshipsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryRelationshipsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryRelationshipsRequest(v)
                    }
                }()
            case 210: try {
                    var v: UpdateFriendRequestRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateFriendRequestRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateFriendRequestRequest(v)
                    }
                }()
            case 211: try {
                    var v: UpdateRelationshipGroupRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateRelationshipGroupRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateRelationshipGroupRequest(v)
                    }
                }()
            case 212: try {
                    var v: UpdateRelationshipRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateRelationshipRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateRelationshipRequest(v)
                    }
                }()
            case 300: try {
                    var v: CreateGroupRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createGroupRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createGroupRequest(v)
                    }
                }()
            case 301: try {
                    var v: DeleteGroupRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteGroupRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteGroupRequest(v)
                    }
                }()
            case 302: try {
                    var v: QueryGroupsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryGroupsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryGroupsRequest(v)
                    }
                }()
            case 303: try {
                    var v: QueryJoinedGroupIdsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryJoinedGroupIdsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryJoinedGroupIdsRequest(v)
                    }
                }()
            case 304: try {
                    var v: QueryJoinedGroupInfosRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryJoinedGroupInfosRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryJoinedGroupInfosRequest(v)
                    }
                }()
            case 305: try {
                    var v: UpdateGroupRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateGroupRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateGroupRequest(v)
                    }
                }()
            case 400: try {
                    var v: CreateGroupBlockedUserRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createGroupBlockedUserRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createGroupBlockedUserRequest(v)
                    }
                }()
            case 401: try {
                    var v: DeleteGroupBlockedUserRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteGroupBlockedUserRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteGroupBlockedUserRequest(v)
                    }
                }()
            case 402: try {
                    var v: QueryGroupBlockedUserIdsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryGroupBlockedUserIdsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryGroupBlockedUserIdsRequest(v)
                    }
                }()
            case 403: try {
                    var v: QueryGroupBlockedUserInfosRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryGroupBlockedUserInfosRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryGroupBlockedUserInfosRequest(v)
                    }
                }()
            case 500: try {
                    var v: CheckGroupJoinQuestionsAnswersRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .checkGroupJoinQuestionsAnswersRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .checkGroupJoinQuestionsAnswersRequest(v)
                    }
                }()
            case 501: try {
                    var v: CreateGroupInvitationRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createGroupInvitationRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createGroupInvitationRequest(v)
                    }
                }()
            case 502: try {
                    var v: CreateGroupJoinRequestRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createGroupJoinRequestRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createGroupJoinRequestRequest(v)
                    }
                }()
            case 503: try {
                    var v: CreateGroupJoinQuestionsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createGroupJoinQuestionsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createGroupJoinQuestionsRequest(v)
                    }
                }()
            case 504: try {
                    var v: DeleteGroupInvitationRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteGroupInvitationRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteGroupInvitationRequest(v)
                    }
                }()
            case 505: try {
                    var v: DeleteGroupJoinRequestRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteGroupJoinRequestRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteGroupJoinRequestRequest(v)
                    }
                }()
            case 506: try {
                    var v: DeleteGroupJoinQuestionsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteGroupJoinQuestionsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteGroupJoinQuestionsRequest(v)
                    }
                }()
            case 507: try {
                    var v: QueryGroupInvitationsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryGroupInvitationsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryGroupInvitationsRequest(v)
                    }
                }()
            case 508: try {
                    var v: QueryGroupJoinRequestsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryGroupJoinRequestsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryGroupJoinRequestsRequest(v)
                    }
                }()
            case 509: try {
                    var v: QueryGroupJoinQuestionsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryGroupJoinQuestionsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryGroupJoinQuestionsRequest(v)
                    }
                }()
            case 510: try {
                    var v: UpdateGroupInvitationRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateGroupInvitationRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateGroupInvitationRequest(v)
                    }
                }()
            case 511: try {
                    var v: UpdateGroupJoinQuestionRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateGroupJoinQuestionRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateGroupJoinQuestionRequest(v)
                    }
                }()
            case 512: try {
                    var v: UpdateGroupJoinRequestRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateGroupJoinRequestRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateGroupJoinRequestRequest(v)
                    }
                }()
            case 900: try {
                    var v: CreateMeetingRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createMeetingRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createMeetingRequest(v)
                    }
                }()
            case 901: try {
                    var v: DeleteMeetingRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteMeetingRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteMeetingRequest(v)
                    }
                }()
            case 902: try {
                    var v: QueryMeetingsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryMeetingsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryMeetingsRequest(v)
                    }
                }()
            case 903: try {
                    var v: UpdateMeetingRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateMeetingRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateMeetingRequest(v)
                    }
                }()
            case 904: try {
                    var v: UpdateMeetingInvitationRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateMeetingInvitationRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateMeetingInvitationRequest(v)
                    }
                }()
            case 1000: try {
                    var v: DeleteResourceRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteResourceRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteResourceRequest(v)
                    }
                }()
            case 1001: try {
                    var v: QueryResourceDownloadInfoRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryResourceDownloadInfoRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryResourceDownloadInfoRequest(v)
                    }
                }()
            case 1002: try {
                    var v: QueryResourceUploadInfoRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryResourceUploadInfoRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryResourceUploadInfoRequest(v)
                    }
                }()
            case 1003: try {
                    var v: QueryMessageAttachmentInfosRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryMessageAttachmentInfosRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryMessageAttachmentInfosRequest(v)
                    }
                }()
            case 1004: try {
                    var v: UpdateMessageAttachmentInfoRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateMessageAttachmentInfoRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateMessageAttachmentInfoRequest(v)
                    }
                }()
            case 1100: try {
                    var v: DeleteConversationSettingsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteConversationSettingsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteConversationSettingsRequest(v)
                    }
                }()
            case 1101: try {
                    var v: QueryConversationSettingsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .queryConversationSettingsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .queryConversationSettingsRequest(v)
                    }
                }()
            case 1102: try {
                    var v: UpdateConversationSettingsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .updateConversationSettingsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .updateConversationSettingsRequest(v)
                    }
                }()
            case 1200: try {
                    var v: CreateMessageReactionsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .createMessageReactionsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .createMessageReactionsRequest(v)
                    }
                }()
            case 1201: try {
                    var v: DeleteMessageReactionsRequest?
                    var hadOneofValue = false
                    if let current = self.kind {
                        hadOneofValue = true
                        if case let .deleteMessageReactionsRequest(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.kind = .deleteMessageReactionsRequest(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._requestID {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
        } }()
        if !customAttributes.isEmpty {
            try visitor.visitRepeatedMessageField(value: customAttributes, fieldNumber: 2)
        }
        switch kind {
        case .createSessionRequest?: try {
                guard case let .createSessionRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }()
        case .deleteSessionRequest?: try {
                guard case let .deleteSessionRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }()
        case .queryConversationsRequest?: try {
                guard case let .queryConversationsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }()
        case .updateConversationRequest?: try {
                guard case let .updateConversationRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }()
        case .updateTypingStatusRequest?: try {
                guard case let .updateTypingStatusRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }()
        case .createMessageRequest?: try {
                guard case let .createMessageRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }()
        case .queryMessagesRequest?: try {
                guard case let .queryMessagesRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            }()
        case .updateMessageRequest?: try {
                guard case let .updateMessageRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            }()
        case .createGroupMembersRequest?: try {
                guard case let .createGroupMembersRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }()
        case .deleteGroupMembersRequest?: try {
                guard case let .deleteGroupMembersRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            }()
        case .queryGroupMembersRequest?: try {
                guard case let .queryGroupMembersRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            }()
        case .updateGroupMemberRequest?: try {
                guard case let .updateGroupMemberRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            }()
        case .queryUserProfilesRequest?: try {
                guard case let .queryUserProfilesRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
            }()
        case .queryNearbyUsersRequest?: try {
                guard case let .queryNearbyUsersRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
            }()
        case .queryUserOnlineStatusesRequest?: try {
                guard case let .queryUserOnlineStatusesRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
            }()
        case .updateUserLocationRequest?: try {
                guard case let .updateUserLocationRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
            }()
        case .updateUserOnlineStatusRequest?: try {
                guard case let .updateUserOnlineStatusRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
            }()
        case .updateUserRequest?: try {
                guard case let .updateUserRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
            }()
        case .updateUserSettingsRequest?: try {
                guard case let .updateUserSettingsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
            }()
        case .deleteUserSettingsRequest?: try {
                guard case let .deleteUserSettingsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
            }()
        case .queryUserSettingsRequest?: try {
                guard case let .queryUserSettingsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
            }()
        case .createFriendRequestRequest?: try {
                guard case let .createFriendRequestRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
            }()
        case .createRelationshipGroupRequest?: try {
                guard case let .createRelationshipGroupRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
            }()
        case .createRelationshipRequest?: try {
                guard case let .createRelationshipRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 202)
            }()
        case .deleteFriendRequestRequest?: try {
                guard case let .deleteFriendRequestRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 203)
            }()
        case .deleteRelationshipGroupRequest?: try {
                guard case let .deleteRelationshipGroupRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 204)
            }()
        case .deleteRelationshipRequest?: try {
                guard case let .deleteRelationshipRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 205)
            }()
        case .queryFriendRequestsRequest?: try {
                guard case let .queryFriendRequestsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 206)
            }()
        case .queryRelatedUserIdsRequest?: try {
                guard case let .queryRelatedUserIdsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 207)
            }()
        case .queryRelationshipGroupsRequest?: try {
                guard case let .queryRelationshipGroupsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 208)
            }()
        case .queryRelationshipsRequest?: try {
                guard case let .queryRelationshipsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 209)
            }()
        case .updateFriendRequestRequest?: try {
                guard case let .updateFriendRequestRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 210)
            }()
        case .updateRelationshipGroupRequest?: try {
                guard case let .updateRelationshipGroupRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 211)
            }()
        case .updateRelationshipRequest?: try {
                guard case let .updateRelationshipRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 212)
            }()
        case .createGroupRequest?: try {
                guard case let .createGroupRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 300)
            }()
        case .deleteGroupRequest?: try {
                guard case let .deleteGroupRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 301)
            }()
        case .queryGroupsRequest?: try {
                guard case let .queryGroupsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 302)
            }()
        case .queryJoinedGroupIdsRequest?: try {
                guard case let .queryJoinedGroupIdsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 303)
            }()
        case .queryJoinedGroupInfosRequest?: try {
                guard case let .queryJoinedGroupInfosRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 304)
            }()
        case .updateGroupRequest?: try {
                guard case let .updateGroupRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 305)
            }()
        case .createGroupBlockedUserRequest?: try {
                guard case let .createGroupBlockedUserRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 400)
            }()
        case .deleteGroupBlockedUserRequest?: try {
                guard case let .deleteGroupBlockedUserRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 401)
            }()
        case .queryGroupBlockedUserIdsRequest?: try {
                guard case let .queryGroupBlockedUserIdsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 402)
            }()
        case .queryGroupBlockedUserInfosRequest?: try {
                guard case let .queryGroupBlockedUserInfosRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 403)
            }()
        case .checkGroupJoinQuestionsAnswersRequest?: try {
                guard case let .checkGroupJoinQuestionsAnswersRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 500)
            }()
        case .createGroupInvitationRequest?: try {
                guard case let .createGroupInvitationRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 501)
            }()
        case .createGroupJoinRequestRequest?: try {
                guard case let .createGroupJoinRequestRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 502)
            }()
        case .createGroupJoinQuestionsRequest?: try {
                guard case let .createGroupJoinQuestionsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 503)
            }()
        case .deleteGroupInvitationRequest?: try {
                guard case let .deleteGroupInvitationRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 504)
            }()
        case .deleteGroupJoinRequestRequest?: try {
                guard case let .deleteGroupJoinRequestRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 505)
            }()
        case .deleteGroupJoinQuestionsRequest?: try {
                guard case let .deleteGroupJoinQuestionsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 506)
            }()
        case .queryGroupInvitationsRequest?: try {
                guard case let .queryGroupInvitationsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 507)
            }()
        case .queryGroupJoinRequestsRequest?: try {
                guard case let .queryGroupJoinRequestsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 508)
            }()
        case .queryGroupJoinQuestionsRequest?: try {
                guard case let .queryGroupJoinQuestionsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 509)
            }()
        case .updateGroupInvitationRequest?: try {
                guard case let .updateGroupInvitationRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 510)
            }()
        case .updateGroupJoinQuestionRequest?: try {
                guard case let .updateGroupJoinQuestionRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 511)
            }()
        case .updateGroupJoinRequestRequest?: try {
                guard case let .updateGroupJoinRequestRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 512)
            }()
        case .createMeetingRequest?: try {
                guard case let .createMeetingRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 900)
            }()
        case .deleteMeetingRequest?: try {
                guard case let .deleteMeetingRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 901)
            }()
        case .queryMeetingsRequest?: try {
                guard case let .queryMeetingsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 902)
            }()
        case .updateMeetingRequest?: try {
                guard case let .updateMeetingRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 903)
            }()
        case .updateMeetingInvitationRequest?: try {
                guard case let .updateMeetingInvitationRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 904)
            }()
        case .deleteResourceRequest?: try {
                guard case let .deleteResourceRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1000)
            }()
        case .queryResourceDownloadInfoRequest?: try {
                guard case let .queryResourceDownloadInfoRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
            }()
        case .queryResourceUploadInfoRequest?: try {
                guard case let .queryResourceUploadInfoRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1002)
            }()
        case .queryMessageAttachmentInfosRequest?: try {
                guard case let .queryMessageAttachmentInfosRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1003)
            }()
        case .updateMessageAttachmentInfoRequest?: try {
                guard case let .updateMessageAttachmentInfoRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1004)
            }()
        case .deleteConversationSettingsRequest?: try {
                guard case let .deleteConversationSettingsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1100)
            }()
        case .queryConversationSettingsRequest?: try {
                guard case let .queryConversationSettingsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1101)
            }()
        case .updateConversationSettingsRequest?: try {
                guard case let .updateConversationSettingsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1102)
            }()
        case .createMessageReactionsRequest?: try {
                guard case let .createMessageReactionsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1200)
            }()
        case .deleteMessageReactionsRequest?: try {
                guard case let .deleteMessageReactionsRequest(v)? = self.kind else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1201)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: TurmsRequest, rhs: TurmsRequest) -> Bool {
        if lhs._requestID != rhs._requestID { return false }
        if lhs.customAttributes != rhs.customAttributes { return false }
        if lhs.kind != rhs.kind { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
