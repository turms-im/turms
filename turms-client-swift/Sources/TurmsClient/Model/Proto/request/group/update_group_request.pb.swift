// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: request/group/update_group_request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct UpdateGroupRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Query filter
    public var groupID: Int64 = 0

    /// Update options
    public var quitAfterTransfer: Bool {
        get { return _quitAfterTransfer ?? false }
        set { _quitAfterTransfer = newValue }
    }

    /// Returns true if `quitAfterTransfer` has been explicitly set.
    public var hasQuitAfterTransfer: Bool { return _quitAfterTransfer != nil }
    /// Clears the value of `quitAfterTransfer`. Subsequent reads from it will return its default value.
    public mutating func clearQuitAfterTransfer() { _quitAfterTransfer = nil }

    /// Update
    public var name: String {
        get { return _name ?? String() }
        set { _name = newValue }
    }

    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool { return _name != nil }
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    public mutating func clearName() { _name = nil }

    public var intro: String {
        get { return _intro ?? String() }
        set { _intro = newValue }
    }

    /// Returns true if `intro` has been explicitly set.
    public var hasIntro: Bool { return _intro != nil }
    /// Clears the value of `intro`. Subsequent reads from it will return its default value.
    public mutating func clearIntro() { _intro = nil }

    public var announcement: String {
        get { return _announcement ?? String() }
        set { _announcement = newValue }
    }

    /// Returns true if `announcement` has been explicitly set.
    public var hasAnnouncement: Bool { return _announcement != nil }
    /// Clears the value of `announcement`. Subsequent reads from it will return its default value.
    public mutating func clearAnnouncement() { _announcement = nil }

    public var minScore: Int32 {
        get { return _minScore ?? 0 }
        set { _minScore = newValue }
    }

    /// Returns true if `minScore` has been explicitly set.
    public var hasMinScore: Bool { return _minScore != nil }
    /// Clears the value of `minScore`. Subsequent reads from it will return its default value.
    public mutating func clearMinScore() { _minScore = nil }

    public var typeID: Int64 {
        get { return _typeID ?? 0 }
        set { _typeID = newValue }
    }

    /// Returns true if `typeID` has been explicitly set.
    public var hasTypeID: Bool { return _typeID != nil }
    /// Clears the value of `typeID`. Subsequent reads from it will return its default value.
    public mutating func clearTypeID() { _typeID = nil }

    public var muteEndDate: Int64 {
        get { return _muteEndDate ?? 0 }
        set { _muteEndDate = newValue }
    }

    /// Returns true if `muteEndDate` has been explicitly set.
    public var hasMuteEndDate: Bool { return _muteEndDate != nil }
    /// Clears the value of `muteEndDate`. Subsequent reads from it will return its default value.
    public mutating func clearMuteEndDate() { _muteEndDate = nil }

    public var successorID: Int64 {
        get { return _successorID ?? 0 }
        set { _successorID = newValue }
    }

    /// Returns true if `successorID` has been explicitly set.
    public var hasSuccessorID: Bool { return _successorID != nil }
    /// Clears the value of `successorID`. Subsequent reads from it will return its default value.
    public mutating func clearSuccessorID() { _successorID = nil }

    public var userDefinedAttributes: [String: Value] = [:]

    public var customAttributes: [Value] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _quitAfterTransfer: Bool?
    fileprivate var _name: String?
    fileprivate var _intro: String?
    fileprivate var _announcement: String?
    fileprivate var _minScore: Int32?
    fileprivate var _typeID: Int64?
    fileprivate var _muteEndDate: Int64?
    fileprivate var _successorID: Int64?
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension UpdateGroupRequest: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "im.turms.proto"

extension UpdateGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UpdateGroupRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "group_id"),
        2: .standard(proto: "quit_after_transfer"),
        3: .same(proto: "name"),
        4: .same(proto: "intro"),
        5: .same(proto: "announcement"),
        6: .standard(proto: "min_score"),
        7: .standard(proto: "type_id"),
        8: .standard(proto: "mute_end_date"),
        9: .standard(proto: "successor_id"),
        10: .standard(proto: "user_defined_attributes"),
        15: .standard(proto: "custom_attributes"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &groupID)
            case 2: try decoder.decodeSingularBoolField(value: &_quitAfterTransfer)
            case 3: try decoder.decodeSingularStringField(value: &_name)
            case 4: try decoder.decodeSingularStringField(value: &_intro)
            case 5: try decoder.decodeSingularStringField(value: &_announcement)
            case 6: try decoder.decodeSingularInt32Field(value: &_minScore)
            case 7: try decoder.decodeSingularInt64Field(value: &_typeID)
            case 8: try decoder.decodeSingularInt64Field(value: &_muteEndDate)
            case 9: try decoder.decodeSingularInt64Field(value: &_successorID)
            case 10: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Value>.self, value: &userDefinedAttributes)
            case 15: try decoder.decodeRepeatedMessageField(value: &customAttributes)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if groupID != 0 {
            try visitor.visitSingularInt64Field(value: groupID, fieldNumber: 1)
        }
        try { if let v = self._quitAfterTransfer {
            try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._name {
            try visitor.visitSingularStringField(value: v, fieldNumber: 3)
        } }()
        try { if let v = self._intro {
            try visitor.visitSingularStringField(value: v, fieldNumber: 4)
        } }()
        try { if let v = self._announcement {
            try visitor.visitSingularStringField(value: v, fieldNumber: 5)
        } }()
        try { if let v = self._minScore {
            try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
        } }()
        try { if let v = self._typeID {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
        } }()
        try { if let v = self._muteEndDate {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
        } }()
        try { if let v = self._successorID {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
        } }()
        if !userDefinedAttributes.isEmpty {
            try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Value>.self, value: userDefinedAttributes, fieldNumber: 10)
        }
        if !customAttributes.isEmpty {
            try visitor.visitRepeatedMessageField(value: customAttributes, fieldNumber: 15)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: UpdateGroupRequest, rhs: UpdateGroupRequest) -> Bool {
        if lhs.groupID != rhs.groupID { return false }
        if lhs._quitAfterTransfer != rhs._quitAfterTransfer { return false }
        if lhs._name != rhs._name { return false }
        if lhs._intro != rhs._intro { return false }
        if lhs._announcement != rhs._announcement { return false }
        if lhs._minScore != rhs._minScore { return false }
        if lhs._typeID != rhs._typeID { return false }
        if lhs._muteEndDate != rhs._muteEndDate { return false }
        if lhs._successorID != rhs._successorID { return false }
        if lhs.userDefinedAttributes != rhs.userDefinedAttributes { return false }
        if lhs.customAttributes != rhs.customAttributes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
