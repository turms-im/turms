// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: request/storage/update_message_attachment_info_request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct UpdateMessageAttachmentInfoRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Query filter
    public var attachmentIDNum: Int64 {
        get { return _attachmentIDNum ?? 0 }
        set { _attachmentIDNum = newValue }
    }

    /// Returns true if `attachmentIDNum` has been explicitly set.
    public var hasAttachmentIDNum: Bool { return _attachmentIDNum != nil }
    /// Clears the value of `attachmentIDNum`. Subsequent reads from it will return its default value.
    public mutating func clearAttachmentIDNum() { _attachmentIDNum = nil }

    public var attachmentIDStr: String {
        get { return _attachmentIDStr ?? String() }
        set { _attachmentIDStr = newValue }
    }

    /// Returns true if `attachmentIDStr` has been explicitly set.
    public var hasAttachmentIDStr: Bool { return _attachmentIDStr != nil }
    /// Clears the value of `attachmentIDStr`. Subsequent reads from it will return its default value.
    public mutating func clearAttachmentIDStr() { _attachmentIDStr = nil }

    /// Update
    public var userIDToShareWith: Int64 {
        get { return _userIDToShareWith ?? 0 }
        set { _userIDToShareWith = newValue }
    }

    /// Returns true if `userIDToShareWith` has been explicitly set.
    public var hasUserIDToShareWith: Bool { return _userIDToShareWith != nil }
    /// Clears the value of `userIDToShareWith`. Subsequent reads from it will return its default value.
    public mutating func clearUserIDToShareWith() { _userIDToShareWith = nil }

    public var userIDToUnshareWith: Int64 {
        get { return _userIDToUnshareWith ?? 0 }
        set { _userIDToUnshareWith = newValue }
    }

    /// Returns true if `userIDToUnshareWith` has been explicitly set.
    public var hasUserIDToUnshareWith: Bool { return _userIDToUnshareWith != nil }
    /// Clears the value of `userIDToUnshareWith`. Subsequent reads from it will return its default value.
    public mutating func clearUserIDToUnshareWith() { _userIDToUnshareWith = nil }

    public var groupIDToShareWith: Int64 {
        get { return _groupIDToShareWith ?? 0 }
        set { _groupIDToShareWith = newValue }
    }

    /// Returns true if `groupIDToShareWith` has been explicitly set.
    public var hasGroupIDToShareWith: Bool { return _groupIDToShareWith != nil }
    /// Clears the value of `groupIDToShareWith`. Subsequent reads from it will return its default value.
    public mutating func clearGroupIDToShareWith() { _groupIDToShareWith = nil }

    public var groupIDToUnshareWith: Int64 {
        get { return _groupIDToUnshareWith ?? 0 }
        set { _groupIDToUnshareWith = newValue }
    }

    /// Returns true if `groupIDToUnshareWith` has been explicitly set.
    public var hasGroupIDToUnshareWith: Bool { return _groupIDToUnshareWith != nil }
    /// Clears the value of `groupIDToUnshareWith`. Subsequent reads from it will return its default value.
    public mutating func clearGroupIDToUnshareWith() { _groupIDToUnshareWith = nil }

    public var customAttributes: [Value] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _attachmentIDNum: Int64?
    fileprivate var _attachmentIDStr: String?
    fileprivate var _userIDToShareWith: Int64?
    fileprivate var _userIDToUnshareWith: Int64?
    fileprivate var _groupIDToShareWith: Int64?
    fileprivate var _groupIDToUnshareWith: Int64?
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension UpdateMessageAttachmentInfoRequest: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "im.turms.proto"

extension UpdateMessageAttachmentInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UpdateMessageAttachmentInfoRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "attachment_id_num"),
        2: .standard(proto: "attachment_id_str"),
        3: .standard(proto: "user_id_to_share_with"),
        4: .standard(proto: "user_id_to_unshare_with"),
        5: .standard(proto: "group_id_to_share_with"),
        6: .standard(proto: "group_id_to_unshare_with"),
        15: .standard(proto: "custom_attributes"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &_attachmentIDNum)
            case 2: try decoder.decodeSingularStringField(value: &_attachmentIDStr)
            case 3: try decoder.decodeSingularInt64Field(value: &_userIDToShareWith)
            case 4: try decoder.decodeSingularInt64Field(value: &_userIDToUnshareWith)
            case 5: try decoder.decodeSingularInt64Field(value: &_groupIDToShareWith)
            case 6: try decoder.decodeSingularInt64Field(value: &_groupIDToUnshareWith)
            case 15: try decoder.decodeRepeatedMessageField(value: &customAttributes)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._attachmentIDNum {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._attachmentIDStr {
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._userIDToShareWith {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
        } }()
        try { if let v = self._userIDToUnshareWith {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
        } }()
        try { if let v = self._groupIDToShareWith {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
        } }()
        try { if let v = self._groupIDToUnshareWith {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
        } }()
        if !customAttributes.isEmpty {
            try visitor.visitRepeatedMessageField(value: customAttributes, fieldNumber: 15)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: UpdateMessageAttachmentInfoRequest, rhs: UpdateMessageAttachmentInfoRequest) -> Bool {
        if lhs._attachmentIDNum != rhs._attachmentIDNum { return false }
        if lhs._attachmentIDStr != rhs._attachmentIDStr { return false }
        if lhs._userIDToShareWith != rhs._userIDToShareWith { return false }
        if lhs._userIDToUnshareWith != rhs._userIDToUnshareWith { return false }
        if lhs._groupIDToShareWith != rhs._groupIDToShareWith { return false }
        if lhs._groupIDToUnshareWith != rhs._groupIDToUnshareWith { return false }
        if lhs.customAttributes != rhs.customAttributes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
