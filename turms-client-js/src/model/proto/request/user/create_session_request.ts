// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: request/user/create_session_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DeviceType } from "../../constant/device_type";
import { UserStatus } from "../../constant/user_status";
import { Value } from "../../model/common/value";
import { UserLocation } from "../../model/user/user_location";

export const protobufPackage = "im.turms.proto";

export interface CreateSessionRequest {
  version: number;
  userId: string;
  password?: string | undefined;
  userStatus?: UserStatus | undefined;
  deviceType: DeviceType;
  deviceDetails: { [key: string]: string };
  location?: UserLocation | undefined;
  customAttributes: Value[];
}

export interface CreateSessionRequest_DeviceDetailsEntry {
  key: string;
  value: string;
}

function createBaseCreateSessionRequest(): CreateSessionRequest {
  return {
    version: 0,
    userId: "0",
    password: undefined,
    userStatus: undefined,
    deviceType: 0,
    deviceDetails: {},
    location: undefined,
    customAttributes: [],
  };
}

export const CreateSessionRequest: MessageFns<CreateSessionRequest> = {
  encode(message: CreateSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== 0) {
      writer.uint32(8).int32(message.version);
    }
    if (message.userId !== "0") {
      writer.uint32(16).int64(message.userId);
    }
    if (message.password !== undefined) {
      writer.uint32(26).string(message.password);
    }
    if (message.userStatus !== undefined) {
      writer.uint32(32).int32(message.userStatus);
    }
    if (message.deviceType !== 0) {
      writer.uint32(40).int32(message.deviceType);
    }
    Object.entries(message.deviceDetails).forEach(([key, value]) => {
      CreateSessionRequest_DeviceDetailsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.location !== undefined) {
      UserLocation.encode(message.location, writer.uint32(58).fork()).join();
    }
    for (const v of message.customAttributes) {
      Value.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userStatus = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.deviceType = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = CreateSessionRequest_DeviceDetailsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.deviceDetails[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.location = UserLocation.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.customAttributes.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateSessionRequest_DeviceDetailsEntry(): CreateSessionRequest_DeviceDetailsEntry {
  return { key: "", value: "" };
}

export const CreateSessionRequest_DeviceDetailsEntry: MessageFns<CreateSessionRequest_DeviceDetailsEntry> = {
  encode(message: CreateSessionRequest_DeviceDetailsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionRequest_DeviceDetailsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionRequest_DeviceDetailsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}