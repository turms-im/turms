// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: request/user/relationship/delete_relationship_group_member_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../../../model/common/value";

export const protobufPackage = "im.turms.proto";

export interface DeleteRelationshipGroupMemberRequest {
  userId: string;
  groupIndex: number;
  targetGroupIndex?: number | undefined;
  customAttributes: Value[];
}

function createBaseDeleteRelationshipGroupMemberRequest(): DeleteRelationshipGroupMemberRequest {
  return { userId: "0", groupIndex: 0, targetGroupIndex: undefined, customAttributes: [] };
}

export const DeleteRelationshipGroupMemberRequest: MessageFns<DeleteRelationshipGroupMemberRequest> = {
  encode(message: DeleteRelationshipGroupMemberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.groupIndex !== 0) {
      writer.uint32(16).int32(message.groupIndex);
    }
    if (message.targetGroupIndex !== undefined) {
      writer.uint32(24).int32(message.targetGroupIndex);
    }
    for (const v of message.customAttributes) {
      Value.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRelationshipGroupMemberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRelationshipGroupMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.groupIndex = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.targetGroupIndex = reader.int32();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.customAttributes.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}