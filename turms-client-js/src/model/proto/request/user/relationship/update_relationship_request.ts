// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: request/user/relationship/update_relationship_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../../../model/common/value";

export const protobufPackage = "im.turms.proto";

export interface UpdateRelationshipRequest {
  /** Query filter */
  userId: string;
  /** Update */
  blocked?: boolean | undefined;
  newGroupIndex?: number | undefined;
  deleteGroupIndex?: number | undefined;
  name?: string | undefined;
  note?: string | undefined;
  customAttributes: Value[];
}

function createBaseUpdateRelationshipRequest(): UpdateRelationshipRequest {
  return {
    userId: "0",
    blocked: undefined,
    newGroupIndex: undefined,
    deleteGroupIndex: undefined,
    name: undefined,
    note: undefined,
    customAttributes: [],
  };
}

export const UpdateRelationshipRequest: MessageFns<UpdateRelationshipRequest> = {
  encode(message: UpdateRelationshipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.blocked !== undefined) {
      writer.uint32(16).bool(message.blocked);
    }
    if (message.newGroupIndex !== undefined) {
      writer.uint32(24).int32(message.newGroupIndex);
    }
    if (message.deleteGroupIndex !== undefined) {
      writer.uint32(32).int32(message.deleteGroupIndex);
    }
    if (message.name !== undefined) {
      writer.uint32(42).string(message.name);
    }
    if (message.note !== undefined) {
      writer.uint32(50).string(message.note);
    }
    for (const v of message.customAttributes) {
      Value.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRelationshipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRelationshipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blocked = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.newGroupIndex = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.deleteGroupIndex = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.customAttributes.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}