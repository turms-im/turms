// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: request/group/create_group_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../../model/common/value";

export const protobufPackage = "im.turms.proto";

export interface CreateGroupRequest {
  name: string;
  intro?: string | undefined;
  announcement?: string | undefined;
  minScore?: number | undefined;
  typeId?: string | undefined;
  muteEndDate?: string | undefined;
  userDefinedAttributes: { [key: string]: Value };
  customAttributes: Value[];
}

export interface CreateGroupRequest_UserDefinedAttributesEntry {
  key: string;
  value?: Value | undefined;
}

function createBaseCreateGroupRequest(): CreateGroupRequest {
  return {
    name: "",
    intro: undefined,
    announcement: undefined,
    minScore: undefined,
    typeId: undefined,
    muteEndDate: undefined,
    userDefinedAttributes: {},
    customAttributes: [],
  };
}

export const CreateGroupRequest: MessageFns<CreateGroupRequest> = {
  encode(message: CreateGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.intro !== undefined) {
      writer.uint32(18).string(message.intro);
    }
    if (message.announcement !== undefined) {
      writer.uint32(26).string(message.announcement);
    }
    if (message.minScore !== undefined) {
      writer.uint32(32).int32(message.minScore);
    }
    if (message.typeId !== undefined) {
      writer.uint32(40).int64(message.typeId);
    }
    if (message.muteEndDate !== undefined) {
      writer.uint32(48).int64(message.muteEndDate);
    }
    Object.entries(message.userDefinedAttributes).forEach(([key, value]) => {
      CreateGroupRequest_UserDefinedAttributesEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    for (const v of message.customAttributes) {
      Value.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.intro = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.announcement = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minScore = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.typeId = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.muteEndDate = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = CreateGroupRequest_UserDefinedAttributesEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.userDefinedAttributes[entry7.key] = entry7.value;
          }
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.customAttributes.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateGroupRequest_UserDefinedAttributesEntry(): CreateGroupRequest_UserDefinedAttributesEntry {
  return { key: "", value: undefined };
}

export const CreateGroupRequest_UserDefinedAttributesEntry: MessageFns<CreateGroupRequest_UserDefinedAttributesEntry> =
  {
    encode(
      message: CreateGroupRequest_UserDefinedAttributesEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== undefined) {
        Value.encode(message.value, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): CreateGroupRequest_UserDefinedAttributesEntry {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCreateGroupRequest_UserDefinedAttributesEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = Value.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },
  };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}