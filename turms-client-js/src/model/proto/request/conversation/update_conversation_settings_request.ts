// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.2
// source: request/conversation/update_conversation_settings_request.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Value } from "../../model/common/value";

export const protobufPackage = "im.turms.proto";

export interface UpdateConversationSettingsRequest {
  /** Query filter */
  userId?: string | undefined;
  groupId?:
    | string
    | undefined;
  /** Update */
  settings: { [key: string]: Value };
  customAttributes: Value[];
}

export interface UpdateConversationSettingsRequest_SettingsEntry {
  key: string;
  value?: Value | undefined;
}

function createBaseUpdateConversationSettingsRequest(): UpdateConversationSettingsRequest {
  return { userId: undefined, groupId: undefined, settings: {}, customAttributes: [] };
}

export const UpdateConversationSettingsRequest = {
  encode(message: UpdateConversationSettingsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== undefined) {
      writer.uint32(8).int64(message.userId);
    }
    if (message.groupId !== undefined) {
      writer.uint32(16).int64(message.groupId);
    }
    Object.entries(message.settings).forEach(([key, value]) => {
      UpdateConversationSettingsRequest_SettingsEntry.encode({ key: key as any, value }, writer.uint32(26).fork())
        .ldelim();
    });
    for (const v of message.customAttributes) {
      Value.encode(v!, writer.uint32(122).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateConversationSettingsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversationSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = longToString(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.groupId = longToString(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = UpdateConversationSettingsRequest_SettingsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.settings[entry3.key] = entry3.value;
          }
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.customAttributes.push(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateConversationSettingsRequest_SettingsEntry(): UpdateConversationSettingsRequest_SettingsEntry {
  return { key: "", value: undefined };
}

export const UpdateConversationSettingsRequest_SettingsEntry = {
  encode(
    message: UpdateConversationSettingsRequest_SettingsEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateConversationSettingsRequest_SettingsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversationSettingsRequest_SettingsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}
