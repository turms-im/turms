// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: request/storage/query_message_attachment_infos_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../../model/common/value";

export const protobufPackage = "im.turms.proto";

export interface QueryMessageAttachmentInfosRequest {
  userIds: string[];
  groupIds: string[];
  creationDateStart?: string | undefined;
  creationDateEnd?: string | undefined;
  inPrivateConversation?: boolean | undefined;
  areSharedByMe?: boolean | undefined;
  customAttributes: Value[];
}

function createBaseQueryMessageAttachmentInfosRequest(): QueryMessageAttachmentInfosRequest {
  return {
    userIds: [],
    groupIds: [],
    creationDateStart: undefined,
    creationDateEnd: undefined,
    inPrivateConversation: undefined,
    areSharedByMe: undefined,
    customAttributes: [],
  };
}

export const QueryMessageAttachmentInfosRequest: MessageFns<QueryMessageAttachmentInfosRequest> = {
  encode(message: QueryMessageAttachmentInfosRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.userIds) {
      writer.int64(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.groupIds) {
      writer.int64(v);
    }
    writer.join();
    if (message.creationDateStart !== undefined) {
      writer.uint32(24).int64(message.creationDateStart);
    }
    if (message.creationDateEnd !== undefined) {
      writer.uint32(32).int64(message.creationDateEnd);
    }
    if (message.inPrivateConversation !== undefined) {
      writer.uint32(40).bool(message.inPrivateConversation);
    }
    if (message.areSharedByMe !== undefined) {
      writer.uint32(48).bool(message.areSharedByMe);
    }
    for (const v of message.customAttributes) {
      Value.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryMessageAttachmentInfosRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMessageAttachmentInfosRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.userIds.push(reader.int64().toString());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.userIds.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag === 16) {
            message.groupIds.push(reader.int64().toString());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.groupIds.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.creationDateStart = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.creationDateEnd = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.inPrivateConversation = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.areSharedByMe = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.customAttributes.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}