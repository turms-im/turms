// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: model/group/group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../common/value";

export const protobufPackage = "im.turms.proto";

export interface Group {
  id?: string | undefined;
  typeId?: string | undefined;
  creatorId?: string | undefined;
  ownerId?: string | undefined;
  name?: string | undefined;
  intro?: string | undefined;
  announcement?: string | undefined;
  creationDate?: string | undefined;
  lastUpdatedDate?: string | undefined;
  muteEndDate?: string | undefined;
  active?: boolean | undefined;
  userDefinedAttributes: { [key: string]: Value };
  customAttributes: Value[];
}

export interface Group_UserDefinedAttributesEntry {
  key: string;
  value?: Value | undefined;
}

function createBaseGroup(): Group {
  return {
    id: undefined,
    typeId: undefined,
    creatorId: undefined,
    ownerId: undefined,
    name: undefined,
    intro: undefined,
    announcement: undefined,
    creationDate: undefined,
    lastUpdatedDate: undefined,
    muteEndDate: undefined,
    active: undefined,
    userDefinedAttributes: {},
    customAttributes: [],
  };
}

export const Group: MessageFns<Group> = {
  encode(message: Group, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).int64(message.id);
    }
    if (message.typeId !== undefined) {
      writer.uint32(16).int64(message.typeId);
    }
    if (message.creatorId !== undefined) {
      writer.uint32(24).int64(message.creatorId);
    }
    if (message.ownerId !== undefined) {
      writer.uint32(32).int64(message.ownerId);
    }
    if (message.name !== undefined) {
      writer.uint32(42).string(message.name);
    }
    if (message.intro !== undefined) {
      writer.uint32(50).string(message.intro);
    }
    if (message.announcement !== undefined) {
      writer.uint32(58).string(message.announcement);
    }
    if (message.creationDate !== undefined) {
      writer.uint32(64).int64(message.creationDate);
    }
    if (message.lastUpdatedDate !== undefined) {
      writer.uint32(72).int64(message.lastUpdatedDate);
    }
    if (message.muteEndDate !== undefined) {
      writer.uint32(80).int64(message.muteEndDate);
    }
    if (message.active !== undefined) {
      writer.uint32(88).bool(message.active);
    }
    Object.entries(message.userDefinedAttributes).forEach(([key, value]) => {
      Group_UserDefinedAttributesEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    for (const v of message.customAttributes) {
      Value.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Group {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.typeId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.creatorId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ownerId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.intro = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.announcement = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.creationDate = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.lastUpdatedDate = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.muteEndDate = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          const entry12 = Group_UserDefinedAttributesEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.userDefinedAttributes[entry12.key] = entry12.value;
          }
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.customAttributes.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGroup_UserDefinedAttributesEntry(): Group_UserDefinedAttributesEntry {
  return { key: "", value: undefined };
}

export const Group_UserDefinedAttributesEntry: MessageFns<Group_UserDefinedAttributesEntry> = {
  encode(message: Group_UserDefinedAttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Group_UserDefinedAttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroup_UserDefinedAttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
