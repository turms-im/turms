// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: model/group/group_invitations_with_version.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GroupInvitation } from "./group_invitation";

export const protobufPackage = "im.turms.proto";

export interface GroupInvitationsWithVersion {
  groupInvitations: GroupInvitation[];
  lastUpdatedDate?: string | undefined;
}

function createBaseGroupInvitationsWithVersion(): GroupInvitationsWithVersion {
  return { groupInvitations: [], lastUpdatedDate: undefined };
}

export const GroupInvitationsWithVersion: MessageFns<GroupInvitationsWithVersion> = {
  encode(message: GroupInvitationsWithVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.groupInvitations) {
      GroupInvitation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.lastUpdatedDate !== undefined) {
      writer.uint32(16).int64(message.lastUpdatedDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupInvitationsWithVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupInvitationsWithVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groupInvitations.push(GroupInvitation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lastUpdatedDate = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
