// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: model/conference/meeting.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../common/value";

export const protobufPackage = "im.turms.proto";

export interface Meeting {
  id: string;
  userId?: string | undefined;
  groupId?: string | undefined;
  creatorId: string;
  accessToken?: string | undefined;
  name?: string | undefined;
  intro?: string | undefined;
  password?: string | undefined;
  startDate: string;
  endDate?: string | undefined;
  cancelDate?: string | undefined;
  customAttributes: Value[];
}

function createBaseMeeting(): Meeting {
  return {
    id: "0",
    userId: undefined,
    groupId: undefined,
    creatorId: "0",
    accessToken: undefined,
    name: undefined,
    intro: undefined,
    password: undefined,
    startDate: "0",
    endDate: undefined,
    cancelDate: undefined,
    customAttributes: [],
  };
}

export const Meeting: MessageFns<Meeting> = {
  encode(message: Meeting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.userId !== undefined) {
      writer.uint32(16).int64(message.userId);
    }
    if (message.groupId !== undefined) {
      writer.uint32(24).int64(message.groupId);
    }
    if (message.creatorId !== "0") {
      writer.uint32(32).int64(message.creatorId);
    }
    if (message.accessToken !== undefined) {
      writer.uint32(42).string(message.accessToken);
    }
    if (message.name !== undefined) {
      writer.uint32(50).string(message.name);
    }
    if (message.intro !== undefined) {
      writer.uint32(58).string(message.intro);
    }
    if (message.password !== undefined) {
      writer.uint32(66).string(message.password);
    }
    if (message.startDate !== "0") {
      writer.uint32(72).int64(message.startDate);
    }
    if (message.endDate !== undefined) {
      writer.uint32(80).int64(message.endDate);
    }
    if (message.cancelDate !== undefined) {
      writer.uint32(88).int64(message.cancelDate);
    }
    for (const v of message.customAttributes) {
      Value.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Meeting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeeting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.groupId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.creatorId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.intro = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.startDate = reader.int64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.endDate = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.cancelDate = reader.int64().toString();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.customAttributes.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
