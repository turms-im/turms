// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: model/user/nearby_user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DeviceType } from "../../constant/device_type";
import { Value } from "../common/value";
import { UserInfo } from "./user_info";
import { UserLocation } from "./user_location";

export const protobufPackage = "im.turms.proto";

export interface NearbyUser {
  /** session info */
  userId: string;
  deviceType?:
    | DeviceType
    | undefined;
  /** user info */
  info?:
    | UserInfo
    | undefined;
  /** geo info */
  distance?: number | undefined;
  location?: UserLocation | undefined;
  customAttributes: Value[];
}

function createBaseNearbyUser(): NearbyUser {
  return {
    userId: "0",
    deviceType: undefined,
    info: undefined,
    distance: undefined,
    location: undefined,
    customAttributes: [],
  };
}

export const NearbyUser: MessageFns<NearbyUser> = {
  encode(message: NearbyUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    if (message.deviceType !== undefined) {
      writer.uint32(16).int32(message.deviceType);
    }
    if (message.info !== undefined) {
      UserInfo.encode(message.info, writer.uint32(26).fork()).join();
    }
    if (message.distance !== undefined) {
      writer.uint32(32).int32(message.distance);
    }
    if (message.location !== undefined) {
      UserLocation.encode(message.location, writer.uint32(42).fork()).join();
    }
    for (const v of message.customAttributes) {
      Value.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NearbyUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNearbyUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deviceType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.info = UserInfo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.distance = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.location = UserLocation.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.customAttributes.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
