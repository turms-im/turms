// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.1
// source: model/message/messages_with_total.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Message } from "./message";

export const protobufPackage = "im.turms.proto";

export interface MessagesWithTotal {
  total: number;
  isGroupMessage: boolean;
  fromId: string;
  messages: Message[];
}

function createBaseMessagesWithTotal(): MessagesWithTotal {
  return { total: 0, isGroupMessage: false, fromId: "0", messages: [] };
}

export const MessagesWithTotal: MessageFns<MessagesWithTotal> = {
  encode(message: MessagesWithTotal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.total !== 0) {
      writer.uint32(8).int32(message.total);
    }
    if (message.isGroupMessage !== false) {
      writer.uint32(16).bool(message.isGroupMessage);
    }
    if (message.fromId !== "0") {
      writer.uint32(24).int64(message.fromId);
    }
    for (const v of message.messages) {
      Message.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessagesWithTotal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessagesWithTotal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isGroupMessage = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fromId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.messages.push(Message.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
