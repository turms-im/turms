{
  "aiServing": {
    "adminApi": {
      "address": {
        "advertiseHost": {
          "deprecated": false,
          "description": "The advertise address of the local node exposed to admins. (e.g. 100.131.251.96)",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "string"
        },
        "advertiseStrategy": {
          "deprecated": false,
          "description": "The advertise strategy is used to decide which type of address should be used so that admins can access admin APIs and metrics APIs",
          "global": false,
          "mutable": true,
          "options": [
            "ADVERTISE_ADDRESS",
            "BIND_ADDRESS",
            "PRIVATE_ADDRESS",
            "PUBLIC_ADDRESS"
          ],
          "sensitive": false,
          "type": "enum"
        },
        "attachPortToHost": {
          "deprecated": false,
          "description": "Whether to attach the local port to the host.\ne.g. The local host is 100.131.251.96, and the port is 9510 so the service address will be 100.131.251.96:9510",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "debug": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to enable debug APIs",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "enabled": {
        "deprecated": false,
        "description": "Whether to enable the APIs for administrators",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "http": {
        "connectTimeoutMillis": {
          "deprecated": false,
          "description": "The connect timeout",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "host": {
          "deprecated": false,
          "description": "The bind host",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "idleTimeoutMillis": {
          "deprecated": false,
          "description": "The idle timeout on the connection when it is waiting for an HTTP request to come. Once the timeout is reached, the connection will be closed",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "maxRequestBodySizeBytes": {
          "deprecated": false,
          "description": "The max request body size in bytes",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "port": {
          "deprecated": false,
          "description": "The bind port",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "requestReadTimeoutMillis": {
          "deprecated": false,
          "description": "The read timeout on the connection when it is waiting for an HTTP request to be fully read. Once the timeout is reached, the connection will be closed",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "log": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to log API calls",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "logRequestParams": {
          "deprecated": false,
          "description": "Whether to log the parameters of requests",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "rateLimiting": {
        "capacity": {
          "deprecated": false,
          "description": "The maximum number of tokens that the bucket can hold",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "initialTokens": {
          "deprecated": false,
          "description": "The initial number of tokens for new session",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "refillIntervalMillis": {
          "deprecated": false,
          "description": "The time interval to refill. 0 means never refill",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "tokensPerPeriod": {
          "deprecated": false,
          "description": "Refills the bucket with the specified number of tokens per period if the bucket is not full",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        }
      },
      "useAuthentication": {
        "deprecated": false,
        "description": "Whether to use authentication. If false, all HTTP requesters will personate the root user and all HTTP requests will be passed. You may set it to false when you want to manage authentication via security groups, NACL, etc",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      }
    },
    "mongo": {
      "admin": {}
    },
    "ocr": {
      "orientationPossibilityThreshold": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "float"
      },
      "preferredFonts": {
        "deprecated": false,
        "elementType": "im.turms.server.common.infra.property.env.aiserving.FontProperties",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "java.util.List"
      }
    }
  },
  "cluster": {
    "connection": {
      "client": {
        "keepaliveIntervalSeconds": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "keepaliveTimeoutSeconds": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "reconnectIntervalSeconds": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "server": {
        "host": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "port": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "portAutoIncrement": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        },
        "portCount": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      }
    },
    "discovery": {
      "address": {
        "advertiseHost": {
          "deprecated": false,
          "description": "The advertise address of the local node exposed to admins. (e.g. 100.131.251.96)",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "string"
        },
        "advertiseStrategy": {
          "deprecated": false,
          "description": "The advertise strategy is used to decide which type of address should be used so that admins can access admin APIs and metrics APIs",
          "global": false,
          "mutable": true,
          "options": [
            "ADVERTISE_ADDRESS",
            "BIND_ADDRESS",
            "PRIVATE_ADDRESS",
            "PUBLIC_ADDRESS"
          ],
          "sensitive": false,
          "type": "enum"
        },
        "attachPortToHost": {
          "deprecated": false,
          "description": "Whether to attach the local port to the host.\ne.g. The local host is 100.131.251.96, and the port is 9510 so the service address will be 100.131.251.96:9510",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "delayToNotifyMembersChangeSeconds": {
        "deprecated": false,
        "description": "Delay notifying listeners on members change. Waits for seconds to avoid thundering herd",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "heartbeatIntervalSeconds": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "heartbeatTimeoutSeconds": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      }
    },
    "id": {
      "deprecated": false,
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "string"
    },
    "node": {
      "activeByDefault": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "id": {
        "deprecated": false,
        "description": "The node ID must start with a letter or underscore, and matches zero or more of characters [a-zA-Z0-9_] after the beginning. e.g. \"turms001\", \"turms_002\". A node must have a unique ID. If not specified, Turms server will generate a random unique ID",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "string"
      },
      "leaderEligible": {
        "deprecated": false,
        "description": "Only works when it is a turms-service node",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "name": {
        "deprecated": false,
        "description": "The node name must start with a letter or underscore, and matches zero or more of characters [a-zA-Z0-9_] after the beginning. e.g. \"turms001\", \"turms_002\". The node name can be duplicate in the cluster. If not specified, Turms server will use the node ID as the node name",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "string"
      },
      "priority": {
        "deprecated": false,
        "description": "The priority to be a leader",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "zone": {
        "deprecated": false,
        "description": "e.g. \"us-east-1\" and \"ap-east-1\"",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "string"
      }
    },
    "rpc": {
      "requestTimeoutMillis": {
        "deprecated": false,
        "description": "The timeout for RPC requests in milliseconds",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      }
    },
    "sharedConfig": {}
  },
  "flightRecorder": {
    "closedRecordingRetentionPeriod": {
      "deprecated": false,
      "description": "A closed recording will be retained for the given period and will be removed from the file system after the retention period. 0 means no retention. -1 means unlimited retention.",
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "int"
    }
  },
  "gateway": {
    "adminApi": {
      "address": {
        "advertiseHost": {
          "deprecated": false,
          "description": "The advertise address of the local node exposed to admins. (e.g. 100.131.251.96)",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "string"
        },
        "advertiseStrategy": {
          "deprecated": false,
          "description": "The advertise strategy is used to decide which type of address should be used so that admins can access admin APIs and metrics APIs",
          "global": false,
          "mutable": true,
          "options": [
            "ADVERTISE_ADDRESS",
            "BIND_ADDRESS",
            "PRIVATE_ADDRESS",
            "PUBLIC_ADDRESS"
          ],
          "sensitive": false,
          "type": "enum"
        },
        "attachPortToHost": {
          "deprecated": false,
          "description": "Whether to attach the local port to the host.\ne.g. The local host is 100.131.251.96, and the port is 9510 so the service address will be 100.131.251.96:9510",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "debug": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to enable debug APIs",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "enabled": {
        "deprecated": false,
        "description": "Whether to enable the APIs for administrators",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "http": {
        "connectTimeoutMillis": {
          "deprecated": false,
          "description": "The connect timeout",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "host": {
          "deprecated": false,
          "description": "The bind host",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "idleTimeoutMillis": {
          "deprecated": false,
          "description": "The idle timeout on the connection when it is waiting for an HTTP request to come. Once the timeout is reached, the connection will be closed",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "maxRequestBodySizeBytes": {
          "deprecated": false,
          "description": "The max request body size in bytes",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "port": {
          "deprecated": false,
          "description": "The bind port",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "requestReadTimeoutMillis": {
          "deprecated": false,
          "description": "The read timeout on the connection when it is waiting for an HTTP request to be fully read. Once the timeout is reached, the connection will be closed",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "log": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to log API calls",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "logRequestParams": {
          "deprecated": false,
          "description": "Whether to log the parameters of requests",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "rateLimiting": {
        "capacity": {
          "deprecated": false,
          "description": "The maximum number of tokens that the bucket can hold",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "initialTokens": {
          "deprecated": false,
          "description": "The initial number of tokens for new session",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "refillIntervalMillis": {
          "deprecated": false,
          "description": "The time interval to refill. 0 means never refill",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "tokensPerPeriod": {
          "deprecated": false,
          "description": "Refills the bucket with the specified number of tokens per period if the bucket is not full",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        }
      },
      "useAuthentication": {
        "deprecated": false,
        "description": "Whether to use authentication. If false, all HTTP requesters will personate the root user and all HTTP requests will be passed. You may set it to false when you want to manage authentication via security groups, NACL, etc",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      }
    },
    "clientApi": {
      "logging": {
        "excludedNotificationCategories": {
          "deprecated": false,
          "description": "Turms will get the notifications to log from the union of \"includedNotificationCategories\" and \"includedNotifications\" except the notifications included in \"excludedNotificationCategories\" and \"excludedNotificationTypes\"",
          "elementType": "enum",
          "global": false,
          "mutable": false,
          "options": [
            "ALL",
            "NONE",
            "CREATE",
            "DELETE",
            "UPDATE",
            "QUERY",
            "STORAGE",
            "CONVERSATION",
            "MESSAGE",
            "USER",
            "USER_RELATIONSHIP",
            "GROUP",
            "GROUP_BLOCKLIST",
            "GROUP_ENROLLMENT",
            "GROUP_MEMBER"
          ],
          "sensitive": false,
          "type": "java.util.Set"
        },
        "excludedNotificationTypes": {
          "deprecated": false,
          "description": "Turms will get the notifications to log from the union of \"includedNotificationCategories\" and \"includedNotifications\" except the notifications included in \"excludedNotificationCategories\" and \"excludedNotificationTypes\"",
          "elementType": "enum",
          "global": false,
          "mutable": false,
          "options": [
            "CREATE_SESSION_REQUEST",
            "DELETE_SESSION_REQUEST",
            "QUERY_CONVERSATIONS_REQUEST",
            "UPDATE_CONVERSATION_REQUEST",
            "UPDATE_TYPING_STATUS_REQUEST",
            "CREATE_MESSAGE_REQUEST",
            "QUERY_MESSAGES_REQUEST",
            "UPDATE_MESSAGE_REQUEST",
            "CREATE_GROUP_MEMBERS_REQUEST",
            "DELETE_GROUP_MEMBERS_REQUEST",
            "QUERY_GROUP_MEMBERS_REQUEST",
            "UPDATE_GROUP_MEMBER_REQUEST",
            "QUERY_USER_PROFILES_REQUEST",
            "QUERY_NEARBY_USERS_REQUEST",
            "QUERY_USER_ONLINE_STATUSES_REQUEST",
            "UPDATE_USER_LOCATION_REQUEST",
            "UPDATE_USER_ONLINE_STATUS_REQUEST",
            "UPDATE_USER_REQUEST",
            "UPDATE_USER_SETTINGS_REQUEST",
            "DELETE_USER_SETTINGS_REQUEST",
            "QUERY_USER_SETTINGS_REQUEST",
            "CREATE_FRIEND_REQUEST_REQUEST",
            "CREATE_RELATIONSHIP_GROUP_REQUEST",
            "CREATE_RELATIONSHIP_REQUEST",
            "DELETE_FRIEND_REQUEST_REQUEST",
            "DELETE_RELATIONSHIP_GROUP_REQUEST",
            "DELETE_RELATIONSHIP_REQUEST",
            "QUERY_FRIEND_REQUESTS_REQUEST",
            "QUERY_RELATED_USER_IDS_REQUEST",
            "QUERY_RELATIONSHIP_GROUPS_REQUEST",
            "QUERY_RELATIONSHIPS_REQUEST",
            "UPDATE_FRIEND_REQUEST_REQUEST",
            "UPDATE_RELATIONSHIP_GROUP_REQUEST",
            "UPDATE_RELATIONSHIP_REQUEST",
            "CREATE_GROUP_REQUEST",
            "DELETE_GROUP_REQUEST",
            "QUERY_GROUPS_REQUEST",
            "QUERY_JOINED_GROUP_IDS_REQUEST",
            "QUERY_JOINED_GROUP_INFOS_REQUEST",
            "UPDATE_GROUP_REQUEST",
            "CREATE_GROUP_BLOCKED_USER_REQUEST",
            "DELETE_GROUP_BLOCKED_USER_REQUEST",
            "QUERY_GROUP_BLOCKED_USER_IDS_REQUEST",
            "QUERY_GROUP_BLOCKED_USER_INFOS_REQUEST",
            "CHECK_GROUP_JOIN_QUESTIONS_ANSWERS_REQUEST",
            "CREATE_GROUP_INVITATION_REQUEST",
            "CREATE_GROUP_JOIN_REQUEST_REQUEST",
            "CREATE_GROUP_JOIN_QUESTIONS_REQUEST",
            "DELETE_GROUP_INVITATION_REQUEST",
            "DELETE_GROUP_JOIN_REQUEST_REQUEST",
            "DELETE_GROUP_JOIN_QUESTIONS_REQUEST",
            "QUERY_GROUP_INVITATIONS_REQUEST",
            "QUERY_GROUP_JOIN_REQUESTS_REQUEST",
            "QUERY_GROUP_JOIN_QUESTIONS_REQUEST",
            "UPDATE_GROUP_INVITATION_REQUEST",
            "UPDATE_GROUP_JOIN_QUESTION_REQUEST",
            "UPDATE_GROUP_JOIN_REQUEST_REQUEST",
            "CREATE_MEETING_REQUEST",
            "DELETE_MEETING_REQUEST",
            "QUERY_MEETINGS_REQUEST",
            "UPDATE_MEETING_REQUEST",
            "UPDATE_MEETING_INVITATION_REQUEST",
            "DELETE_RESOURCE_REQUEST",
            "QUERY_RESOURCE_DOWNLOAD_INFO_REQUEST",
            "QUERY_RESOURCE_UPLOAD_INFO_REQUEST",
            "QUERY_MESSAGE_ATTACHMENT_INFOS_REQUEST",
            "UPDATE_MESSAGE_ATTACHMENT_INFO_REQUEST",
            "DELETE_CONVERSATION_SETTINGS_REQUEST",
            "QUERY_CONVERSATION_SETTINGS_REQUEST",
            "UPDATE_CONVERSATION_SETTINGS_REQUEST",
            "CREATE_MESSAGE_REACTIONS_REQUEST",
            "DELETE_MESSAGE_REACTIONS_REQUEST",
            "KIND_NOT_SET"
          ],
          "sensitive": false,
          "type": "java.util.Set"
        },
        "excludedRequestCategories": {
          "deprecated": false,
          "description": "Turms will get the requests to log from the union of \"includedRequestCategories\" and \"includedRequests\" except the requests included in \"excludedRequestCategories\" and \"excludedRequestTypes\"",
          "elementType": "enum",
          "global": false,
          "mutable": false,
          "options": [
            "ALL",
            "NONE",
            "CREATE",
            "DELETE",
            "UPDATE",
            "QUERY",
            "STORAGE",
            "CONVERSATION",
            "MESSAGE",
            "USER",
            "USER_RELATIONSHIP",
            "GROUP",
            "GROUP_BLOCKLIST",
            "GROUP_ENROLLMENT",
            "GROUP_MEMBER"
          ],
          "sensitive": false,
          "type": "java.util.Set"
        },
        "excludedRequestTypes": {
          "deprecated": false,
          "description": "Turms will get the requests to log from the union of \"includedRequestCategories\" and \"includedRequests\" except the requests included in \"excludedRequestCategories\" and \"excludedRequestTypes\"",
          "elementType": "enum",
          "global": false,
          "mutable": false,
          "options": [
            "CREATE_SESSION_REQUEST",
            "DELETE_SESSION_REQUEST",
            "QUERY_CONVERSATIONS_REQUEST",
            "UPDATE_CONVERSATION_REQUEST",
            "UPDATE_TYPING_STATUS_REQUEST",
            "CREATE_MESSAGE_REQUEST",
            "QUERY_MESSAGES_REQUEST",
            "UPDATE_MESSAGE_REQUEST",
            "CREATE_GROUP_MEMBERS_REQUEST",
            "DELETE_GROUP_MEMBERS_REQUEST",
            "QUERY_GROUP_MEMBERS_REQUEST",
            "UPDATE_GROUP_MEMBER_REQUEST",
            "QUERY_USER_PROFILES_REQUEST",
            "QUERY_NEARBY_USERS_REQUEST",
            "QUERY_USER_ONLINE_STATUSES_REQUEST",
            "UPDATE_USER_LOCATION_REQUEST",
            "UPDATE_USER_ONLINE_STATUS_REQUEST",
            "UPDATE_USER_REQUEST",
            "UPDATE_USER_SETTINGS_REQUEST",
            "DELETE_USER_SETTINGS_REQUEST",
            "QUERY_USER_SETTINGS_REQUEST",
            "CREATE_FRIEND_REQUEST_REQUEST",
            "CREATE_RELATIONSHIP_GROUP_REQUEST",
            "CREATE_RELATIONSHIP_REQUEST",
            "DELETE_FRIEND_REQUEST_REQUEST",
            "DELETE_RELATIONSHIP_GROUP_REQUEST",
            "DELETE_RELATIONSHIP_REQUEST",
            "QUERY_FRIEND_REQUESTS_REQUEST",
            "QUERY_RELATED_USER_IDS_REQUEST",
            "QUERY_RELATIONSHIP_GROUPS_REQUEST",
            "QUERY_RELATIONSHIPS_REQUEST",
            "UPDATE_FRIEND_REQUEST_REQUEST",
            "UPDATE_RELATIONSHIP_GROUP_REQUEST",
            "UPDATE_RELATIONSHIP_REQUEST",
            "CREATE_GROUP_REQUEST",
            "DELETE_GROUP_REQUEST",
            "QUERY_GROUPS_REQUEST",
            "QUERY_JOINED_GROUP_IDS_REQUEST",
            "QUERY_JOINED_GROUP_INFOS_REQUEST",
            "UPDATE_GROUP_REQUEST",
            "CREATE_GROUP_BLOCKED_USER_REQUEST",
            "DELETE_GROUP_BLOCKED_USER_REQUEST",
            "QUERY_GROUP_BLOCKED_USER_IDS_REQUEST",
            "QUERY_GROUP_BLOCKED_USER_INFOS_REQUEST",
            "CHECK_GROUP_JOIN_QUESTIONS_ANSWERS_REQUEST",
            "CREATE_GROUP_INVITATION_REQUEST",
            "CREATE_GROUP_JOIN_REQUEST_REQUEST",
            "CREATE_GROUP_JOIN_QUESTIONS_REQUEST",
            "DELETE_GROUP_INVITATION_REQUEST",
            "DELETE_GROUP_JOIN_REQUEST_REQUEST",
            "DELETE_GROUP_JOIN_QUESTIONS_REQUEST",
            "QUERY_GROUP_INVITATIONS_REQUEST",
            "QUERY_GROUP_JOIN_REQUESTS_REQUEST",
            "QUERY_GROUP_JOIN_QUESTIONS_REQUEST",
            "UPDATE_GROUP_INVITATION_REQUEST",
            "UPDATE_GROUP_JOIN_QUESTION_REQUEST",
            "UPDATE_GROUP_JOIN_REQUEST_REQUEST",
            "CREATE_MEETING_REQUEST",
            "DELETE_MEETING_REQUEST",
            "QUERY_MEETINGS_REQUEST",
            "UPDATE_MEETING_REQUEST",
            "UPDATE_MEETING_INVITATION_REQUEST",
            "DELETE_RESOURCE_REQUEST",
            "QUERY_RESOURCE_DOWNLOAD_INFO_REQUEST",
            "QUERY_RESOURCE_UPLOAD_INFO_REQUEST",
            "QUERY_MESSAGE_ATTACHMENT_INFOS_REQUEST",
            "UPDATE_MESSAGE_ATTACHMENT_INFO_REQUEST",
            "DELETE_CONVERSATION_SETTINGS_REQUEST",
            "QUERY_CONVERSATION_SETTINGS_REQUEST",
            "UPDATE_CONVERSATION_SETTINGS_REQUEST",
            "CREATE_MESSAGE_REACTIONS_REQUEST",
            "DELETE_MESSAGE_REACTIONS_REQUEST",
            "KIND_NOT_SET"
          ],
          "sensitive": false,
          "type": "java.util.Set"
        },
        "heartbeatSampleRate": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "float"
        },
        "includedNotificationCategories": {
          "deprecated": false,
          "description": "Turms will get the notifications to log from the union of \"includedNotificationCategories\" and \"includedNotifications\" except the notifications included in \"excludedNotificationCategories\" and \"excludedNotificationTypes\"",
          "elementType": "im.turms.server.common.infra.property.env.service.env.clientapi.property.LoggingCategoryProperties",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.LinkedHashSet"
        },
        "includedNotifications": {
          "deprecated": false,
          "description": "Turms will get the notifications to log from the union of \"includedNotificationCategories\" and \"includedNotifications\" except the notifications included in \"excludedNotificationCategories\" and \"excludedNotificationTypes\"",
          "elementType": "im.turms.server.common.infra.property.env.service.env.clientapi.property.LoggingRequestProperties",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.LinkedHashSet"
        },
        "includedRequestCategories": {
          "deprecated": false,
          "description": "Turms will get the requests to log from the union of \"includedRequestCategories\" and \"includedRequests\" except the requests included in \"excludedRequestCategories\" and \"excludedRequestTypes\"",
          "elementType": "im.turms.server.common.infra.property.env.service.env.clientapi.property.LoggingCategoryProperties",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.LinkedHashSet"
        },
        "includedRequests": {
          "deprecated": false,
          "description": "Turms will get the requests to log from the union of \"includedRequestCategories\" and \"includedRequests\" except the requests included in \"excludedRequestCategories\" and \"excludedRequestTypes\"",
          "elementType": "im.turms.server.common.infra.property.env.service.env.clientapi.property.LoggingRequestProperties",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.LinkedHashSet"
        }
      },
      "maxRequestSizeBytes": {
        "deprecated": false,
        "description": "The client session will be closed and may be blocked if it tries to send a request larger than the size. Note: The average size of turms requests is 16~64 bytes",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "rateLimiting": {
        "capacity": {
          "deprecated": false,
          "description": "The maximum number of tokens that the bucket can hold",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "initialTokens": {
          "deprecated": false,
          "description": "The initial number of tokens for new session",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "refillIntervalMillis": {
          "deprecated": false,
          "description": "The time interval to refill. 0 means never refill",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "tokensPerPeriod": {
          "deprecated": false,
          "description": "Refills the bucket with the specified number of tokens per period if the bucket is not full",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        }
      },
      "returnReasonForServerError": {
        "deprecated": false,
        "description": "Whether to return the reason for the server error to the client. Note: 1. It may reveal sensitive data like the IP of internal servers if true; 2. turms-gateway never return the information of stack traces no matter it is true or false.",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      }
    },
    "fake": {
      "enabled": {
        "deprecated": false,
        "description": "Whether to fake clients. Note that faking only works in non-production environments",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "firstUserId": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "long"
      },
      "requestCountPerInterval": {
        "deprecated": false,
        "description": "The number of requests to send per interval. If requestIntervalMillis is 1000, requestCountPerInterval is TPS in fact",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "requestIntervalMillis": {
        "deprecated": false,
        "description": "The interval to send request",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "userCount": {
        "deprecated": false,
        "description": "Run the number of real clients as faked users with an ID from [firstUserId, firstUserId + userCount) to connect to turms-gateway. So please ensure you have set \"turms.service.fake.userCount\" to a number larger than or equal to (firstUserId + userCount)",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      }
    },
    "mongo": {
      "admin": {},
      "user": {}
    },
    "notificationLogging": {
      "enabled": {
        "deprecated": false,
        "description": "Whether to parse the buffer of TurmsNotification to log. Note that the property has an impact on performance",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      }
    },
    "redis": {},
    "serviceDiscovery": {
      "advertiseHost": {
        "deprecated": false,
        "description": "The advertise address of the local node exposed to the public. The property can be used to advertise the DDoS Protected IP address to hide the origin IP address (e.g. 100.131.251.96)",
        "global": false,
        "mutable": true,
        "sensitive": false,
        "type": "string"
      },
      "advertiseStrategy": {
        "deprecated": false,
        "description": "The advertise strategy is used to help clients or load balancing servers to access the local node. Note: For security, do NOT use \"PUBLIC_ADDRESS\" in production to prevent from exposing the origin IP address for DDoS attack.",
        "global": false,
        "mutable": true,
        "options": [
          "ADVERTISE_ADDRESS",
          "BIND_ADDRESS",
          "PRIVATE_ADDRESS",
          "PUBLIC_ADDRESS"
        ],
        "sensitive": false,
        "type": "enum"
      },
      "attachPortToHost": {
        "deprecated": false,
        "description": "Whether to attach the local port to the host. For example, if the local host is 100.131.251.96, and the port is 10510, so the service address will be 100.131.251.96:10510",
        "global": false,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "identity": {
        "deprecated": false,
        "description": "The identity of the local node will be sent to clients as a notification if identity is not blank and \"turms.gateway.session.notifyClientsOfSessionInfoAfterConnected\" is true (e.g. \"turms-east-0001\")",
        "global": false,
        "mutable": true,
        "sensitive": false,
        "type": "string"
      }
    },
    "session": {
      "clientHeartbeatIntervalSeconds": {
        "deprecated": false,
        "description": "The client heartbeat interval. Note that the value will NOT change the actual heartbeat behavior of clients, and the value is only used to facilitate related operations of turms-gateway",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "closeIdleSessionAfterSeconds": {
        "deprecated": false,
        "description": "A session will be closed if turms server does not receive any request (including heartbeat request) from the client during closeIdleSessionAfterSeconds. References: https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207243549&idx=1&sn=4ebe4beb8123f1b5ab58810ac8bc5994&scene=0#rd",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "deviceDetails": {
        "expireAfterSeconds": {
          "deprecated": false,
          "description": "Device details information will expire after the specified time has elapsed. 0 means never expire",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "items": {
          "deprecated": false,
          "elementType": "im.turms.server.common.infra.property.env.gateway.session.DeviceDetailsItemProperties",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "java.util.List"
        }
      },
      "identityAccessManagement": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to authenticate and authorize users when logging in. Note that user ID is always required even if enabled is false. If false at startup, turms-gateway will not connect to the MongoDB server for user records",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "http": {
          "authentication": {
            "responseExpectation": {
              "bodyFields": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "java.util.Map"
              },
              "headers": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "java.util.Map"
              },
              "statusCodes": {
                "deprecated": false,
                "elementType": "string",
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "java.util.Set"
              }
            }
          },
          "request": {
            "headers": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.Map"
            },
            "httpMethod": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "options": [
                "POST",
                "GET",
                "PUT",
                "PATCH",
                "DELETE",
                "HEAD"
              ],
              "sensitive": false,
              "type": "enum"
            },
            "timeoutMillis": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "int"
            },
            "url": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            }
          }
        },
        "jwt": {
          "algorithm": {
            "ecdsa256": {
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              },
              "pemFilePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              }
            },
            "ecdsa384": {
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              },
              "pemFilePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              }
            },
            "ecdsa512": {
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              },
              "pemFilePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              }
            },
            "hmac256": {
              "filePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              },
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              }
            },
            "hmac384": {
              "filePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              },
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              }
            },
            "hmac512": {
              "filePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              },
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              }
            },
            "ps256": {
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              },
              "pemFilePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              }
            },
            "ps384": {
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              },
              "pemFilePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              }
            },
            "ps512": {
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              },
              "pemFilePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              }
            },
            "rsa256": {
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              },
              "pemFilePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              }
            },
            "rsa384": {
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              },
              "pemFilePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              }
            },
            "rsa512": {
              "p12": {
                "filePath": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "keyAlias": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                },
                "password": {
                  "deprecated": false,
                  "global": false,
                  "mutable": false,
                  "sensitive": false,
                  "type": "string"
                }
              },
              "pemFilePath": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "string"
              }
            }
          },
          "authentication": {
            "expectation": {
              "customPayloadClaims": {
                "deprecated": false,
                "global": false,
                "mutable": false,
                "sensitive": false,
                "type": "java.util.Map"
              }
            }
          },
          "verification": {
            "audience": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            },
            "customPayloadClaims": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.Map"
            },
            "issuer": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            }
          }
        },
        "ldap": {
          "admin": {
            "host": {
              "deprecated": false,
              "description": "The host of LDAP server for admin",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            },
            "password": {
              "deprecated": false,
              "description": "The administrator's password for binding",
              "global": false,
              "mutable": false,
              "sensitive": true,
              "type": "string"
            },
            "port": {
              "deprecated": false,
              "description": "The port of LDAP server for admin",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "int"
            },
            "username": {
              "deprecated": false,
              "description": "The administrator's username for binding",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            }
          },
          "baseDn": {
            "deprecated": false,
            "description": "The base DN from which all operations originate",
            "global": false,
            "mutable": false,
            "sensitive": false,
            "type": "string"
          },
          "user": {
            "host": {
              "deprecated": false,
              "description": "The host of LDAP server for user",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            },
            "port": {
              "deprecated": false,
              "description": "The port of LDAP server for user",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "int"
            },
            "searchFilter": {
              "deprecated": false,
              "description": "The search filter to find the user entry. \"${userId}\" is a placeholder and will be replaced with the user ID passed in the login request",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            }
          }
        },
        "type": {
          "deprecated": false,
          "description": "Note that if the type is not PASSWORD, turms-gateway will not connect to the MongoDB server for user records",
          "global": false,
          "mutable": false,
          "options": [
            "NOOP",
            "HTTP",
            "JWT",
            "PASSWORD",
            "LDAP"
          ],
          "sensitive": false,
          "type": "enum"
        }
      },
      "minHeartbeatIntervalSeconds": {
        "deprecated": false,
        "description": "The minimum interval to refresh the heartbeat status by client requests to avoid refreshing the heartbeat status frequently",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "notifyClientsOfSessionInfoAfterConnected": {
        "deprecated": false,
        "description": "Whether to notify clients of the session information after connected with the server",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "switchProtocolAfterSeconds": {
        "deprecated": false,
        "description": "If the turms server only receives heartbeat requests from the client during switchProtocolAfterSeconds, the TCP/WebSocket connection will be closed with the close status \"SWITCH\" to indicate the client should keep sending heartbeat requests over UDP if they want to keep online. Note: 1. The property only works if UDP is enabled; 2. For browser clients, UDP is not supported",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      }
    },
    "simultaneousLogin": {
      "allowDeviceTypeOthersLogin": {
        "deprecated": false,
        "description": "Whether to allow the devices of DeviceType.OTHERS to login",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "allowDeviceTypeUnknownLogin": {
        "deprecated": false,
        "description": "Whether to allow the devices of DeviceType.UNKNOWN to login",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "loginConflictStrategy": {
        "deprecated": false,
        "description": "The login conflict strategy is used for servers to know how to behave if a device is logging in when there are conflicted and logged-in devices",
        "global": true,
        "mutable": true,
        "options": [
          "DISCONNECT_LOGGED_IN_DEVICES",
          "DISCONNECT_LOGGING_IN_DEVICE"
        ],
        "sensitive": false,
        "type": "enum"
      },
      "strategy": {
        "deprecated": false,
        "description": "The simultaneous login strategy is used to control which devices can be online at the same time",
        "global": true,
        "mutable": true,
        "options": [
          "ALLOW_ONE_DEVICE_OF_EACH_DEVICE_TYPE_ONLINE",
          "ALLOW_ONE_DEVICE_FOR_ALL_DEVICE_TYPES_ONLINE",
          "ALLOW_ONE_DEVICE_OF_DESKTOP_AND_ONE_DEVICE_OF_MOBILE_ONLINE",
          "ALLOW_ONE_DEVICE_OF_DESKTOP_OR_BROWSER_AND_ONE_DEVICE_OF_MOBILE_ONLINE",
          "ALLOW_ONE_DEVICE_OF_DESKTOP_AND_ONE_DEVICE_OF_BROWSER_AND_ONE_DEVICE_OF_MOBILE_ONLINE",
          "ALLOW_ONE_DEVICE_OF_DESKTOP_OR_MOBILE_ONLINE",
          "ALLOW_ONE_DEVICE_OF_DESKTOP_OR_BROWSER_OR_MOBILE_ONLINE"
        ],
        "sensitive": false,
        "type": "enum"
      }
    },
    "tcp": {
      "backlog": {
        "deprecated": false,
        "description": "The maximum number of connection requests waiting in the backlog queue. Large enough to handle bursts and GC pauses but do not set too large to prevent SYN-Flood attacks",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "connectTimeoutMillis": {
        "deprecated": false,
        "description": "Used to mitigate the Slowloris DoS attack by lowering the timeout for the TCP connection handshake",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "enabled": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "host": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "string"
      },
      "port": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "remoteAddressSource": {
        "proxyProtocolMode": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "options": [
            "REQUIRED",
            "OPTIONAL",
            "DISABLED"
          ],
          "sensitive": false,
          "type": "enum"
        }
      },
      "session": {
        "closeTimeoutMillis": {
          "deprecated": false,
          "description": "turms-gateway will send a TCP RST packet to the connection if the client has not closed the TCP connection within the specified time after turms-gateway has sent and flushed the session close notification. 0 means sending a TCP RST packet immediately after flushing the session close notification, and you should use 0 if you prefer fast connection close, but the client may never receive the last data sent by turms-gateway. -1 means no timeout and waiting for the client to close the connection forever. Positive value should be used when you prefer that turms-gateway waits for the client to receive within the specified time data and only close the connection when it exceeds the timeout",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "establishTimeoutMillis": {
          "deprecated": false,
          "description": "turms-gateway will close the TCP connection if the client has not established a user session within the specified time. 0 means no timeout",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "wiretap": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      }
    },
    "udp": {
      "enabled": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "host": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "string"
      },
      "port": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      }
    },
    "websocket": {
      "backlog": {
        "deprecated": false,
        "description": "The maximum number of connection requests waiting in the backlog queue. Large enough to handle bursts and GC pauses but do not set too large to prevent SYN-Flood attacks",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "connectTimeoutMillis": {
        "deprecated": false,
        "description": "Used to mitigate the Slowloris DoS attack by lowering the timeout for the TCP connection handshake",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "enabled": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "host": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "string"
      },
      "port": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "remoteAddressSource": {
        "httpHeaderMode": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "options": [
            "REQUIRED",
            "OPTIONAL",
            "DISABLED"
          ],
          "sensitive": false,
          "type": "enum"
        },
        "proxyProtocolMode": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "options": [
            "REQUIRED",
            "OPTIONAL",
            "DISABLED"
          ],
          "sensitive": false,
          "type": "enum"
        }
      },
      "session": {
        "closeTimeoutMillis": {
          "deprecated": false,
          "description": "turms-gateway will send and flush a WebSocket close frame, and then send a TCP RST packet to the connection if the client has not closed the WebSocket connection within the specified time after turms-gateway has sent and flushed the session close notification. 0 means sending and flushing a WebSocket close frame, and then sending a TCP RST packet immediately after flushing the session close notification, and you should use 0 if you prefer fast connection close, but the client may never receive the last data sent by turms-gateway. -1 means no timeout and waiting for the client to close the connection forever. Positive value should be used when you prefer that turms-gateway waits for the client to receive within the specified time data and only close the connection when it exceeds the timeout",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "establishTimeoutMillis": {
          "deprecated": false,
          "description": "turms-gateway will close the WebSocket connection if the client has not established a user session within the specified time. 0 means no timeout",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      }
    }
  },
  "healthCheck": {
    "checkIntervalSeconds": {
      "deprecated": false,
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "int"
    },
    "cpu": {
      "retries": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "unhealthyLoadThresholdPercentage": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      }
    },
    "memory": {
      "directMemoryWarningThresholdPercentage": {
        "deprecated": false,
        "description": "Log warning messages if the used direct memory exceeds the max direct memory of the percentage",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "heapMemoryGcThresholdPercentage": {
        "deprecated": false,
        "description": "If the used memory has used the reserved memory specified by maxAvailableMemoryPercentage and minFreeSystemMemoryBytes, try to start GC when the used heap memory exceeds the max heap memory of the percentage",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "heapMemoryWarningThresholdPercentage": {
        "deprecated": false,
        "description": "Log warning messages if the used heap memory exceeds the max heap memory of the percentage",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "maxAvailableDirectMemoryPercentage": {
        "deprecated": false,
        "description": "The server will refuse to serve when the used direct memory exceeds the max direct memory of the percentage to try to avoid OutOfMemoryError",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "maxAvailableMemoryPercentage": {
        "deprecated": false,
        "description": "The server will refuse to serve when the used memory (heap memory + JVM internal non-heap memory + direct buffer pool) exceeds the physical memory of the percentage. The server will try to reserve max(maxAvailableMemoryPercentage of the physical memory, minFreeSystemMemoryBytes) for kernel and other processes. Note that the max available memory percentage does not conflict with the usage of limiting memory in docker because docker limits the memory of the container, while this memory percentage only limits the available memory for JVM",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "minFreeSystemMemoryBytes": {
        "deprecated": false,
        "description": "The server will refuse to serve when the free system memory is less than minFreeSystemMemoryBytes",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "minHeapMemoryGcIntervalSeconds": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "minMemoryWarningIntervalSeconds": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      }
    }
  },
  "ip": {
    "cachedPrivateIpExpireAfterMillis": {
      "deprecated": false,
      "description": "The cached private IP will expire after the specified time has elapsed. 0 means no cache",
      "global": false,
      "mutable": true,
      "sensitive": false,
      "type": "int"
    },
    "cachedPublicIpExpireAfterMillis": {
      "deprecated": false,
      "description": "The cached public IP will expire after the specified time has elapsed. 0 means no cache",
      "global": false,
      "mutable": true,
      "sensitive": false,
      "type": "int"
    },
    "publicIpDetectorAddresses": {
      "deprecated": false,
      "description": "The public IP detectors will only be used to query the public IP of the local node if needed (e.g. If the node discovery property \"advertiseStrategy\" is \"PUBLIC_ADDRESS\". Note that the HTTP response body must be a string of IP instead of a JSON",
      "elementType": "string",
      "global": false,
      "mutable": true,
      "sensitive": false,
      "type": "java.util.List"
    }
  },
  "location": {
    "enabled": {
      "deprecated": false,
      "description": "Whether to handle users' locations",
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "boolean"
    },
    "nearbyUserRequest": {
      "defaultMaxDistanceMeters": {
        "deprecated": false,
        "description": "The default maximum allowed distance in meters",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "defaultMaxNearbyUserCount": {
        "deprecated": false,
        "description": "The default maximum allowed number of nearby users",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "short"
      },
      "maxDistanceMeters": {
        "deprecated": false,
        "description": "The maximum allowed distance in meters",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxNearbyUserCount": {
        "deprecated": false,
        "description": "The maximum allowed number of nearby users",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "short"
      }
    },
    "treatUserIdAndDeviceTypeAsUniqueUser": {
      "deprecated": false,
      "description": "Whether to treat the pair of user ID and device type as a unique user when querying users nearby. If false, only the user ID is used to identify a unique user",
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "boolean"
    }
  },
  "logging": {
    "console": {
      "enabled": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "level": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "options": [
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "sensitive": false,
        "type": "enum"
      }
    },
    "file": {
      "compression": {
        "enabled": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "enabled": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "filePath": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "string"
      },
      "level": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "options": [
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "sensitive": false,
        "type": "enum"
      },
      "maxFileSizeMb": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "maxFiles": {
        "deprecated": false,
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      }
    }
  },
  "mockNode": {
    "adminApi": {
      "address": {
        "advertiseHost": {
          "deprecated": false,
          "description": "The advertise address of the local node exposed to admins. (e.g. 100.131.251.96)",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "string"
        },
        "advertiseStrategy": {
          "deprecated": false,
          "description": "The advertise strategy is used to decide which type of address should be used so that admins can access admin APIs and metrics APIs",
          "global": false,
          "mutable": true,
          "options": [
            "ADVERTISE_ADDRESS",
            "BIND_ADDRESS",
            "PRIVATE_ADDRESS",
            "PUBLIC_ADDRESS"
          ],
          "sensitive": false,
          "type": "enum"
        },
        "attachPortToHost": {
          "deprecated": false,
          "description": "Whether to attach the local port to the host.\ne.g. The local host is 100.131.251.96, and the port is 9510 so the service address will be 100.131.251.96:9510",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "debug": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to enable debug APIs",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "enabled": {
        "deprecated": false,
        "description": "Whether to enable the APIs for administrators",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "http": {
        "connectTimeoutMillis": {
          "deprecated": false,
          "description": "The connect timeout",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "host": {
          "deprecated": false,
          "description": "The bind host",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "idleTimeoutMillis": {
          "deprecated": false,
          "description": "The idle timeout on the connection when it is waiting for an HTTP request to come. Once the timeout is reached, the connection will be closed",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "maxRequestBodySizeBytes": {
          "deprecated": false,
          "description": "The max request body size in bytes",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "port": {
          "deprecated": false,
          "description": "The bind port",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "requestReadTimeoutMillis": {
          "deprecated": false,
          "description": "The read timeout on the connection when it is waiting for an HTTP request to be fully read. Once the timeout is reached, the connection will be closed",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "log": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to log API calls",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "logRequestParams": {
          "deprecated": false,
          "description": "Whether to log the parameters of requests",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "rateLimiting": {
        "capacity": {
          "deprecated": false,
          "description": "The maximum number of tokens that the bucket can hold",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "initialTokens": {
          "deprecated": false,
          "description": "The initial number of tokens for new session",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "refillIntervalMillis": {
          "deprecated": false,
          "description": "The time interval to refill. 0 means never refill",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "tokensPerPeriod": {
          "deprecated": false,
          "description": "Refills the bucket with the specified number of tokens per period if the bucket is not full",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        }
      },
      "useAuthentication": {
        "deprecated": false,
        "description": "Whether to use authentication. If false, all HTTP requesters will personate the root user and all HTTP requests will be passed. You may set it to false when you want to manage authentication via security groups, NACL, etc",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      }
    },
    "mongo": {
      "admin": {}
    }
  },
  "plugin": {
    "dir": {
      "deprecated": false,
      "description": "The relative path of plugins",
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "string"
    },
    "enabled": {
      "deprecated": false,
      "description": "Whether to enable plugins",
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "boolean"
    },
    "java": {
      "allowSave": {
        "deprecated": false,
        "description": "Whether to allow saving plugins using HTTP API",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      }
    },
    "js": {
      "allowSave": {
        "deprecated": false,
        "description": "Whether to allow saving plugins using HTTP API",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "debug": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to enable debugging",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        },
        "inspectHost": {
          "deprecated": false,
          "description": "The inspect host",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "inspectPort": {
          "deprecated": false,
          "description": "The inspect port",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "sandboxPolicy": {
        "deprecated": false,
        "description": "The sandbox policy to use when running plugins",
        "global": false,
        "mutable": false,
        "options": [
          "TRUSTED",
          "CONSTRAINED",
          "ISOLATED",
          "UNTRUSTED"
        ],
        "sensitive": false,
        "type": "enum"
      }
    },
    "network": {
      "plugins": {
        "deprecated": false,
        "elementType": "im.turms.server.common.infra.property.env.common.plugin.NetworkPluginProperties",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "java.util.List"
      },
      "proxy": {
        "connectTimeoutMillis": {
          "deprecated": false,
          "description": "The HTTP proxy connect timeout in millis",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "enabled": {
          "deprecated": false,
          "description": "Whether to enable HTTP proxy",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        },
        "host": {
          "deprecated": false,
          "description": "The HTTP proxy host",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "password": {
          "deprecated": false,
          "description": "The HTTP proxy password",
          "global": false,
          "mutable": false,
          "sensitive": true,
          "type": "string"
        },
        "port": {
          "deprecated": false,
          "description": "The HTTP proxy port",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "username": {
          "deprecated": false,
          "description": "The HTTP proxy username",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        }
      }
    }
  },
  "security": {
    "blocklist": {
      "ip": {
        "autoBlock": {
          "corruptedFrame": {
            "blockLevels": {
              "deprecated": false,
              "elementType": "im.turms.server.common.infra.property.env.common.security.AutoBlockItemProperties$BlockLevel",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.List"
            },
            "blockTriggerTimes": {
              "deprecated": false,
              "description": "Block the client when the block condition is triggered the times",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "int"
            },
            "enabled": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "corruptedRequest": {
            "blockLevels": {
              "deprecated": false,
              "elementType": "im.turms.server.common.infra.property.env.common.security.AutoBlockItemProperties$BlockLevel",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.List"
            },
            "blockTriggerTimes": {
              "deprecated": false,
              "description": "Block the client when the block condition is triggered the times",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "int"
            },
            "enabled": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "frequentRequest": {
            "blockLevels": {
              "deprecated": false,
              "elementType": "im.turms.server.common.infra.property.env.common.security.AutoBlockItemProperties$BlockLevel",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.List"
            },
            "blockTriggerTimes": {
              "deprecated": false,
              "description": "Block the client when the block condition is triggered the times",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "int"
            },
            "enabled": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          }
        },
        "enabled": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        },
        "syncBlocklistIntervalMillis": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "userId": {
        "autoBlock": {
          "corruptedFrame": {
            "blockLevels": {
              "deprecated": false,
              "elementType": "im.turms.server.common.infra.property.env.common.security.AutoBlockItemProperties$BlockLevel",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.List"
            },
            "blockTriggerTimes": {
              "deprecated": false,
              "description": "Block the client when the block condition is triggered the times",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "int"
            },
            "enabled": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "corruptedRequest": {
            "blockLevels": {
              "deprecated": false,
              "elementType": "im.turms.server.common.infra.property.env.common.security.AutoBlockItemProperties$BlockLevel",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.List"
            },
            "blockTriggerTimes": {
              "deprecated": false,
              "description": "Block the client when the block condition is triggered the times",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "int"
            },
            "enabled": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "frequentRequest": {
            "blockLevels": {
              "deprecated": false,
              "elementType": "im.turms.server.common.infra.property.env.common.security.AutoBlockItemProperties$BlockLevel",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.List"
            },
            "blockTriggerTimes": {
              "deprecated": false,
              "description": "Block the client when the block condition is triggered the times",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "int"
            },
            "enabled": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          }
        },
        "enabled": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        },
        "syncBlocklistIntervalMillis": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      }
    },
    "password": {
      "adminPasswordEncodingAlgorithm": {
        "deprecated": false,
        "description": "The password encoding algorithm for admins",
        "global": false,
        "mutable": false,
        "options": [
          "BCRYPT",
          "SALTED_SHA256",
          "NOOP"
        ],
        "sensitive": false,
        "type": "enum"
      },
      "initialRootPassword": {
        "deprecated": false,
        "description": "The initial password of the root user",
        "global": false,
        "mutable": false,
        "sensitive": true,
        "type": "string"
      },
      "userPasswordEncodingAlgorithm": {
        "deprecated": false,
        "description": "The password encoding algorithm for users",
        "global": false,
        "mutable": false,
        "options": [
          "BCRYPT",
          "SALTED_SHA256",
          "NOOP"
        ],
        "sensitive": false,
        "type": "enum"
      }
    }
  },
  "service": {
    "adminApi": {
      "address": {
        "advertiseHost": {
          "deprecated": false,
          "description": "The advertise address of the local node exposed to admins. (e.g. 100.131.251.96)",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "string"
        },
        "advertiseStrategy": {
          "deprecated": false,
          "description": "The advertise strategy is used to decide which type of address should be used so that admins can access admin APIs and metrics APIs",
          "global": false,
          "mutable": true,
          "options": [
            "ADVERTISE_ADDRESS",
            "BIND_ADDRESS",
            "PRIVATE_ADDRESS",
            "PUBLIC_ADDRESS"
          ],
          "sensitive": false,
          "type": "enum"
        },
        "attachPortToHost": {
          "deprecated": false,
          "description": "Whether to attach the local port to the host.\ne.g. The local host is 100.131.251.96, and the port is 9510 so the service address will be 100.131.251.96:9510",
          "global": false,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "allowDeleteWithoutFilter": {
        "deprecated": false,
        "description": "Whether to allow administrators to delete data without any filter. Better false to prevent administrators from deleting all data by accident",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "debug": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to enable debug APIs",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "defaultAvailableRecordsPerRequest": {
        "deprecated": false,
        "description": "The default available records per query request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "enabled": {
        "deprecated": false,
        "description": "Whether to enable the APIs for administrators",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "http": {
        "connectTimeoutMillis": {
          "deprecated": false,
          "description": "The connect timeout",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "host": {
          "deprecated": false,
          "description": "The bind host",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "idleTimeoutMillis": {
          "deprecated": false,
          "description": "The idle timeout on the connection when it is waiting for an HTTP request to come. Once the timeout is reached, the connection will be closed",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "maxRequestBodySizeBytes": {
          "deprecated": false,
          "description": "The max request body size in bytes",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "port": {
          "deprecated": false,
          "description": "The bind port",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "requestReadTimeoutMillis": {
          "deprecated": false,
          "description": "The read timeout on the connection when it is waiting for an HTTP request to be fully read. Once the timeout is reached, the connection will be closed",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "log": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to log API calls",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "logRequestParams": {
          "deprecated": false,
          "description": "Whether to log the parameters of requests",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "maxAvailableOnlineUsersStatusPerRequest": {
        "deprecated": false,
        "description": "The maximum available online users' status per query request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxAvailableRecordsPerRequest": {
        "deprecated": false,
        "description": "The maximum available records per query request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxDayDifferencePerCountRequest": {
        "deprecated": false,
        "description": "The maximum day difference per count request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxDayDifferencePerRequest": {
        "deprecated": false,
        "description": "The maximum day difference per query request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxHourDifferencePerCountRequest": {
        "deprecated": false,
        "description": "The maximum hour difference per count request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxMonthDifferencePerCountRequest": {
        "deprecated": false,
        "description": "The maximum month difference per count request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "rateLimiting": {
        "capacity": {
          "deprecated": false,
          "description": "The maximum number of tokens that the bucket can hold",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "initialTokens": {
          "deprecated": false,
          "description": "The initial number of tokens for new session",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "refillIntervalMillis": {
          "deprecated": false,
          "description": "The time interval to refill. 0 means never refill",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "tokensPerPeriod": {
          "deprecated": false,
          "description": "Refills the bucket with the specified number of tokens per period if the bucket is not full",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        }
      },
      "useAuthentication": {
        "deprecated": false,
        "description": "Whether to use authentication. If false, all HTTP requesters will personate the root user and all HTTP requests will be passed. You may set it to false when you want to manage authentication via security groups, NACL, etc",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      }
    },
    "clientApi": {
      "disabledEndpoints": {
        "deprecated": false,
        "description": "The disabled endpoints for client requests. Return ILLEGAL_ARGUMENT if a client tries to access them",
        "elementType": "enum",
        "global": false,
        "mutable": false,
        "options": [
          "CREATE_SESSION_REQUEST",
          "DELETE_SESSION_REQUEST",
          "QUERY_CONVERSATIONS_REQUEST",
          "UPDATE_CONVERSATION_REQUEST",
          "UPDATE_TYPING_STATUS_REQUEST",
          "CREATE_MESSAGE_REQUEST",
          "QUERY_MESSAGES_REQUEST",
          "UPDATE_MESSAGE_REQUEST",
          "CREATE_GROUP_MEMBERS_REQUEST",
          "DELETE_GROUP_MEMBERS_REQUEST",
          "QUERY_GROUP_MEMBERS_REQUEST",
          "UPDATE_GROUP_MEMBER_REQUEST",
          "QUERY_USER_PROFILES_REQUEST",
          "QUERY_NEARBY_USERS_REQUEST",
          "QUERY_USER_ONLINE_STATUSES_REQUEST",
          "UPDATE_USER_LOCATION_REQUEST",
          "UPDATE_USER_ONLINE_STATUS_REQUEST",
          "UPDATE_USER_REQUEST",
          "UPDATE_USER_SETTINGS_REQUEST",
          "DELETE_USER_SETTINGS_REQUEST",
          "QUERY_USER_SETTINGS_REQUEST",
          "CREATE_FRIEND_REQUEST_REQUEST",
          "CREATE_RELATIONSHIP_GROUP_REQUEST",
          "CREATE_RELATIONSHIP_REQUEST",
          "DELETE_FRIEND_REQUEST_REQUEST",
          "DELETE_RELATIONSHIP_GROUP_REQUEST",
          "DELETE_RELATIONSHIP_REQUEST",
          "QUERY_FRIEND_REQUESTS_REQUEST",
          "QUERY_RELATED_USER_IDS_REQUEST",
          "QUERY_RELATIONSHIP_GROUPS_REQUEST",
          "QUERY_RELATIONSHIPS_REQUEST",
          "UPDATE_FRIEND_REQUEST_REQUEST",
          "UPDATE_RELATIONSHIP_GROUP_REQUEST",
          "UPDATE_RELATIONSHIP_REQUEST",
          "CREATE_GROUP_REQUEST",
          "DELETE_GROUP_REQUEST",
          "QUERY_GROUPS_REQUEST",
          "QUERY_JOINED_GROUP_IDS_REQUEST",
          "QUERY_JOINED_GROUP_INFOS_REQUEST",
          "UPDATE_GROUP_REQUEST",
          "CREATE_GROUP_BLOCKED_USER_REQUEST",
          "DELETE_GROUP_BLOCKED_USER_REQUEST",
          "QUERY_GROUP_BLOCKED_USER_IDS_REQUEST",
          "QUERY_GROUP_BLOCKED_USER_INFOS_REQUEST",
          "CHECK_GROUP_JOIN_QUESTIONS_ANSWERS_REQUEST",
          "CREATE_GROUP_INVITATION_REQUEST",
          "CREATE_GROUP_JOIN_REQUEST_REQUEST",
          "CREATE_GROUP_JOIN_QUESTIONS_REQUEST",
          "DELETE_GROUP_INVITATION_REQUEST",
          "DELETE_GROUP_JOIN_REQUEST_REQUEST",
          "DELETE_GROUP_JOIN_QUESTIONS_REQUEST",
          "QUERY_GROUP_INVITATIONS_REQUEST",
          "QUERY_GROUP_JOIN_REQUESTS_REQUEST",
          "QUERY_GROUP_JOIN_QUESTIONS_REQUEST",
          "UPDATE_GROUP_INVITATION_REQUEST",
          "UPDATE_GROUP_JOIN_QUESTION_REQUEST",
          "UPDATE_GROUP_JOIN_REQUEST_REQUEST",
          "CREATE_MEETING_REQUEST",
          "DELETE_MEETING_REQUEST",
          "QUERY_MEETINGS_REQUEST",
          "UPDATE_MEETING_REQUEST",
          "UPDATE_MEETING_INVITATION_REQUEST",
          "DELETE_RESOURCE_REQUEST",
          "QUERY_RESOURCE_DOWNLOAD_INFO_REQUEST",
          "QUERY_RESOURCE_UPLOAD_INFO_REQUEST",
          "QUERY_MESSAGE_ATTACHMENT_INFOS_REQUEST",
          "UPDATE_MESSAGE_ATTACHMENT_INFO_REQUEST",
          "DELETE_CONVERSATION_SETTINGS_REQUEST",
          "QUERY_CONVERSATION_SETTINGS_REQUEST",
          "UPDATE_CONVERSATION_SETTINGS_REQUEST",
          "CREATE_MESSAGE_REACTIONS_REQUEST",
          "DELETE_MESSAGE_REACTIONS_REQUEST",
          "KIND_NOT_SET"
        ],
        "sensitive": false,
        "type": "java.util.Set"
      },
      "logging": {
        "excludedNotificationCategories": {
          "deprecated": false,
          "description": "Turms will get the notifications to log from the union of \"includedNotificationCategories\" and \"includedNotifications\" except the notifications included in \"excludedNotificationCategories\" and \"excludedNotificationTypes\"",
          "elementType": "enum",
          "global": false,
          "mutable": false,
          "options": [
            "ALL",
            "NONE",
            "CREATE",
            "DELETE",
            "UPDATE",
            "QUERY",
            "STORAGE",
            "CONVERSATION",
            "MESSAGE",
            "USER",
            "USER_RELATIONSHIP",
            "GROUP",
            "GROUP_BLOCKLIST",
            "GROUP_ENROLLMENT",
            "GROUP_MEMBER"
          ],
          "sensitive": false,
          "type": "java.util.Set"
        },
        "excludedNotificationTypes": {
          "deprecated": false,
          "description": "Turms will get the notifications to log from the union of \"includedNotificationCategories\" and \"includedNotifications\" except the notifications included in \"excludedNotificationCategories\" and \"excludedNotificationTypes\"",
          "elementType": "enum",
          "global": false,
          "mutable": false,
          "options": [
            "CREATE_SESSION_REQUEST",
            "DELETE_SESSION_REQUEST",
            "QUERY_CONVERSATIONS_REQUEST",
            "UPDATE_CONVERSATION_REQUEST",
            "UPDATE_TYPING_STATUS_REQUEST",
            "CREATE_MESSAGE_REQUEST",
            "QUERY_MESSAGES_REQUEST",
            "UPDATE_MESSAGE_REQUEST",
            "CREATE_GROUP_MEMBERS_REQUEST",
            "DELETE_GROUP_MEMBERS_REQUEST",
            "QUERY_GROUP_MEMBERS_REQUEST",
            "UPDATE_GROUP_MEMBER_REQUEST",
            "QUERY_USER_PROFILES_REQUEST",
            "QUERY_NEARBY_USERS_REQUEST",
            "QUERY_USER_ONLINE_STATUSES_REQUEST",
            "UPDATE_USER_LOCATION_REQUEST",
            "UPDATE_USER_ONLINE_STATUS_REQUEST",
            "UPDATE_USER_REQUEST",
            "UPDATE_USER_SETTINGS_REQUEST",
            "DELETE_USER_SETTINGS_REQUEST",
            "QUERY_USER_SETTINGS_REQUEST",
            "CREATE_FRIEND_REQUEST_REQUEST",
            "CREATE_RELATIONSHIP_GROUP_REQUEST",
            "CREATE_RELATIONSHIP_REQUEST",
            "DELETE_FRIEND_REQUEST_REQUEST",
            "DELETE_RELATIONSHIP_GROUP_REQUEST",
            "DELETE_RELATIONSHIP_REQUEST",
            "QUERY_FRIEND_REQUESTS_REQUEST",
            "QUERY_RELATED_USER_IDS_REQUEST",
            "QUERY_RELATIONSHIP_GROUPS_REQUEST",
            "QUERY_RELATIONSHIPS_REQUEST",
            "UPDATE_FRIEND_REQUEST_REQUEST",
            "UPDATE_RELATIONSHIP_GROUP_REQUEST",
            "UPDATE_RELATIONSHIP_REQUEST",
            "CREATE_GROUP_REQUEST",
            "DELETE_GROUP_REQUEST",
            "QUERY_GROUPS_REQUEST",
            "QUERY_JOINED_GROUP_IDS_REQUEST",
            "QUERY_JOINED_GROUP_INFOS_REQUEST",
            "UPDATE_GROUP_REQUEST",
            "CREATE_GROUP_BLOCKED_USER_REQUEST",
            "DELETE_GROUP_BLOCKED_USER_REQUEST",
            "QUERY_GROUP_BLOCKED_USER_IDS_REQUEST",
            "QUERY_GROUP_BLOCKED_USER_INFOS_REQUEST",
            "CHECK_GROUP_JOIN_QUESTIONS_ANSWERS_REQUEST",
            "CREATE_GROUP_INVITATION_REQUEST",
            "CREATE_GROUP_JOIN_REQUEST_REQUEST",
            "CREATE_GROUP_JOIN_QUESTIONS_REQUEST",
            "DELETE_GROUP_INVITATION_REQUEST",
            "DELETE_GROUP_JOIN_REQUEST_REQUEST",
            "DELETE_GROUP_JOIN_QUESTIONS_REQUEST",
            "QUERY_GROUP_INVITATIONS_REQUEST",
            "QUERY_GROUP_JOIN_REQUESTS_REQUEST",
            "QUERY_GROUP_JOIN_QUESTIONS_REQUEST",
            "UPDATE_GROUP_INVITATION_REQUEST",
            "UPDATE_GROUP_JOIN_QUESTION_REQUEST",
            "UPDATE_GROUP_JOIN_REQUEST_REQUEST",
            "CREATE_MEETING_REQUEST",
            "DELETE_MEETING_REQUEST",
            "QUERY_MEETINGS_REQUEST",
            "UPDATE_MEETING_REQUEST",
            "UPDATE_MEETING_INVITATION_REQUEST",
            "DELETE_RESOURCE_REQUEST",
            "QUERY_RESOURCE_DOWNLOAD_INFO_REQUEST",
            "QUERY_RESOURCE_UPLOAD_INFO_REQUEST",
            "QUERY_MESSAGE_ATTACHMENT_INFOS_REQUEST",
            "UPDATE_MESSAGE_ATTACHMENT_INFO_REQUEST",
            "DELETE_CONVERSATION_SETTINGS_REQUEST",
            "QUERY_CONVERSATION_SETTINGS_REQUEST",
            "UPDATE_CONVERSATION_SETTINGS_REQUEST",
            "CREATE_MESSAGE_REACTIONS_REQUEST",
            "DELETE_MESSAGE_REACTIONS_REQUEST",
            "KIND_NOT_SET"
          ],
          "sensitive": false,
          "type": "java.util.Set"
        },
        "excludedRequestCategories": {
          "deprecated": false,
          "description": "Turms will get the requests to log from the union of \"includedRequestCategories\" and \"includedRequests\" except the requests included in \"excludedRequestCategories\" and \"excludedRequestTypes\"",
          "elementType": "enum",
          "global": false,
          "mutable": false,
          "options": [
            "ALL",
            "NONE",
            "CREATE",
            "DELETE",
            "UPDATE",
            "QUERY",
            "STORAGE",
            "CONVERSATION",
            "MESSAGE",
            "USER",
            "USER_RELATIONSHIP",
            "GROUP",
            "GROUP_BLOCKLIST",
            "GROUP_ENROLLMENT",
            "GROUP_MEMBER"
          ],
          "sensitive": false,
          "type": "java.util.Set"
        },
        "excludedRequestTypes": {
          "deprecated": false,
          "description": "Turms will get the requests to log from the union of \"includedRequestCategories\" and \"includedRequests\" except the requests included in \"excludedRequestCategories\" and \"excludedRequestTypes\"",
          "elementType": "enum",
          "global": false,
          "mutable": false,
          "options": [
            "CREATE_SESSION_REQUEST",
            "DELETE_SESSION_REQUEST",
            "QUERY_CONVERSATIONS_REQUEST",
            "UPDATE_CONVERSATION_REQUEST",
            "UPDATE_TYPING_STATUS_REQUEST",
            "CREATE_MESSAGE_REQUEST",
            "QUERY_MESSAGES_REQUEST",
            "UPDATE_MESSAGE_REQUEST",
            "CREATE_GROUP_MEMBERS_REQUEST",
            "DELETE_GROUP_MEMBERS_REQUEST",
            "QUERY_GROUP_MEMBERS_REQUEST",
            "UPDATE_GROUP_MEMBER_REQUEST",
            "QUERY_USER_PROFILES_REQUEST",
            "QUERY_NEARBY_USERS_REQUEST",
            "QUERY_USER_ONLINE_STATUSES_REQUEST",
            "UPDATE_USER_LOCATION_REQUEST",
            "UPDATE_USER_ONLINE_STATUS_REQUEST",
            "UPDATE_USER_REQUEST",
            "UPDATE_USER_SETTINGS_REQUEST",
            "DELETE_USER_SETTINGS_REQUEST",
            "QUERY_USER_SETTINGS_REQUEST",
            "CREATE_FRIEND_REQUEST_REQUEST",
            "CREATE_RELATIONSHIP_GROUP_REQUEST",
            "CREATE_RELATIONSHIP_REQUEST",
            "DELETE_FRIEND_REQUEST_REQUEST",
            "DELETE_RELATIONSHIP_GROUP_REQUEST",
            "DELETE_RELATIONSHIP_REQUEST",
            "QUERY_FRIEND_REQUESTS_REQUEST",
            "QUERY_RELATED_USER_IDS_REQUEST",
            "QUERY_RELATIONSHIP_GROUPS_REQUEST",
            "QUERY_RELATIONSHIPS_REQUEST",
            "UPDATE_FRIEND_REQUEST_REQUEST",
            "UPDATE_RELATIONSHIP_GROUP_REQUEST",
            "UPDATE_RELATIONSHIP_REQUEST",
            "CREATE_GROUP_REQUEST",
            "DELETE_GROUP_REQUEST",
            "QUERY_GROUPS_REQUEST",
            "QUERY_JOINED_GROUP_IDS_REQUEST",
            "QUERY_JOINED_GROUP_INFOS_REQUEST",
            "UPDATE_GROUP_REQUEST",
            "CREATE_GROUP_BLOCKED_USER_REQUEST",
            "DELETE_GROUP_BLOCKED_USER_REQUEST",
            "QUERY_GROUP_BLOCKED_USER_IDS_REQUEST",
            "QUERY_GROUP_BLOCKED_USER_INFOS_REQUEST",
            "CHECK_GROUP_JOIN_QUESTIONS_ANSWERS_REQUEST",
            "CREATE_GROUP_INVITATION_REQUEST",
            "CREATE_GROUP_JOIN_REQUEST_REQUEST",
            "CREATE_GROUP_JOIN_QUESTIONS_REQUEST",
            "DELETE_GROUP_INVITATION_REQUEST",
            "DELETE_GROUP_JOIN_REQUEST_REQUEST",
            "DELETE_GROUP_JOIN_QUESTIONS_REQUEST",
            "QUERY_GROUP_INVITATIONS_REQUEST",
            "QUERY_GROUP_JOIN_REQUESTS_REQUEST",
            "QUERY_GROUP_JOIN_QUESTIONS_REQUEST",
            "UPDATE_GROUP_INVITATION_REQUEST",
            "UPDATE_GROUP_JOIN_QUESTION_REQUEST",
            "UPDATE_GROUP_JOIN_REQUEST_REQUEST",
            "CREATE_MEETING_REQUEST",
            "DELETE_MEETING_REQUEST",
            "QUERY_MEETINGS_REQUEST",
            "UPDATE_MEETING_REQUEST",
            "UPDATE_MEETING_INVITATION_REQUEST",
            "DELETE_RESOURCE_REQUEST",
            "QUERY_RESOURCE_DOWNLOAD_INFO_REQUEST",
            "QUERY_RESOURCE_UPLOAD_INFO_REQUEST",
            "QUERY_MESSAGE_ATTACHMENT_INFOS_REQUEST",
            "UPDATE_MESSAGE_ATTACHMENT_INFO_REQUEST",
            "DELETE_CONVERSATION_SETTINGS_REQUEST",
            "QUERY_CONVERSATION_SETTINGS_REQUEST",
            "UPDATE_CONVERSATION_SETTINGS_REQUEST",
            "CREATE_MESSAGE_REACTIONS_REQUEST",
            "DELETE_MESSAGE_REACTIONS_REQUEST",
            "KIND_NOT_SET"
          ],
          "sensitive": false,
          "type": "java.util.Set"
        },
        "includedNotificationCategories": {
          "deprecated": false,
          "description": "Turms will get the notifications to log from the union of \"includedNotificationCategories\" and \"includedNotifications\" except the notifications included in \"excludedNotificationCategories\" and \"excludedNotificationTypes\"",
          "elementType": "im.turms.server.common.infra.property.env.service.env.clientapi.property.LoggingCategoryProperties",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.LinkedHashSet"
        },
        "includedNotifications": {
          "deprecated": false,
          "description": "Turms will get the notifications to log from the union of \"includedNotificationCategories\" and \"includedNotifications\" except the notifications included in \"excludedNotificationCategories\" and \"excludedNotificationTypes\"",
          "elementType": "im.turms.server.common.infra.property.env.service.env.clientapi.property.LoggingRequestProperties",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.LinkedHashSet"
        },
        "includedRequestCategories": {
          "deprecated": false,
          "description": "Turms will get the requests to log from the union of \"includedRequestCategories\" and \"includedRequests\" except the requests included in \"excludedRequestCategories\" and \"excludedRequestTypes\"",
          "elementType": "im.turms.server.common.infra.property.env.service.env.clientapi.property.LoggingCategoryProperties",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.LinkedHashSet"
        },
        "includedRequests": {
          "deprecated": false,
          "description": "Turms will get the requests to log from the union of \"includedRequestCategories\" and \"includedRequests\" except the requests included in \"excludedRequestCategories\" and \"excludedRequestTypes\"",
          "elementType": "im.turms.server.common.infra.property.env.service.env.clientapi.property.LoggingRequestProperties",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.LinkedHashSet"
        }
      }
    },
    "conference": {
      "meeting": {
        "id": {
          "type": {
            "deprecated": false,
            "description": "The ID type",
            "global": true,
            "mutable": true,
            "options": [
              "DIGIT_9",
              "DIGIT_10"
            ],
            "sensitive": false,
            "type": "enum"
          }
        },
        "intro": {
          "maxLength": {
            "deprecated": false,
            "description": "The maximum length of the intro. 0 means no maximum length",
            "global": true,
            "mutable": true,
            "sensitive": false,
            "type": "int"
          },
          "minLength": {
            "deprecated": false,
            "description": "The minimum length of the intro. 0 means no minimum length",
            "global": true,
            "mutable": true,
            "sensitive": false,
            "type": "int"
          }
        },
        "name": {
          "maxLength": {
            "deprecated": false,
            "description": "The maximum length of the name. 0 means no maximum length",
            "global": true,
            "mutable": true,
            "sensitive": false,
            "type": "int"
          },
          "minLength": {
            "deprecated": false,
            "description": "The minimum length of the name. 0 means no minimum length",
            "global": true,
            "mutable": true,
            "sensitive": false,
            "type": "int"
          }
        },
        "password": {
          "maxLength": {
            "deprecated": false,
            "description": "The maximum length of the password",
            "global": true,
            "mutable": true,
            "sensitive": false,
            "type": "int"
          },
          "minLength": {
            "deprecated": false,
            "description": "The minimum length of the password",
            "global": true,
            "mutable": true,
            "sensitive": false,
            "type": "int"
          },
          "policy": {
            "deprecated": false,
            "description": "The password policy",
            "global": true,
            "mutable": true,
            "options": [
              "USER_INPUT_REQUIRED",
              "USER_INPUT_OPTIONAL",
              "USER_INPUT_OR_SYSTEM_GENERATED",
              "SYSTEM_GENERATED",
              "PROHIBITED"
            ],
            "sensitive": false,
            "type": "enum"
          },
          "type": {
            "deprecated": false,
            "description": "The password type",
            "global": true,
            "mutable": true,
            "options": [
              "NUMERIC",
              "ALPHABETIC",
              "ALPHANUMERIC"
            ],
            "sensitive": false,
            "type": "enum"
          }
        },
        "quota": {
          "maxActiveMeetingCountPerUser": {
            "deprecated": false,
            "description": "The maximum number of active meetings per user",
            "global": true,
            "mutable": true,
            "sensitive": false,
            "type": "int"
          }
        },
        "scheduling": {
          "allowCancel": {
            "deprecated": false,
            "description": "Whether to allow users to cancel the meeting",
            "global": true,
            "mutable": true,
            "sensitive": false,
            "type": "boolean"
          },
          "maxAllowedStartDateOffsetSeconds": {
            "deprecated": false,
            "description": "The maximum allowed meeting start date offset in seconds. 0 means no offset allowed",
            "global": true,
            "mutable": true,
            "sensitive": false,
            "type": "int"
          }
        }
      }
    },
    "conversation": {
      "readReceipt": {
        "allowMoveReadDateForward": {
          "deprecated": false,
          "description": "Whether to allow moving the last read date forward",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "enabled": {
          "deprecated": false,
          "description": "Whether to allow updating the last read date",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "updateReadDateAfterMessageSent": {
          "deprecated": false,
          "description": "Whether to update the read date after a user sent a message",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "updateReadDateWhenUserQueryingMessage": {
          "deprecated": false,
          "description": "Whether to update the read date when a user queries messages",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "useServerTime": {
          "deprecated": false,
          "description": "Whether to use the server time to set the last read date when updating",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "settings": {
        "allowedSettings": {
          "deprecated": false,
          "description": "The list of allowed settings",
          "elementType": "im.turms.server.common.infra.property.env.service.business.common.setting.CustomSettingProperties",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "java.util.List"
        },
        "ignoreUnknownSettingsOnDelete": {
          "deprecated": false,
          "description": "Whether to ignore unknown settings on delete. If false, the server will throw if the request specifies an unknown setting. If true, the server will ignore the unknown settings, and continue to process the request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "ignoreUnknownSettingsOnUpsert": {
          "deprecated": false,
          "description": "Whether to ignore unknown settings on upsert. If false, the server will throw if the request specifies an unknown setting. If true, the server will ignore the unknown settings, and continue to process the request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "typingStatus": {
        "enabled": {
          "deprecated": false,
          "description": "Whether to notify users of typing statuses sent by other users",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      }
    },
    "elasticsearch": {
      "enabled": {
        "deprecated": false,
        "description": "Whether to enable Elasticsearch",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "useCase": {
        "group": {
          "client": {
            "password": {
              "deprecated": false,
              "description": "Elasticsearch password",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            },
            "requestHeaders": {
              "deprecated": false,
              "description": "Elasticsearch HTTP request headers",
              "elementType": "im.turms.server.common.infra.property.env.service.env.elasticsearch.HttpHeaderProperties",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.List"
            },
            "uri": {
              "deprecated": false,
              "description": "Elasticsearch URI",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            },
            "username": {
              "deprecated": false,
              "description": "Elasticsearch username",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            }
          },
          "enabled": {
            "deprecated": false,
            "description": "Whether to enable this use case",
            "global": false,
            "mutable": false,
            "sensitive": false,
            "type": "boolean"
          },
          "indexes": {
            "deprecated": false,
            "elementType": "im.turms.server.common.infra.property.env.service.env.elasticsearch.ElasticsearchIndexProperties",
            "global": false,
            "mutable": false,
            "sensitive": false,
            "type": "java.util.List"
          },
          "mongo": {
            "enableTransaction": {
              "deprecated": false,
              "description": "Whether to enable transaction for MongoDB. If enabled, MongoDB will use transactions when upserting data into both MongoDB and Elasticsearch, and will roll back data if an error occurs, no matter they are MongoDB or Elasticsearch errors",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "sync": {
            "performFullSyncAtStartup": {
              "deprecated": false,
              "description": "Whether to sync existing data from MongoDB to Elasticsearch. If true and the current node is the leader, turms will run a full sync on startup if the data has not been synced yet",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          }
        },
        "user": {
          "client": {
            "password": {
              "deprecated": false,
              "description": "Elasticsearch password",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            },
            "requestHeaders": {
              "deprecated": false,
              "description": "Elasticsearch HTTP request headers",
              "elementType": "im.turms.server.common.infra.property.env.service.env.elasticsearch.HttpHeaderProperties",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "java.util.List"
            },
            "uri": {
              "deprecated": false,
              "description": "Elasticsearch URI",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            },
            "username": {
              "deprecated": false,
              "description": "Elasticsearch username",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            }
          },
          "enabled": {
            "deprecated": false,
            "description": "Whether to enable this use case",
            "global": false,
            "mutable": false,
            "sensitive": false,
            "type": "boolean"
          },
          "indexes": {
            "deprecated": false,
            "elementType": "im.turms.server.common.infra.property.env.service.env.elasticsearch.ElasticsearchIndexProperties",
            "global": false,
            "mutable": false,
            "sensitive": false,
            "type": "java.util.List"
          },
          "mongo": {
            "enableTransaction": {
              "deprecated": false,
              "description": "Whether to enable transaction for MongoDB. If enabled, MongoDB will use transactions when upserting data into both MongoDB and Elasticsearch, and will roll back data if an error occurs, no matter they are MongoDB or Elasticsearch errors",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "sync": {
            "performFullSyncAtStartup": {
              "deprecated": false,
              "description": "Whether to sync existing data from MongoDB to Elasticsearch. If true and the current node is the leader, turms will run a full sync on startup if the data has not been synced yet",
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          }
        }
      }
    },
    "fake": {
      "clearAllCollectionsBeforeFaking": {
        "deprecated": false,
        "description": "Whether to clear all collections before faking on startup",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "enabled": {
        "deprecated": false,
        "description": "Whether to fake data. Note that faking only works in non-production environments",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "fakeIfCollectionExists": {
        "deprecated": false,
        "description": "Whether to fake data even if the collection has already existed",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      },
      "userCount": {
        "deprecated": false,
        "description": "the total number of users to fake",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      }
    },
    "group": {
      "activateGroupWhenCreated": {
        "deprecated": false,
        "description": "Whether to activate a group when created by default",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "allowGroupOwnerChangeGroupType": {
        "deprecated": false,
        "description": "Whether to allow the group owner to change the group type",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "deleteGroupLogicallyByDefault": {
        "deprecated": false,
        "description": "Whether to delete groups logically by default",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "invitation": {
        "allowRecallPendingInvitationByOwnerAndManager": {
          "deprecated": false,
          "description": "Whether to allow the owner and managers of a group to recall pending group invitations",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "allowRecallPendingInvitationBySender": {
          "deprecated": false,
          "description": "Whether to allow the sender to recall the pending group invitation sent by themselves",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "deleteExpiredInvitationsWhenCronTriggered": {
          "deprecated": false,
          "description": "Whether to delete expired group invitations when the cron expression is triggered",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "expireAfterSeconds": {
          "deprecated": false,
          "description": "A group invitation will become expired after the specified time has passed",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "expiredInvitationsCleanupCron": {
          "deprecated": false,
          "description": "Clean the expired group invitations when the cron expression is triggered if \"deleteExpiredInvitationsWhenCronTriggered\" is true",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "maxContentLength": {
          "deprecated": false,
          "description": "The maximum allowed length for the text of a group invitation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "maxResponseReasonLength": {
          "deprecated": false,
          "description": "The maximum allowed length for the response reason of a group invitation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        }
      },
      "joinRequest": {
        "allowRecallPendingJoinRequestBySender": {
          "deprecated": false,
          "description": "Whether to allow users to recall the join requests sent by themselves",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "deleteExpiredJoinRequestsWhenCronTriggered": {
          "deprecated": false,
          "description": "Whether to delete expired group join requests when the cron expression is triggered",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "expireAfterSeconds": {
          "deprecated": false,
          "description": "A group join request will become expired after the specified time has elapsed",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "expiredJoinRequestsCleanupCron": {
          "deprecated": false,
          "description": "Clean the expired group join requests when the cron expression is triggered if \"deleteExpiredJoinRequestsWhenCronTriggered\" is true",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "maxContentLength": {
          "deprecated": false,
          "description": "The maximum allowed length for the text of a group join request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "maxResponseReasonLength": {
          "deprecated": false,
          "description": "The maximum allowed length for the response reason of a group join request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        }
      },
      "memberCacheExpireAfterSeconds": {
        "deprecated": false,
        "description": "The group member cache will expire after the specified seconds. If 0, no group member cache",
        "global": true,
        "mutable": false,
        "sensitive": false,
        "type": "int"
      },
      "question": {
        "answerContentLimit": {
          "deprecated": false,
          "description": "The maximum allowed length for the text of a group question's answer",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "maxAnswerCount": {
          "deprecated": false,
          "description": "The maximum number of answers for a group question",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "questionContentLimit": {
          "deprecated": false,
          "description": "The maximum allowed length for the text of a group question",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        }
      }
    },
    "message": {
      "allowEditMessageBySender": {
        "deprecated": false,
        "description": "Whether to allow the sender of a message to edit the message",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "allowRecallMessage": {
        "deprecated": false,
        "description": "Whether to allow users to recall messages.\nNote: To recall messages, more system resources are needed",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "allowSendMessagesToOneself": {
        "deprecated": false,
        "description": "Whether to allow users to send messages to themselves",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "allowSendMessagesToStranger": {
        "deprecated": false,
        "description": "Whether to allow users to send messages to a stranger",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "availableRecallDurationSeconds": {
        "deprecated": false,
        "description": "The available recall duration for the sender of a message",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "cache": {
        "sentMessageCacheMaxSize": {
          "deprecated": false,
          "description": "The maximum size of the cache of sent messages.",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "sentMessageExpireAfter": {
          "deprecated": false,
          "description": "The retention period of sent messages in the cache. For a better performance, it is a good practice to keep the value greater than the allowed recall duration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "checkIfTargetActiveAndNotDeleted": {
        "deprecated": false,
        "description": "Whether to check if the target (recipient or group) of a message is active and not deleted",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "defaultAvailableMessagesNumberWithTotal": {
        "deprecated": false,
        "description": "The default available messages number with the \"total\" field for a message query request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "defaultAvailableMessagesNumberWithoutTotal": {
        "deprecated": false,
        "description": "The default available messages number without the \"total\" field for a message query request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "deleteMessageLogicallyByDefault": {
        "deprecated": false,
        "description": "Whether to delete messages logically by default",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "expiredMessagesCleanupCron": {
        "deprecated": false,
        "description": "Clean the expired messages when the cron expression is triggered",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "string"
      },
      "isRecalledMessageVisible": {
        "deprecated": false,
        "description": "Whether to respond with recalled messages to clients' message query requests",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "maxAvailableMessagesNumberWithTotal": {
        "deprecated": false,
        "description": "The max available messages number with the \"total\" field that a message query request can request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxAvailableMessagesNumberWithoutTotal": {
        "deprecated": false,
        "description": "The max available messages number without the \"total\" field that a message query request can request",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxRecordsSizeBytes": {
        "deprecated": false,
        "description": "The maximum allowed size for the records of a message",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxTextLimit": {
        "deprecated": false,
        "description": "The maximum allowed length for the text of a message",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "messageRetentionPeriodHours": {
        "deprecated": false,
        "description": "A message will be retained for the given period and will be removed from the database after the retention period",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "persistMessage": {
        "deprecated": false,
        "description": "Whether to persist messages in databases.\nNote: If false, senders will not get the message ID after the message has sent and cannot edit it",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "persistPreMessageId": {
        "deprecated": false,
        "description": "Whether to persist the previous message ID of messages in databases",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "persistRecord": {
        "deprecated": false,
        "description": "Whether to persist the records of messages in databases",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "persistSenderIp": {
        "deprecated": false,
        "description": "Whether to persist the sender IP of messages in databases",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "sequenceId": {
        "useSequenceIdForGroupConversation": {
          "deprecated": false,
          "description": "Whether to use the sequence ID for group conversations so that the client can be aware of the loss of messages. Note that the property has a significant impact on performance",
          "global": true,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        },
        "useSequenceIdForPrivateConversation": {
          "deprecated": false,
          "description": "Whether to use the sequence ID for private conversations so that the client can be aware of the loss of messages. Note that the property has a significant impact on performance",
          "global": true,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "timeType": {
        "deprecated": false,
        "description": "The time type for the delivery time of message",
        "global": true,
        "mutable": true,
        "options": [
          "CLIENT_TIME",
          "LOCAL_SERVER_TIME"
        ],
        "sensitive": false,
        "type": "enum"
      },
      "useConversationId": {
        "deprecated": false,
        "description": "Whether to use conversation ID so that a user can query the messages sent by themselves in a conversation quickly",
        "global": true,
        "mutable": false,
        "sensitive": false,
        "type": "boolean"
      }
    },
    "mongo": {
      "admin": {
        "optionalIndex": {
          "admin": {
            "registrationDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "roleId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          }
        }
      },
      "conference": {
        "optionalIndex": {
          "meeting": {
            "groupId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "userId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          }
        }
      },
      "conversation": {},
      "group": {
        "optionalIndex": {
          "group": {
            "creationDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "creatorId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "deletionDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "muteEndDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "ownerId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "typeId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "groupBlockedUser": {
            "blockDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "requesterId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "groupInvitation": {
            "groupId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "inviterId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "responseDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "groupJoinRequest": {
            "creationDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "groupId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "responderId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "responseDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "groupMember": {
            "joinDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "muteEndDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          }
        }
      },
      "message": {
        "optionalIndex": {
          "message": {
            "deletionDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "referenceId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "senderId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "senderIp": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "senderIpV6": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          }
        },
        "tieredStorage": {
          "autoRangeUpdater": {
            "cron": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "string"
            },
            "enabled": {
              "deprecated": false,
              "global": true,
              "mutable": true,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "enabled": {
            "deprecated": false,
            "global": false,
            "mutable": false,
            "sensitive": false,
            "type": "boolean"
          },
          "tiers": {
            "deprecated": false,
            "description": "The storage properties for tiers from hot to cold. Note that the order of the tiers is important",
            "global": false,
            "mutable": false,
            "sensitive": false,
            "type": "java.util.LinkedHashMap"
          }
        }
      },
      "user": {
        "optionalIndex": {
          "userFriendRequest": {
            "recipientId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "requesterId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "responseDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "userRelationship": {
            "establishmentDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          },
          "userRelationshipGroupMember": {
            "groupIndex": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "joinDate": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            },
            "relatedUserId": {
              "deprecated": false,
              "global": false,
              "mutable": false,
              "sensitive": false,
              "type": "boolean"
            }
          }
        }
      }
    },
    "notification": {
      "friendRequestCreated": {
        "notifyFriendRequestRecipient": {
          "deprecated": false,
          "description": "Whether to notify the recipient when the requester has created a friend request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have created a friend request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "friendRequestRecalled": {
        "notifyFriendRequestRecipient": {
          "deprecated": false,
          "description": "Whether to notify the recipient when the requester has recalled a friend request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have recalled a friend request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "friendRequestReplied": {
        "notifyFriendRequestSender": {
          "deprecated": false,
          "description": "Whether to notify the sender of the friend request when the recipient has replied to the friend request sent by them",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have replied to a friend request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupBlockedUserAdded": {
        "notifyBlockedUser": {
          "deprecated": false,
          "description": "Whether to notify the user when they have been blocked by a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when a user has been blocked by a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have added a blocked user to a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupBlockedUserRemoved": {
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when a user is unblocked by a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have removed a blocked user from a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyUnblockedUser": {
          "deprecated": false,
          "description": "Whether to notify the user when they are unblocked by a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupConversationReadDateUpdated": {
        "notifyOtherGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify other group members when a group member has updated their read date in a group conversation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated the read date in a group conversation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupConversationSettingDeleted": {
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have deleted their group conversation settings",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupConversationSettingUpdated": {
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated their group conversation settings",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupCreated": {
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have created a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupDeleted": {
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when a group owner has updated their group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have deleted a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupInvitationAdded": {
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when a user has been invited",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyGroupOwnerAndManagers": {
          "deprecated": false,
          "description": "Whether to notify the group owner and managers when a user has been invited",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyInvitee": {
          "deprecated": false,
          "description": "Whether to notify the user when they have been invited by a group member",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have invited a user to a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupInvitationRecalled": {
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when an invitation has been recalled",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyGroupOwnerAndManagers": {
          "deprecated": false,
          "description": "Whether to notify the group owner and managers when an invitation has been recalled",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyInvitee": {
          "deprecated": false,
          "description": "Whether to notify the invitee when a group member has recalled their received group invitation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have recalled a group invitation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupInvitationReplied": {
        "notifyGroupInvitationInviter": {
          "deprecated": false,
          "description": "Whether to notify the inviter of the group invitation when their group invitations have been replied",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when a group invitation has been replied",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyGroupOwnerAndManagers": {
          "deprecated": false,
          "description": "Whether to notify the group owner and managers when a group invitation has been replied",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have replied to a group invitation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupJoinRequestCreated": {
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when a user has created a group join request for their group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyGroupOwnerAndManagers": {
          "deprecated": false,
          "description": "Whether to notify the group owner and managers when a user has created a group join request for their group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have created a group join request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupJoinRequestRecalled": {
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when a user has recalled a group join request for their group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyGroupOwnerAndManagers": {
          "deprecated": false,
          "description": "Whether to notify the group owner and managers when a user has recalled a group join request for their group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have recalled a group join request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupJoinRequestReplied": {
        "notifyGroupJoinRequestSender": {
          "deprecated": false,
          "description": "Whether to notify the sender of the group join request when the group owner or manager has replied to the friend request sent by them",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when a group join request has been replied",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyGroupOwnerAndManagers": {
          "deprecated": false,
          "description": "Whether to notify the group owner and managers when a group join request has been replied",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have replied to a group join request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupMemberAdded": {
        "notifyAddedGroupMember": {
          "deprecated": false,
          "description": "Whether to notify the group member when added by others",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyOtherGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify other group members when a group member has been added",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have added a group member",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupMemberInfoUpdated": {
        "notifyOtherGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify other group members when a group member's information has been updated",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated their group member information",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyUpdatedGroupMember": {
          "deprecated": false,
          "description": "Whether to notify the group member when others have updated their group member information",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupMemberOnlineStatusUpdated": {
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify other group members when a member's online status has been updated",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupMemberRemoved": {
        "notifyOtherGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify other group members when a group member has been removed",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRemovedGroupMember": {
          "deprecated": false,
          "description": "Whether to notify the group member when removed by others",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they removed a group member",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "groupUpdated": {
        "notifyGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify group members when the group owner or managers have updated their group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated a group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "meetingCanceled": {
        "notifyMeetingParticipants": {
          "deprecated": false,
          "description": "Whether to notify the meeting participants when the creator has canceled a meeting",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have canceled a meeting",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "meetingInvitationUpdated": {
        "notifyMeetingParticipants": {
          "deprecated": false,
          "description": "Whether to notify the meeting participants when the requester has updated a meeting invitation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated a meeting invitation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "meetingUpdated": {
        "notifyMeetingParticipants": {
          "deprecated": false,
          "description": "Whether to notify the meeting participants when the creator has updated a meeting",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated a meeting",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "messageCreated": {
        "notifyMessageRecipients": {
          "deprecated": false,
          "description": "Whether to notify the message recipients when a sender has created a message to them",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have created a message",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "messageUpdated": {
        "notifyMessageRecipients": {
          "deprecated": false,
          "description": "Whether to notify the message recipients when a sender has updated a message sent to them",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated a message",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "oneSidedRelationshipGroupDeleted": {
        "notifyRelationshipGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify members when a one-side relationship group owner has deleted the group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have deleted a relationship group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "oneSidedRelationshipGroupMemberAdded": {
        "notifyNewRelationshipGroupMember": {
          "deprecated": false,
          "description": "Whether to notify the new member when a user has added them to their one-sided relationship group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have added a new member to their one-sided relationship group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "oneSidedRelationshipGroupMemberRemoved": {
        "notifyRemovedRelationshipGroupMember": {
          "deprecated": false,
          "description": "Whether to notify the removed member when a user has removed them from their one-sided relationship group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have removed a new member from their one-sided relationship group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "oneSidedRelationshipGroupUpdated": {
        "notifyRelationshipGroupMembers": {
          "deprecated": false,
          "description": "Whether to notify members when a one-side relationship group owner has updated the group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated a relationship group",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "oneSidedRelationshipUpdated": {
        "notifyRelatedUser": {
          "deprecated": false,
          "description": "Whether to notify the related user when a user has updated a one-sided relationship with them",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated a one-sided relationship",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "privateConversationReadDateUpdated": {
        "notifyContact": {
          "deprecated": false,
          "description": "Whether to notify another contact when a contact has updated their read date in a private conversation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated the read date in a private conversation",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "privateConversationSettingDeleted": {
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have deleted their private conversation settings",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "privateConversationSettingUpdated": {
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated their private conversation settings",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "userInfoUpdated": {
        "notifyNonBlockedRelatedUsers": {
          "deprecated": false,
          "description": "Whether to notify non-blocked related users when a user has updated their information",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated their information",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "userOnlineStatusUpdated": {
        "notifyNonBlockedRelatedUsers": {
          "deprecated": false,
          "description": "Whether to notify non-blocked related users when a user has updated their online status",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated their online status",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "userSettingDeleted": {
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have deleted their settings",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      },
      "userSettingUpdated": {
        "notifyRequesterOtherOnlineSessions": {
          "deprecated": false,
          "description": "Whether to notify the requester's other online sessions when they have updated their settings",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      }
    },
    "pushNotification": {
      "apns": {
        "bundleId": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "enabled": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        },
        "keyId": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "sandboxEnabled": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        },
        "signingKey": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "teamId": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        }
      },
      "fcm": {
        "credentials": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "enabled": {
          "deprecated": false,
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "boolean"
        }
      }
    },
    "redis": {
      "sequenceId": {}
    },
    "statistics": {
      "logOnlineUsersNumber": {
        "deprecated": false,
        "description": "Whether to log online users number",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "onlineUsersNumberLoggingCron": {
        "deprecated": false,
        "description": "The cron expression to specify the time to log online users' number",
        "global": false,
        "mutable": false,
        "sensitive": false,
        "type": "string"
      }
    },
    "storage": {
      "groupProfilePicture": {
        "allowedContentType": {
          "deprecated": false,
          "description": "The allowed \"Content-Type\" of the resource that the client can upload",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "allowedReferrers": {
          "deprecated": false,
          "description": "Restrict access to the resource to only allow the specific referrers (e.g. \"https://github.com/turms-im/turms/*\")",
          "elementType": "string",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.List"
        },
        "downloadUrlExpireAfterSeconds": {
          "deprecated": false,
          "description": "The presigned URLs are valid only for the specified duration. 0 means no expiration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "expireAfterDays": {
          "deprecated": false,
          "description": "Delete the resource the specific days after creation. 0 means no expiration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "maxSizeBytes": {
          "deprecated": false,
          "description": "The maximum size of the resource that the client can upload. 0 means no limit",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "minSizeBytes": {
          "deprecated": false,
          "description": "The minimum size of the resource that the client can upload. 0 means no limit",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "uploadUrlExpireAfterSeconds": {
          "deprecated": false,
          "description": "The presigned URLs are valid only for the specified duration. 0 means no expiration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "messageAttachment": {
        "allowedContentType": {
          "deprecated": false,
          "description": "The allowed \"Content-Type\" of the resource that the client can upload",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "allowedReferrers": {
          "deprecated": false,
          "description": "Restrict access to the resource to only allow the specific referrers (e.g. \"https://github.com/turms-im/turms/*\")",
          "elementType": "string",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.List"
        },
        "downloadUrlExpireAfterSeconds": {
          "deprecated": false,
          "description": "The presigned URLs are valid only for the specified duration. 0 means no expiration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "expireAfterDays": {
          "deprecated": false,
          "description": "Delete the resource the specific days after creation. 0 means no expiration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "maxSizeBytes": {
          "deprecated": false,
          "description": "The maximum size of the resource that the client can upload. 0 means no limit",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "minSizeBytes": {
          "deprecated": false,
          "description": "The minimum size of the resource that the client can upload. 0 means no limit",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "uploadUrlExpireAfterSeconds": {
          "deprecated": false,
          "description": "The presigned URLs are valid only for the specified duration. 0 means no expiration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      },
      "userProfilePicture": {
        "allowedContentType": {
          "deprecated": false,
          "description": "The allowed \"Content-Type\" of the resource that the client can upload",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "allowedReferrers": {
          "deprecated": false,
          "description": "Restrict access to the resource to only allow the specific referrers (e.g. \"https://github.com/turms-im/turms/*\")",
          "elementType": "string",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "java.util.List"
        },
        "downloadUrlExpireAfterSeconds": {
          "deprecated": false,
          "description": "The presigned URLs are valid only for the specified duration. 0 means no expiration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "expireAfterDays": {
          "deprecated": false,
          "description": "Delete the resource the specific days after creation. 0 means no expiration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "maxSizeBytes": {
          "deprecated": false,
          "description": "The maximum size of the resource that the client can upload. 0 means no limit",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "minSizeBytes": {
          "deprecated": false,
          "description": "The minimum size of the resource that the client can upload. 0 means no limit",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        },
        "uploadUrlExpireAfterSeconds": {
          "deprecated": false,
          "description": "The presigned URLs are valid only for the specified duration. 0 means no expiration",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "int"
        }
      }
    },
    "user": {
      "activateUserWhenAdded": {
        "deprecated": false,
        "description": "Whether to activate a user when added by default",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "deleteTwoSidedRelationships": {
        "deprecated": false,
        "description": "Whether to delete the two-sided relationships when a user requests to delete a relationship",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "deleteUserLogically": {
        "deprecated": false,
        "description": "Whether to delete a user logically",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "friendRequest": {
        "allowRecallPendingFriendRequestBySender": {
          "deprecated": false,
          "description": "Whether to allow the sender to recall the pending friend request sent by themselves",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "allowSendRequestAfterDeclinedOrIgnoredOrExpired": {
          "deprecated": false,
          "description": "Whether to allow sending a friend request again after the previous request has been declined, ignored, or expired",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "deleteExpiredRequestsWhenCronTriggered": {
          "deprecated": false,
          "description": "Whether to delete expired when the cron expression is triggered",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "expiredUserFriendRequestsCleanupCron": {
          "deprecated": false,
          "description": "Clean expired friend requests when the cron expression is triggered if deleteExpiredRequestsWhenCronTriggered is true",
          "global": false,
          "mutable": false,
          "sensitive": false,
          "type": "string"
        },
        "friendRequestExpireAfterSeconds": {
          "deprecated": false,
          "description": "A friend request will become expired after the specified time has elapsed",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "maxContentLength": {
          "deprecated": false,
          "description": "The maximum allowed length for the text of a friend request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        },
        "maxResponseReasonLength": {
          "deprecated": false,
          "description": "The maximum allowed length for the response reason of a friend request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "int"
        }
      },
      "maxIntroLength": {
        "deprecated": false,
        "description": "The maximum allowed length for a user's intro",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxNameLength": {
        "deprecated": false,
        "description": "The maximum allowed length for a user's name",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxPasswordLength": {
        "deprecated": false,
        "description": "The maximum allowed length for a user's password",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "maxProfilePictureLength": {
        "deprecated": false,
        "description": "The maximum allowed length for a user's profile picture",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "minPasswordLength": {
        "deprecated": false,
        "description": "The minimum allowed length for a user's password. If 0, it means the password can be an empty string \"\". If -1, it means the password can be null",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "int"
      },
      "respondOfflineIfInvisible": {
        "deprecated": false,
        "description": "Whether to respond to client with the OFFLINE status if a user is in INVISIBLE status",
        "global": true,
        "mutable": true,
        "sensitive": false,
        "type": "boolean"
      },
      "settings": {
        "allowedSettings": {
          "deprecated": false,
          "description": "The list of allowed settings",
          "elementType": "im.turms.server.common.infra.property.env.service.business.common.setting.CustomSettingProperties",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "java.util.List"
        },
        "ignoreUnknownSettingsOnDelete": {
          "deprecated": false,
          "description": "Whether to ignore unknown settings on delete. If false, the server will throw if the request specifies an unknown setting. If true, the server will ignore the unknown settings, and continue to process the request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        },
        "ignoreUnknownSettingsOnUpsert": {
          "deprecated": false,
          "description": "Whether to ignore unknown settings on upsert. If false, the server will throw if the request specifies an unknown setting. If true, the server will ignore the unknown settings, and continue to process the request",
          "global": true,
          "mutable": true,
          "sensitive": false,
          "type": "boolean"
        }
      }
    }
  },
  "shutdown": {
    "jobTimeoutMillis": {
      "deprecated": false,
      "description": "Wait for a job 2 minutes at most for extreme cases by default. Though it is a long time, graceful shutdown is usually better than force shutdown.",
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "long"
    }
  },
  "userStatus": {
    "cacheUserSessionsStatus": {
      "deprecated": false,
      "description": "Whether to cache the user sessions status",
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "boolean"
    },
    "userSessionsStatusCacheMaxSize": {
      "deprecated": false,
      "description": "The maximum size of the cache of users' sessions status",
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "int"
    },
    "userSessionsStatusExpireAfter": {
      "deprecated": false,
      "description": "The life duration of each remote user's sessions status in the cache. Note that the cache will make the presentation of users' sessions status inconsistent during the time",
      "global": false,
      "mutable": false,
      "sensitive": false,
      "type": "int"
    }
  }
}