/*
 * Copyright (C) 2019 The Turms Project
 * https://github.com/turms-im/turms
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package im.turms.server.common.domain.common.po;

import java.util.Map;

/**
 * @author James Chen
 * @implNote We use interface instead of abstract class to make the classe hierarchy flat, and not
 *           to break the constructor generated by lombok, so we don't need to maintain it manually.
 */
public interface Customizable {

    String USER_DEFINED_ATTRIBUTES_FIELD_NAME = "userDefinedAttributes";

    /**
     * @implNote 1. The user-defined attributes will be flattened, and the top-level keys/fields
     *           will be prefixed with "_" to be stored in MongoDB. For example, if the user-defined
     *           attributes are {"a": 1, "b": 2}, the fields of "_a" with int value 1 and "_b" with
     *           int value 2 will be stored in MongoDB.
     *           <p>
     *           2. We name it "attributes" instead of "properties" because we have used
     *           "properties" to refer to custom settings.
     *           <p>
     *           3. We name it "userDefined" instead of "custom" because we have used
     *           "customAttributes" to refer to the feature that allows developers to implement
     *           their own logic, so we use different words to distinguish them.
     */
    Map<String, Object> getUserDefinedAttributes();

}