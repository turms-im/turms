// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: model/user/user_relationship.proto
// Protobuf C++ Version: 5.29.1

#include "turms/client/model/proto/model/user/user_relationship.pb.h"

#include <algorithm>
#include <type_traits>

#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/wire_format_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {

inline constexpr UserRelationship::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      custom_attributes_{},
      name_(&::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
      note_(&::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
      owner_id_{::int64_t{0}},
      related_user_id_{::int64_t{0}},
      block_date_{::int64_t{0}},
      group_index_{::int64_t{0}},
      establishment_date_{::int64_t{0}} {
}

template <typename>
PROTOBUF_CONSTEXPR UserRelationship::UserRelationship(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UserRelationshipDefaultTypeInternal {
    PROTOBUF_CONSTEXPR UserRelationshipDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {
    }
    ~UserRelationshipDefaultTypeInternal() {
    }
    union {
        UserRelationship _instance;
    };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    UserRelationshipDefaultTypeInternal _UserRelationship_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class UserRelationship::_Internal {
   public:
    using HasBits = decltype(std::declval<UserRelationship>()._impl_._has_bits_);
    static constexpr ::int32_t kHasBitsOffset =
        8 * PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_._has_bits_);
};

void UserRelationship::clear_custom_attributes() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.custom_attributes_.Clear();
}
UserRelationship::UserRelationship(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
    SharedCtor(arena);
    // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.UserRelationship)
}
inline PROTOBUF_NDEBUG_INLINE UserRelationship::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena,
    const Impl_& from,
    const ::turms::client::model::proto::UserRelationship& from_msg)
    : _has_bits_{from._has_bits_},
      _cached_size_{0},
      custom_attributes_{visibility, arena, from.custom_attributes_},
      name_(arena, from.name_),
      note_(arena, from.note_) {
}

UserRelationship::UserRelationship(::google::protobuf::Arena* arena, const UserRelationship& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
    UserRelationship* const _this = this;
    (void)_this;
    _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
    new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
    ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, owner_id_),
             reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, owner_id_),
             offsetof(Impl_, establishment_date_) - offsetof(Impl_, owner_id_) +
                 sizeof(Impl_::establishment_date_));

    // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.UserRelationship)
}
inline PROTOBUF_NDEBUG_INLINE UserRelationship::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena)
    : _cached_size_{0},
      custom_attributes_{visibility, arena},
      name_(arena),
      note_(arena) {
}

inline void UserRelationship::SharedCtor(::_pb::Arena* arena) {
    new (&_impl_) Impl_(internal_visibility(), arena);
    ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, owner_id_),
             0,
             offsetof(Impl_, establishment_date_) - offsetof(Impl_, owner_id_) +
                 sizeof(Impl_::establishment_date_));
}
UserRelationship::~UserRelationship() {
    // @@protoc_insertion_point(destructor:turms.client.model.proto.UserRelationship)
    SharedDtor(*this);
}
inline void UserRelationship::SharedDtor(MessageLite& self) {
    UserRelationship& this_ = static_cast<UserRelationship&>(self);
    this_._internal_metadata_.Delete<std::string>();
    ABSL_DCHECK(this_.GetArena() == nullptr);
    this_._impl_.name_.Destroy();
    this_._impl_.note_.Destroy();
    this_._impl_.~Impl_();
}

inline void* UserRelationship::PlacementNew_(const void*,
                                             void* mem,
                                             ::google::protobuf::Arena* arena) {
    return ::new (mem) UserRelationship(arena);
}
constexpr auto UserRelationship::InternalNewImpl_() {
    constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
        PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.custom_attributes_) +
            decltype(UserRelationship::_impl_.custom_attributes_)::InternalGetArenaOffset(
                ::google::protobuf::MessageLite::internal_visibility()),
    });
    if (arena_bits.has_value()) {
        return ::google::protobuf::internal::MessageCreator::CopyInit(
            sizeof(UserRelationship), alignof(UserRelationship), *arena_bits);
    } else {
        return ::google::protobuf::internal::MessageCreator(
            &UserRelationship::PlacementNew_, sizeof(UserRelationship), alignof(UserRelationship));
    }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<42> UserRelationship::_class_data_ = {
    {
        &_UserRelationship_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &UserRelationship::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<UserRelationship>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &UserRelationship::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<UserRelationship>(),
        &UserRelationship::ByteSizeLong,
        &UserRelationship::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_._cached_size_),
        true,
    },
    "turms.client.model.proto.UserRelationship",
};
const ::google::protobuf::internal::ClassData* UserRelationship::GetClassData() const {
    return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<4, 8, 1, 66, 2>
    UserRelationship::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_._has_bits_),
            0,  // no _extensions_
            15,
            120,  // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294950784,  // skipmap
            offsetof(decltype(_table_), field_entries),
            8,  // num_field_entries
            1,  // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            _class_data_.base(),
            nullptr,                                // post_loop_handler
            ::_pbi::TcParser::GenericFallbackLite,  // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UserRelationship>(),  // to_prefetch
#endif  // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // optional int64 owner_id = 1;
            {::_pbi::TcParser::FastV64S1,
             {8, 2, 0, PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.owner_id_)}},
            // optional int64 related_user_id = 2;
            {::_pbi::TcParser::FastV64S1,
             {16, 3, 0, PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.related_user_id_)}},
            // optional int64 block_date = 3;
            {::_pbi::TcParser::FastV64S1,
             {24, 4, 0, PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.block_date_)}},
            // optional int64 group_index = 4;
            {::_pbi::TcParser::FastV64S1,
             {32, 5, 0, PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.group_index_)}},
            // optional int64 establishment_date = 5;
            {::_pbi::TcParser::FastV64S1,
             {40, 6, 0, PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.establishment_date_)}},
            // optional string name = 6;
            {::_pbi::TcParser::FastUS1,
             {50, 0, 0, PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.name_)}},
            // optional string note = 7;
            {::_pbi::TcParser::FastUS1,
             {58, 1, 0, PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.note_)}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
            // repeated .turms.client.model.proto.Value custom_attributes = 15;
            {::_pbi::TcParser::FastMtR1,
             {122, 63, 0, PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.custom_attributes_)}},
        }},
        {{65535, 65535}},
        {{
            // optional int64 owner_id = 1;
            {PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.owner_id_),
             _Internal::kHasBitsOffset + 2,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional int64 related_user_id = 2;
            {PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.related_user_id_),
             _Internal::kHasBitsOffset + 3,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional int64 block_date = 3;
            {PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.block_date_),
             _Internal::kHasBitsOffset + 4,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional int64 group_index = 4;
            {PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.group_index_),
             _Internal::kHasBitsOffset + 5,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional int64 establishment_date = 5;
            {PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.establishment_date_),
             _Internal::kHasBitsOffset + 6,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional string name = 6;
            {PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.name_),
             _Internal::kHasBitsOffset + 0,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // optional string note = 7;
            {PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.note_),
             _Internal::kHasBitsOffset + 1,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // repeated .turms.client.model.proto.Value custom_attributes = 15;
            {PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.custom_attributes_),
             -1,
             0,
             (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::Value>()},
        }},
        {{"\51\0\0\0\0\0\4\4\0\0\0\0\0\0\0\0"
          "turms.client.model.proto.UserRelationship"
          "name"
          "note"}},
    };

PROTOBUF_NOINLINE void UserRelationship::Clear() {
    // @@protoc_insertion_point(message_clear_start:turms.client.model.proto.UserRelationship)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.custom_attributes_.Clear();
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
        if (cached_has_bits & 0x00000001u) {
            _impl_.name_.ClearNonDefaultToEmpty();
        }
        if (cached_has_bits & 0x00000002u) {
            _impl_.note_.ClearNonDefaultToEmpty();
        }
    }
    if (cached_has_bits & 0x0000007cu) {
        ::memset(&_impl_.owner_id_,
                 0,
                 static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.establishment_date_) -
                                       reinterpret_cast<char*>(&_impl_.owner_id_)) +
                     sizeof(_impl_.establishment_date_));
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* UserRelationship::_InternalSerialize(
    const MessageLite& base,
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) {
    const UserRelationship& this_ = static_cast<const UserRelationship&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* UserRelationship::_InternalSerialize(
    ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    const UserRelationship& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
        // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.UserRelationship)
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = this_._impl_._has_bits_[0];
    // optional int64 owner_id = 1;
    if (cached_has_bits & 0x00000004u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
            stream, this_._internal_owner_id(), target);
    }

    // optional int64 related_user_id = 2;
    if (cached_has_bits & 0x00000008u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
            stream, this_._internal_related_user_id(), target);
    }

    // optional int64 block_date = 3;
    if (cached_has_bits & 0x00000010u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
            stream, this_._internal_block_date(), target);
    }

    // optional int64 group_index = 4;
    if (cached_has_bits & 0x00000020u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
            stream, this_._internal_group_index(), target);
    }

    // optional int64 establishment_date = 5;
    if (cached_has_bits & 0x00000040u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
            stream, this_._internal_establishment_date(), target);
    }

    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
        const std::string& _s = this_._internal_name();
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            _s.data(),
            static_cast<int>(_s.length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "turms.client.model.proto.UserRelationship.name");
        target = stream->WriteStringMaybeAliased(6, _s, target);
    }

    // optional string note = 7;
    if (cached_has_bits & 0x00000002u) {
        const std::string& _s = this_._internal_note();
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            _s.data(),
            static_cast<int>(_s.length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "turms.client.model.proto.UserRelationship.note");
        target = stream->WriteStringMaybeAliased(7, _s, target);
    }

    // repeated .turms.client.model.proto.Value custom_attributes = 15;
    for (unsigned i = 0, n = static_cast<unsigned>(this_._internal_custom_attributes_size()); i < n;
         i++) {
        const auto& repfield = this_._internal_custom_attributes().Get(i);
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            15, repfield, repfield.GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
        target = stream->WriteRaw(
            this_._internal_metadata_
                .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                .data(),
            static_cast<int>(
                this_._internal_metadata_
                    .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                    .size()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.UserRelationship)
    return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UserRelationship::ByteSizeLong(const MessageLite& base) {
    const UserRelationship& this_ = static_cast<const UserRelationship&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UserRelationship::ByteSizeLong() const {
    const UserRelationship& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
        // @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.UserRelationship)
    ::size_t total_size = 0;

    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::_pbi::Prefetch5LinesFrom7Lines(&this_);
    {
        // repeated .turms.client.model.proto.Value custom_attributes = 15;
        {
            total_size += 1UL * this_._internal_custom_attributes_size();
            for (const auto& msg : this_._internal_custom_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
            }
        }
    }
    cached_has_bits = this_._impl_._has_bits_[0];
    if (cached_has_bits & 0x0000007fu) {
        // optional string name = 6;
        if (cached_has_bits & 0x00000001u) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this_._internal_name());
        }
        // optional string note = 7;
        if (cached_has_bits & 0x00000002u) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this_._internal_note());
        }
        // optional int64 owner_id = 1;
        if (cached_has_bits & 0x00000004u) {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_owner_id());
        }
        // optional int64 related_user_id = 2;
        if (cached_has_bits & 0x00000008u) {
            total_size +=
                ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_related_user_id());
        }
        // optional int64 block_date = 3;
        if (cached_has_bits & 0x00000010u) {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_block_date());
        }
        // optional int64 group_index = 4;
        if (cached_has_bits & 0x00000020u) {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_group_index());
        }
        // optional int64 establishment_date = 5;
        if (cached_has_bits & 0x00000040u) {
            total_size +=
                ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_establishment_date());
        }
    }
    if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
        total_size += this_._internal_metadata_
                          .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                          .size();
    }
    this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
    return total_size;
}

void UserRelationship::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                 const ::google::protobuf::MessageLite& from_msg) {
    auto* const _this = static_cast<UserRelationship*>(&to_msg);
    auto& from = static_cast<const UserRelationship&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.UserRelationship)
    ABSL_DCHECK_NE(&from, _this);
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    _this->_internal_mutable_custom_attributes()->MergeFrom(from._internal_custom_attributes());
    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x0000007fu) {
        if (cached_has_bits & 0x00000001u) {
            _this->_internal_set_name(from._internal_name());
        }
        if (cached_has_bits & 0x00000002u) {
            _this->_internal_set_note(from._internal_note());
        }
        if (cached_has_bits & 0x00000004u) {
            _this->_impl_.owner_id_ = from._impl_.owner_id_;
        }
        if (cached_has_bits & 0x00000008u) {
            _this->_impl_.related_user_id_ = from._impl_.related_user_id_;
        }
        if (cached_has_bits & 0x00000010u) {
            _this->_impl_.block_date_ = from._impl_.block_date_;
        }
        if (cached_has_bits & 0x00000020u) {
            _this->_impl_.group_index_ = from._impl_.group_index_;
        }
        if (cached_has_bits & 0x00000040u) {
            _this->_impl_.establishment_date_ = from._impl_.establishment_date_;
        }
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
    _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserRelationship::CopyFrom(const UserRelationship& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.UserRelationship)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void UserRelationship::InternalSwap(UserRelationship* PROTOBUF_RESTRICT other) {
    using std::swap;
    auto* arena = GetArena();
    ABSL_DCHECK_EQ(arena, other->GetArena());
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    _impl_.custom_attributes_.InternalSwap(&other->_impl_.custom_attributes_);
    ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
    ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.note_, &other->_impl_.note_, arena);
    ::google::protobuf::internal::memswap<
        PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.establishment_date_) +
        sizeof(UserRelationship::_impl_.establishment_date_) -
        PROTOBUF_FIELD_OFFSET(UserRelationship, _impl_.owner_id_)>(
        reinterpret_cast<char*>(&_impl_.owner_id_),
        reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"