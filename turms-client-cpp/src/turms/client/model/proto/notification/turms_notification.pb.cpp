// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: notification/turms_notification.proto
// Protobuf C++ Version: 5.27.2

#include "turms/client/model/proto/notification/turms_notification.pb.h"

#include <algorithm>
#include <type_traits>

#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/wire_format_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {

inline constexpr TurmsNotification_Data::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : kind_{},
      _cached_size_{0},
      _oneof_case_{} {
}

template <typename>
PROTOBUF_CONSTEXPR TurmsNotification_Data::TurmsNotification_Data(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {
}
struct TurmsNotification_DataDefaultTypeInternal {
    PROTOBUF_CONSTEXPR TurmsNotification_DataDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {
    }
    ~TurmsNotification_DataDefaultTypeInternal() {
    }
    union {
        TurmsNotification_Data _instance;
    };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    TurmsNotification_DataDefaultTypeInternal _TurmsNotification_Data_default_instance_;

inline constexpr TurmsNotification::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      custom_attributes_{},
      reason_(&::google::protobuf::internal::fixed_address_empty_string,
              ::_pbi::ConstantInitialized()),
      data_{nullptr},
      relayed_request_{nullptr},
      timestamp_{::int64_t{0}},
      request_id_{::int64_t{0}},
      code_{0},
      close_status_{0},
      requester_id_{::int64_t{0}} {
}

template <typename>
PROTOBUF_CONSTEXPR TurmsNotification::TurmsNotification(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {
}
struct TurmsNotificationDefaultTypeInternal {
    PROTOBUF_CONSTEXPR TurmsNotificationDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {
    }
    ~TurmsNotificationDefaultTypeInternal() {
    }
    union {
        TurmsNotification _instance;
    };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    TurmsNotificationDefaultTypeInternal _TurmsNotification_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class TurmsNotification_Data::_Internal {
   public:
    static constexpr ::int32_t kOneofCaseOffset = PROTOBUF_FIELD_OFFSET(
        ::turms::client::model::proto::TurmsNotification_Data, _impl_._oneof_case_);
};

void TurmsNotification_Data::set_allocated_longs_with_version(
    ::turms::client::model::proto::LongsWithVersion* longs_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (longs_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(longs_with_version)->GetArena();
        if (message_arena != submessage_arena) {
            longs_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, longs_with_version, submessage_arena);
        }
        set_has_longs_with_version();
        _impl_.kind_.longs_with_version_ = longs_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.longs_with_version)
}
void TurmsNotification_Data::clear_longs_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kLongsWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.longs_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.longs_with_version_ != nullptr) {
                _impl_.kind_.longs_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_strings_with_version(
    ::turms::client::model::proto::StringsWithVersion* strings_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (strings_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(strings_with_version)->GetArena();
        if (message_arena != submessage_arena) {
            strings_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, strings_with_version, submessage_arena);
        }
        set_has_strings_with_version();
        _impl_.kind_.strings_with_version_ = strings_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.strings_with_version)
}
void TurmsNotification_Data::clear_strings_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kStringsWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.strings_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.strings_with_version_ != nullptr) {
                _impl_.kind_.strings_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_conversations(
    ::turms::client::model::proto::Conversations* conversations) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (conversations) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(conversations)->GetArena();
        if (message_arena != submessage_arena) {
            conversations = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, conversations, submessage_arena);
        }
        set_has_conversations();
        _impl_.kind_.conversations_ = conversations;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.conversations)
}
void TurmsNotification_Data::clear_conversations() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kConversations) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.conversations_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.conversations_ != nullptr) {
                _impl_.kind_.conversations_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_messages(
    ::turms::client::model::proto::Messages* messages) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (messages) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(messages)->GetArena();
        if (message_arena != submessage_arena) {
            messages = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, messages, submessage_arena);
        }
        set_has_messages();
        _impl_.kind_.messages_ = messages;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.messages)
}
void TurmsNotification_Data::clear_messages() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kMessages) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.messages_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.messages_ != nullptr) {
                _impl_.kind_.messages_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_messages_with_total_list(
    ::turms::client::model::proto::MessagesWithTotalList* messages_with_total_list) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (messages_with_total_list) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(messages_with_total_list)
                ->GetArena();
        if (message_arena != submessage_arena) {
            messages_with_total_list = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, messages_with_total_list, submessage_arena);
        }
        set_has_messages_with_total_list();
        _impl_.kind_.messages_with_total_list_ = messages_with_total_list;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.messages_with_total_list)
}
void TurmsNotification_Data::clear_messages_with_total_list() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kMessagesWithTotalList) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.messages_with_total_list_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.messages_with_total_list_ != nullptr) {
                _impl_.kind_.messages_with_total_list_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_user_session(
    ::turms::client::model::proto::UserSession* user_session) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (user_session) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(user_session)->GetArena();
        if (message_arena != submessage_arena) {
            user_session = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, user_session, submessage_arena);
        }
        set_has_user_session();
        _impl_.kind_.user_session_ = user_session;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_session)
}
void TurmsNotification_Data::clear_user_session() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUserSession) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.user_session_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.user_session_ != nullptr) {
                _impl_.kind_.user_session_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_user_infos_with_version(
    ::turms::client::model::proto::UserInfosWithVersion* user_infos_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (user_infos_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(user_infos_with_version)->GetArena();
        if (message_arena != submessage_arena) {
            user_infos_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, user_infos_with_version, submessage_arena);
        }
        set_has_user_infos_with_version();
        _impl_.kind_.user_infos_with_version_ = user_infos_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_infos_with_version)
}
void TurmsNotification_Data::clear_user_infos_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUserInfosWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.user_infos_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.user_infos_with_version_ != nullptr) {
                _impl_.kind_.user_infos_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_user_online_statuses(
    ::turms::client::model::proto::UserOnlineStatuses* user_online_statuses) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (user_online_statuses) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(user_online_statuses)->GetArena();
        if (message_arena != submessage_arena) {
            user_online_statuses = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, user_online_statuses, submessage_arena);
        }
        set_has_user_online_statuses();
        _impl_.kind_.user_online_statuses_ = user_online_statuses;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_online_statuses)
}
void TurmsNotification_Data::clear_user_online_statuses() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUserOnlineStatuses) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.user_online_statuses_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.user_online_statuses_ != nullptr) {
                _impl_.kind_.user_online_statuses_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_user_friend_requests_with_version(
    ::turms::client::model::proto::UserFriendRequestsWithVersion*
        user_friend_requests_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (user_friend_requests_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(user_friend_requests_with_version)
                ->GetArena();
        if (message_arena != submessage_arena) {
            user_friend_requests_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, user_friend_requests_with_version, submessage_arena);
        }
        set_has_user_friend_requests_with_version();
        _impl_.kind_.user_friend_requests_with_version_ = user_friend_requests_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_friend_requests_with_version)
}
void TurmsNotification_Data::clear_user_friend_requests_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUserFriendRequestsWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.user_friend_requests_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.user_friend_requests_with_version_ != nullptr) {
                _impl_.kind_.user_friend_requests_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_user_relationship_groups_with_version(
    ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
        user_relationship_groups_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (user_relationship_groups_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(
                user_relationship_groups_with_version)
                ->GetArena();
        if (message_arena != submessage_arena) {
            user_relationship_groups_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, user_relationship_groups_with_version, submessage_arena);
        }
        set_has_user_relationship_groups_with_version();
        _impl_.kind_.user_relationship_groups_with_version_ = user_relationship_groups_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_relationship_groups_with_version)
}
void TurmsNotification_Data::clear_user_relationship_groups_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUserRelationshipGroupsWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.user_relationship_groups_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.user_relationship_groups_with_version_ != nullptr) {
                _impl_.kind_.user_relationship_groups_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_user_relationships_with_version(
    ::turms::client::model::proto::UserRelationshipsWithVersion* user_relationships_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (user_relationships_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(user_relationships_with_version)
                ->GetArena();
        if (message_arena != submessage_arena) {
            user_relationships_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, user_relationships_with_version, submessage_arena);
        }
        set_has_user_relationships_with_version();
        _impl_.kind_.user_relationships_with_version_ = user_relationships_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_relationships_with_version)
}
void TurmsNotification_Data::clear_user_relationships_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUserRelationshipsWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.user_relationships_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.user_relationships_with_version_ != nullptr) {
                _impl_.kind_.user_relationships_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_nearby_users(
    ::turms::client::model::proto::NearbyUsers* nearby_users) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (nearby_users) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(nearby_users)->GetArena();
        if (message_arena != submessage_arena) {
            nearby_users = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, nearby_users, submessage_arena);
        }
        set_has_nearby_users();
        _impl_.kind_.nearby_users_ = nearby_users;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.nearby_users)
}
void TurmsNotification_Data::clear_nearby_users() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kNearbyUsers) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.nearby_users_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.nearby_users_ != nullptr) {
                _impl_.kind_.nearby_users_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_group_invitations_with_version(
    ::turms::client::model::proto::GroupInvitationsWithVersion* group_invitations_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (group_invitations_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(group_invitations_with_version)
                ->GetArena();
        if (message_arena != submessage_arena) {
            group_invitations_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, group_invitations_with_version, submessage_arena);
        }
        set_has_group_invitations_with_version();
        _impl_.kind_.group_invitations_with_version_ = group_invitations_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_invitations_with_version)
}
void TurmsNotification_Data::clear_group_invitations_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kGroupInvitationsWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.group_invitations_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.group_invitations_with_version_ != nullptr) {
                _impl_.kind_.group_invitations_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_group_join_question_answer_result(
    ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
        group_join_question_answer_result) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (group_join_question_answer_result) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(group_join_question_answer_result)
                ->GetArena();
        if (message_arena != submessage_arena) {
            group_join_question_answer_result = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, group_join_question_answer_result, submessage_arena);
        }
        set_has_group_join_question_answer_result();
        _impl_.kind_.group_join_question_answer_result_ = group_join_question_answer_result;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_join_question_answer_result)
}
void TurmsNotification_Data::clear_group_join_question_answer_result() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kGroupJoinQuestionAnswerResult) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.group_join_question_answer_result_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.group_join_question_answer_result_ != nullptr) {
                _impl_.kind_.group_join_question_answer_result_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_group_join_requests_with_version(
    ::turms::client::model::proto::GroupJoinRequestsWithVersion* group_join_requests_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (group_join_requests_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(group_join_requests_with_version)
                ->GetArena();
        if (message_arena != submessage_arena) {
            group_join_requests_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, group_join_requests_with_version, submessage_arena);
        }
        set_has_group_join_requests_with_version();
        _impl_.kind_.group_join_requests_with_version_ = group_join_requests_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_join_requests_with_version)
}
void TurmsNotification_Data::clear_group_join_requests_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kGroupJoinRequestsWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.group_join_requests_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.group_join_requests_with_version_ != nullptr) {
                _impl_.kind_.group_join_requests_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_group_join_questions_with_version(
    ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
        group_join_questions_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (group_join_questions_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(group_join_questions_with_version)
                ->GetArena();
        if (message_arena != submessage_arena) {
            group_join_questions_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, group_join_questions_with_version, submessage_arena);
        }
        set_has_group_join_questions_with_version();
        _impl_.kind_.group_join_questions_with_version_ = group_join_questions_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_join_questions_with_version)
}
void TurmsNotification_Data::clear_group_join_questions_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kGroupJoinQuestionsWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.group_join_questions_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.group_join_questions_with_version_ != nullptr) {
                _impl_.kind_.group_join_questions_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_group_members_with_version(
    ::turms::client::model::proto::GroupMembersWithVersion* group_members_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (group_members_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(group_members_with_version)
                ->GetArena();
        if (message_arena != submessage_arena) {
            group_members_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, group_members_with_version, submessage_arena);
        }
        set_has_group_members_with_version();
        _impl_.kind_.group_members_with_version_ = group_members_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_members_with_version)
}
void TurmsNotification_Data::clear_group_members_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kGroupMembersWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.group_members_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.group_members_with_version_ != nullptr) {
                _impl_.kind_.group_members_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_groups_with_version(
    ::turms::client::model::proto::GroupsWithVersion* groups_with_version) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (groups_with_version) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(groups_with_version)->GetArena();
        if (message_arena != submessage_arena) {
            groups_with_version = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, groups_with_version, submessage_arena);
        }
        set_has_groups_with_version();
        _impl_.kind_.groups_with_version_ = groups_with_version;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.groups_with_version)
}
void TurmsNotification_Data::clear_groups_with_version() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kGroupsWithVersion) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.groups_with_version_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.groups_with_version_ != nullptr) {
                _impl_.kind_.groups_with_version_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_meetings(
    ::turms::client::model::proto::Meetings* meetings) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (meetings) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(meetings)->GetArena();
        if (message_arena != submessage_arena) {
            meetings = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, meetings, submessage_arena);
        }
        set_has_meetings();
        _impl_.kind_.meetings_ = meetings;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.meetings)
}
void TurmsNotification_Data::clear_meetings() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kMeetings) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.meetings_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.meetings_ != nullptr) {
                _impl_.kind_.meetings_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_storage_resource_infos(
    ::turms::client::model::proto::StorageResourceInfos* storage_resource_infos) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (storage_resource_infos) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(storage_resource_infos)->GetArena();
        if (message_arena != submessage_arena) {
            storage_resource_infos = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, storage_resource_infos, submessage_arena);
        }
        set_has_storage_resource_infos();
        _impl_.kind_.storage_resource_infos_ = storage_resource_infos;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.storage_resource_infos)
}
void TurmsNotification_Data::clear_storage_resource_infos() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kStorageResourceInfos) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.storage_resource_infos_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.storage_resource_infos_ != nullptr) {
                _impl_.kind_.storage_resource_infos_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_conversation_settings_list(
    ::turms::client::model::proto::ConversationSettingsList* conversation_settings_list) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (conversation_settings_list) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(conversation_settings_list)
                ->GetArena();
        if (message_arena != submessage_arena) {
            conversation_settings_list = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, conversation_settings_list, submessage_arena);
        }
        set_has_conversation_settings_list();
        _impl_.kind_.conversation_settings_list_ = conversation_settings_list;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.conversation_settings_list)
}
void TurmsNotification_Data::clear_conversation_settings_list() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kConversationSettingsList) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.conversation_settings_list_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.conversation_settings_list_ != nullptr) {
                _impl_.kind_.conversation_settings_list_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsNotification_Data::set_allocated_user_settings(
    ::turms::client::model::proto::UserSettings* user_settings) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (user_settings) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(user_settings)->GetArena();
        if (message_arena != submessage_arena) {
            user_settings = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, user_settings, submessage_arena);
        }
        set_has_user_settings();
        _impl_.kind_.user_settings_ = user_settings;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_settings)
}
void TurmsNotification_Data::clear_user_settings() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUserSettings) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.user_settings_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.user_settings_ != nullptr) {
                _impl_.kind_.user_settings_->Clear();
            }
        }
        clear_has_kind();
    }
}
TurmsNotification_Data::TurmsNotification_Data(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
    SharedCtor(arena);
    // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.TurmsNotification.Data)
}
inline PROTOBUF_NDEBUG_INLINE TurmsNotification_Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena,
    const Impl_& from,
    const ::turms::client::model::proto::TurmsNotification_Data& from_msg)
    : kind_{},
      _cached_size_{0},
      _oneof_case_{from._oneof_case_[0]} {
}

TurmsNotification_Data::TurmsNotification_Data(::google::protobuf::Arena* arena,
                                               const TurmsNotification_Data& from)
    : ::google::protobuf::MessageLite(arena) {
    TurmsNotification_Data* const _this = this;
    (void)_this;
    _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
    new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
    switch (kind_case()) {
        case KIND_NOT_SET:
            break;
        case kLong:
            _impl_.kind_.long__ = from._impl_.kind_.long__;
            break;
        case kString:
            new (&_impl_.kind_.string_) decltype(_impl_.kind_.string_){arena,
                                                                       from._impl_.kind_.string_};
            break;
        case kLongsWithVersion:
            _impl_.kind_.longs_with_version_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::LongsWithVersion>(
                arena, *from._impl_.kind_.longs_with_version_);
            break;
        case kStringsWithVersion:
            _impl_.kind_.strings_with_version_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::StringsWithVersion>(
                arena, *from._impl_.kind_.strings_with_version_);
            break;
        case kConversations:
            _impl_.kind_.conversations_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::Conversations>(arena,
                                                              *from._impl_.kind_.conversations_);
            break;
        case kMessages:
            _impl_.kind_.messages_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::Messages>(arena, *from._impl_.kind_.messages_);
            break;
        case kMessagesWithTotalList:
            _impl_.kind_.messages_with_total_list_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::MessagesWithTotalList>(
                arena, *from._impl_.kind_.messages_with_total_list_);
            break;
        case kUserSession:
            _impl_.kind_.user_session_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::UserSession>(arena,
                                                            *from._impl_.kind_.user_session_);
            break;
        case kUserInfosWithVersion:
            _impl_.kind_.user_infos_with_version_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::UserInfosWithVersion>(
                arena, *from._impl_.kind_.user_infos_with_version_);
            break;
        case kUserOnlineStatuses:
            _impl_.kind_.user_online_statuses_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::UserOnlineStatuses>(
                arena, *from._impl_.kind_.user_online_statuses_);
            break;
        case kUserFriendRequestsWithVersion:
            _impl_.kind_.user_friend_requests_with_version_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UserFriendRequestsWithVersion>(
                    arena, *from._impl_.kind_.user_friend_requests_with_version_);
            break;
        case kUserRelationshipGroupsWithVersion:
            _impl_.kind_.user_relationship_groups_with_version_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UserRelationshipGroupsWithVersion>(
                    arena, *from._impl_.kind_.user_relationship_groups_with_version_);
            break;
        case kUserRelationshipsWithVersion:
            _impl_.kind_.user_relationships_with_version_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UserRelationshipsWithVersion>(
                    arena, *from._impl_.kind_.user_relationships_with_version_);
            break;
        case kNearbyUsers:
            _impl_.kind_.nearby_users_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::NearbyUsers>(arena,
                                                            *from._impl_.kind_.nearby_users_);
            break;
        case kGroupInvitationsWithVersion:
            _impl_.kind_.group_invitations_with_version_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::GroupInvitationsWithVersion>(
                    arena, *from._impl_.kind_.group_invitations_with_version_);
            break;
        case kGroupJoinQuestionAnswerResult:
            _impl_.kind_.group_join_question_answer_result_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::GroupJoinQuestionsAnswerResult>(
                    arena, *from._impl_.kind_.group_join_question_answer_result_);
            break;
        case kGroupJoinRequestsWithVersion:
            _impl_.kind_.group_join_requests_with_version_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::GroupJoinRequestsWithVersion>(
                    arena, *from._impl_.kind_.group_join_requests_with_version_);
            break;
        case kGroupJoinQuestionsWithVersion:
            _impl_.kind_.group_join_questions_with_version_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::GroupJoinQuestionsWithVersion>(
                    arena, *from._impl_.kind_.group_join_questions_with_version_);
            break;
        case kGroupMembersWithVersion:
            _impl_.kind_.group_members_with_version_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::GroupMembersWithVersion>(
                    arena, *from._impl_.kind_.group_members_with_version_);
            break;
        case kGroupsWithVersion:
            _impl_.kind_.groups_with_version_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::GroupsWithVersion>(
                arena, *from._impl_.kind_.groups_with_version_);
            break;
        case kMeetings:
            _impl_.kind_.meetings_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::Meetings>(arena, *from._impl_.kind_.meetings_);
            break;
        case kStorageResourceInfos:
            _impl_.kind_.storage_resource_infos_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::StorageResourceInfos>(
                arena, *from._impl_.kind_.storage_resource_infos_);
            break;
        case kConversationSettingsList:
            _impl_.kind_.conversation_settings_list_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::ConversationSettingsList>(
                    arena, *from._impl_.kind_.conversation_settings_list_);
            break;
        case kUserSettings:
            _impl_.kind_.user_settings_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::UserSettings>(arena,
                                                             *from._impl_.kind_.user_settings_);
            break;
    }

    // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.TurmsNotification.Data)
}
inline PROTOBUF_NDEBUG_INLINE TurmsNotification_Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena)
    : kind_{},
      _cached_size_{0},
      _oneof_case_{} {
}

inline void TurmsNotification_Data::SharedCtor(::_pb::Arena* arena) {
    new (&_impl_) Impl_(internal_visibility(), arena);
}
TurmsNotification_Data::~TurmsNotification_Data() {
    // @@protoc_insertion_point(destructor:turms.client.model.proto.TurmsNotification.Data)
    _internal_metadata_.Delete<std::string>();
    SharedDtor();
}
inline void TurmsNotification_Data::SharedDtor() {
    ABSL_DCHECK(GetArena() == nullptr);
    if (has_kind()) {
        clear_kind();
    }
    _impl_.~Impl_();
}

void TurmsNotification_Data::clear_kind() {
    // @@protoc_insertion_point(one_of_clear_start:turms.client.model.proto.TurmsNotification.Data)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    switch (kind_case()) {
        case kLong: {
            // No need to clear
            break;
        }
        case kString: {
            _impl_.kind_.string_.Destroy();
            break;
        }
        case kLongsWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.longs_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.longs_with_version_ != nullptr) {
                    _impl_.kind_.longs_with_version_->Clear();
                }
            }
            break;
        }
        case kStringsWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.strings_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.strings_with_version_ != nullptr) {
                    _impl_.kind_.strings_with_version_->Clear();
                }
            }
            break;
        }
        case kConversations: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.conversations_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.conversations_ != nullptr) {
                    _impl_.kind_.conversations_->Clear();
                }
            }
            break;
        }
        case kMessages: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.messages_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.messages_ != nullptr) {
                    _impl_.kind_.messages_->Clear();
                }
            }
            break;
        }
        case kMessagesWithTotalList: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.messages_with_total_list_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.messages_with_total_list_ != nullptr) {
                    _impl_.kind_.messages_with_total_list_->Clear();
                }
            }
            break;
        }
        case kUserSession: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.user_session_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.user_session_ != nullptr) {
                    _impl_.kind_.user_session_->Clear();
                }
            }
            break;
        }
        case kUserInfosWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.user_infos_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.user_infos_with_version_ != nullptr) {
                    _impl_.kind_.user_infos_with_version_->Clear();
                }
            }
            break;
        }
        case kUserOnlineStatuses: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.user_online_statuses_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.user_online_statuses_ != nullptr) {
                    _impl_.kind_.user_online_statuses_->Clear();
                }
            }
            break;
        }
        case kUserFriendRequestsWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.user_friend_requests_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.user_friend_requests_with_version_ != nullptr) {
                    _impl_.kind_.user_friend_requests_with_version_->Clear();
                }
            }
            break;
        }
        case kUserRelationshipGroupsWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.user_relationship_groups_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.user_relationship_groups_with_version_ != nullptr) {
                    _impl_.kind_.user_relationship_groups_with_version_->Clear();
                }
            }
            break;
        }
        case kUserRelationshipsWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.user_relationships_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.user_relationships_with_version_ != nullptr) {
                    _impl_.kind_.user_relationships_with_version_->Clear();
                }
            }
            break;
        }
        case kNearbyUsers: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.nearby_users_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.nearby_users_ != nullptr) {
                    _impl_.kind_.nearby_users_->Clear();
                }
            }
            break;
        }
        case kGroupInvitationsWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.group_invitations_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.group_invitations_with_version_ != nullptr) {
                    _impl_.kind_.group_invitations_with_version_->Clear();
                }
            }
            break;
        }
        case kGroupJoinQuestionAnswerResult: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.group_join_question_answer_result_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.group_join_question_answer_result_ != nullptr) {
                    _impl_.kind_.group_join_question_answer_result_->Clear();
                }
            }
            break;
        }
        case kGroupJoinRequestsWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.group_join_requests_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.group_join_requests_with_version_ != nullptr) {
                    _impl_.kind_.group_join_requests_with_version_->Clear();
                }
            }
            break;
        }
        case kGroupJoinQuestionsWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.group_join_questions_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.group_join_questions_with_version_ != nullptr) {
                    _impl_.kind_.group_join_questions_with_version_->Clear();
                }
            }
            break;
        }
        case kGroupMembersWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.group_members_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.group_members_with_version_ != nullptr) {
                    _impl_.kind_.group_members_with_version_->Clear();
                }
            }
            break;
        }
        case kGroupsWithVersion: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.groups_with_version_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.groups_with_version_ != nullptr) {
                    _impl_.kind_.groups_with_version_->Clear();
                }
            }
            break;
        }
        case kMeetings: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.meetings_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.meetings_ != nullptr) {
                    _impl_.kind_.meetings_->Clear();
                }
            }
            break;
        }
        case kStorageResourceInfos: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.storage_resource_infos_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.storage_resource_infos_ != nullptr) {
                    _impl_.kind_.storage_resource_infos_->Clear();
                }
            }
            break;
        }
        case kConversationSettingsList: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.conversation_settings_list_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.conversation_settings_list_ != nullptr) {
                    _impl_.kind_.conversation_settings_list_->Clear();
                }
            }
            break;
        }
        case kUserSettings: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.user_settings_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.user_settings_ != nullptr) {
                    _impl_.kind_.user_settings_->Clear();
                }
            }
            break;
        }
        case KIND_NOT_SET: {
            break;
        }
    }
    _impl_._oneof_case_[0] = KIND_NOT_SET;
}

const ::google::protobuf::MessageLite::ClassData* TurmsNotification_Data::GetClassData() const {
    PROTOBUF_CONSTINIT static const ClassDataLite<48> _data_ = {
        {
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_._cached_size_),
            true,
        },
        "turms.client.model.proto.TurmsNotification.Data",
    };

    return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<0, 24, 22, 86, 17>
    TurmsNotification_Data::_table_ = {
        {
            0,  // no _has_bits_
            0,  // no _extensions_
            400,
            0,  // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4293918720,  // skipmap
            offsetof(decltype(_table_), field_entries),
            24,  // num_field_entries
            22,  // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            &_TurmsNotification_Data_default_instance_._instance,
            nullptr,                                // post_loop_handler
            ::_pbi::TcParser::GenericFallbackLite,  // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::TurmsNotification_Data>(),  // to_prefetch
#endif  // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
        }},
        {{40, 0, 1, 64510, 20, 200, 0, 1, 65534, 22, 400, 0, 1, 65534, 23, 65535, 65535}},
        {{
            // int64 long = 1;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.long__),
             _Internal::kOneofCaseOffset + 0,
             0,
             (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
            // string string = 2;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.string_),
             _Internal::kOneofCaseOffset + 0,
             0,
             (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // .turms.client.model.proto.LongsWithVersion longs_with_version = 3;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.longs_with_version_),
             _Internal::kOneofCaseOffset + 0,
             0,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.StringsWithVersion strings_with_version = 4;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.strings_with_version_),
             _Internal::kOneofCaseOffset + 0,
             1,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.Conversations conversations = 5;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.conversations_),
             _Internal::kOneofCaseOffset + 0,
             2,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.Messages messages = 6;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.messages_),
             _Internal::kOneofCaseOffset + 0,
             3,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.MessagesWithTotalList messages_with_total_list = 7;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.messages_with_total_list_),
             _Internal::kOneofCaseOffset + 0,
             4,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UserSession user_session = 8;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_session_),
             _Internal::kOneofCaseOffset + 0,
             5,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UserInfosWithVersion user_infos_with_version = 9;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_infos_with_version_),
             _Internal::kOneofCaseOffset + 0,
             6,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UserOnlineStatuses user_online_statuses = 10;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_online_statuses_),
             _Internal::kOneofCaseOffset + 0,
             7,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UserFriendRequestsWithVersion
            // user_friend_requests_with_version = 11;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data,
                                   _impl_.kind_.user_friend_requests_with_version_),
             _Internal::kOneofCaseOffset + 0,
             8,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UserRelationshipGroupsWithVersion
            // user_relationship_groups_with_version = 12;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data,
                                   _impl_.kind_.user_relationship_groups_with_version_),
             _Internal::kOneofCaseOffset + 0,
             9,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UserRelationshipsWithVersion
            // user_relationships_with_version = 13;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data,
                                   _impl_.kind_.user_relationships_with_version_),
             _Internal::kOneofCaseOffset + 0,
             10,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.NearbyUsers nearby_users = 14;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.nearby_users_),
             _Internal::kOneofCaseOffset + 0,
             11,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.GroupInvitationsWithVersion group_invitations_with_version
            // = 15;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data,
                                   _impl_.kind_.group_invitations_with_version_),
             _Internal::kOneofCaseOffset + 0,
             12,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.GroupJoinQuestionsAnswerResult
            // group_join_question_answer_result = 16;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data,
                                   _impl_.kind_.group_join_question_answer_result_),
             _Internal::kOneofCaseOffset + 0,
             13,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.GroupJoinRequestsWithVersion
            // group_join_requests_with_version = 17;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data,
                                   _impl_.kind_.group_join_requests_with_version_),
             _Internal::kOneofCaseOffset + 0,
             14,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.GroupJoinQuestionsWithVersion
            // group_join_questions_with_version = 18;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data,
                                   _impl_.kind_.group_join_questions_with_version_),
             _Internal::kOneofCaseOffset + 0,
             15,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.GroupMembersWithVersion group_members_with_version = 19;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data,
                                   _impl_.kind_.group_members_with_version_),
             _Internal::kOneofCaseOffset + 0,
             16,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.GroupsWithVersion groups_with_version = 20;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.groups_with_version_),
             _Internal::kOneofCaseOffset + 0,
             17,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.Meetings meetings = 40;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.meetings_),
             _Internal::kOneofCaseOffset + 0,
             18,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.StorageResourceInfos storage_resource_infos = 50;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.storage_resource_infos_),
             _Internal::kOneofCaseOffset + 0,
             19,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.ConversationSettingsList conversation_settings_list = 200;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data,
                                   _impl_.kind_.conversation_settings_list_),
             _Internal::kOneofCaseOffset + 0,
             20,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UserSettings user_settings = 400;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_settings_),
             _Internal::kOneofCaseOffset + 0,
             21,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::LongsWithVersion>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::StringsWithVersion>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::Conversations>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::Messages>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::MessagesWithTotalList>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserSession>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserInfosWithVersion>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserOnlineStatuses>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UserFriendRequestsWithVersion>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UserRelationshipGroupsWithVersion>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UserRelationshipsWithVersion>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::NearbyUsers>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::GroupInvitationsWithVersion>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::GroupJoinQuestionsAnswerResult>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::GroupJoinRequestsWithVersion>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::GroupJoinQuestionsWithVersion>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::GroupMembersWithVersion>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::GroupsWithVersion>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::Meetings>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::StorageResourceInfos>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::ConversationSettingsList>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserSettings>()},
        }},
        {{"\57\0\6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
          "turms.client.model.proto.TurmsNotification.Data"
          "string"}},
};

PROTOBUF_NOINLINE void TurmsNotification_Data::Clear() {
    // @@protoc_insertion_point(message_clear_start:turms.client.model.proto.TurmsNotification.Data)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    clear_kind();
    _internal_metadata_.Clear<std::string>();
}

::uint8_t* TurmsNotification_Data::_InternalSerialize(
    ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.TurmsNotification.Data)
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    switch (kind_case()) {
        case kLong: {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
                stream, this->_internal_long_(), target);
            break;
        }
        case kString: {
            const std::string& _s = this->_internal_string();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(),
                static_cast<int>(_s.length()),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "turms.client.model.proto.TurmsNotification.Data.string");
            target = stream->WriteStringMaybeAliased(2, _s, target);
            break;
        }
        case kLongsWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3,
                *_impl_.kind_.longs_with_version_,
                _impl_.kind_.longs_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kStringsWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4,
                *_impl_.kind_.strings_with_version_,
                _impl_.kind_.strings_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kConversations: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5,
                *_impl_.kind_.conversations_,
                _impl_.kind_.conversations_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kMessages: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6,
                *_impl_.kind_.messages_,
                _impl_.kind_.messages_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kMessagesWithTotalList: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7,
                *_impl_.kind_.messages_with_total_list_,
                _impl_.kind_.messages_with_total_list_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUserSession: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8,
                *_impl_.kind_.user_session_,
                _impl_.kind_.user_session_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUserInfosWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9,
                *_impl_.kind_.user_infos_with_version_,
                _impl_.kind_.user_infos_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUserOnlineStatuses: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10,
                *_impl_.kind_.user_online_statuses_,
                _impl_.kind_.user_online_statuses_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUserFriendRequestsWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11,
                *_impl_.kind_.user_friend_requests_with_version_,
                _impl_.kind_.user_friend_requests_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUserRelationshipGroupsWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12,
                *_impl_.kind_.user_relationship_groups_with_version_,
                _impl_.kind_.user_relationship_groups_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUserRelationshipsWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                13,
                *_impl_.kind_.user_relationships_with_version_,
                _impl_.kind_.user_relationships_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kNearbyUsers: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                14,
                *_impl_.kind_.nearby_users_,
                _impl_.kind_.nearby_users_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kGroupInvitationsWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15,
                *_impl_.kind_.group_invitations_with_version_,
                _impl_.kind_.group_invitations_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kGroupJoinQuestionAnswerResult: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                16,
                *_impl_.kind_.group_join_question_answer_result_,
                _impl_.kind_.group_join_question_answer_result_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kGroupJoinRequestsWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17,
                *_impl_.kind_.group_join_requests_with_version_,
                _impl_.kind_.group_join_requests_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kGroupJoinQuestionsWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                18,
                *_impl_.kind_.group_join_questions_with_version_,
                _impl_.kind_.group_join_questions_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kGroupMembersWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                19,
                *_impl_.kind_.group_members_with_version_,
                _impl_.kind_.group_members_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kGroupsWithVersion: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20,
                *_impl_.kind_.groups_with_version_,
                _impl_.kind_.groups_with_version_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kMeetings: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                40,
                *_impl_.kind_.meetings_,
                _impl_.kind_.meetings_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kStorageResourceInfos: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                50,
                *_impl_.kind_.storage_resource_infos_,
                _impl_.kind_.storage_resource_infos_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kConversationSettingsList: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                200,
                *_impl_.kind_.conversation_settings_list_,
                _impl_.kind_.conversation_settings_list_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUserSettings: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                400,
                *_impl_.kind_.user_settings_,
                _impl_.kind_.user_settings_->GetCachedSize(),
                target,
                stream);
            break;
        }
        default:
            break;
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = stream->WriteRaw(
            _internal_metadata_
                .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                .data(),
            static_cast<int>(
                _internal_metadata_
                    .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                    .size()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.TurmsNotification.Data)
    return target;
}

::size_t TurmsNotification_Data::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.TurmsNotification.Data)
    ::size_t total_size = 0;

    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    switch (kind_case()) {
        // int64 long = 1;
        case kLong: {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_long_());
            break;
        }
        // string string = 2;
        case kString: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->_internal_string());
            break;
        }
        // .turms.client.model.proto.LongsWithVersion longs_with_version = 3;
        case kLongsWithVersion: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.longs_with_version_);
            break;
        }
        // .turms.client.model.proto.StringsWithVersion strings_with_version = 4;
        case kStringsWithVersion: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.strings_with_version_);
            break;
        }
        // .turms.client.model.proto.Conversations conversations = 5;
        case kConversations: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.conversations_);
            break;
        }
        // .turms.client.model.proto.Messages messages = 6;
        case kMessages: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.messages_);
            break;
        }
        // .turms.client.model.proto.MessagesWithTotalList messages_with_total_list = 7;
        case kMessagesWithTotalList: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.messages_with_total_list_);
            break;
        }
        // .turms.client.model.proto.UserSession user_session = 8;
        case kUserSession: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.user_session_);
            break;
        }
        // .turms.client.model.proto.UserInfosWithVersion user_infos_with_version = 9;
        case kUserInfosWithVersion: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.user_infos_with_version_);
            break;
        }
        // .turms.client.model.proto.UserOnlineStatuses user_online_statuses = 10;
        case kUserOnlineStatuses: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.user_online_statuses_);
            break;
        }
        // .turms.client.model.proto.UserFriendRequestsWithVersion user_friend_requests_with_version
        // = 11;
        case kUserFriendRequestsWithVersion: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.user_friend_requests_with_version_);
            break;
        }
        // .turms.client.model.proto.UserRelationshipGroupsWithVersion
        // user_relationship_groups_with_version = 12;
        case kUserRelationshipGroupsWithVersion: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.user_relationship_groups_with_version_);
            break;
        }
        // .turms.client.model.proto.UserRelationshipsWithVersion user_relationships_with_version =
        // 13;
        case kUserRelationshipsWithVersion: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.user_relationships_with_version_);
            break;
        }
        // .turms.client.model.proto.NearbyUsers nearby_users = 14;
        case kNearbyUsers: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.nearby_users_);
            break;
        }
        // .turms.client.model.proto.GroupInvitationsWithVersion group_invitations_with_version =
        // 15;
        case kGroupInvitationsWithVersion: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.group_invitations_with_version_);
            break;
        }
        // .turms.client.model.proto.GroupJoinQuestionsAnswerResult
        // group_join_question_answer_result = 16;
        case kGroupJoinQuestionAnswerResult: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.group_join_question_answer_result_);
            break;
        }
        // .turms.client.model.proto.GroupJoinRequestsWithVersion group_join_requests_with_version =
        // 17;
        case kGroupJoinRequestsWithVersion: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.group_join_requests_with_version_);
            break;
        }
        // .turms.client.model.proto.GroupJoinQuestionsWithVersion group_join_questions_with_version
        // = 18;
        case kGroupJoinQuestionsWithVersion: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.group_join_questions_with_version_);
            break;
        }
        // .turms.client.model.proto.GroupMembersWithVersion group_members_with_version = 19;
        case kGroupMembersWithVersion: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.group_members_with_version_);
            break;
        }
        // .turms.client.model.proto.GroupsWithVersion groups_with_version = 20;
        case kGroupsWithVersion: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.groups_with_version_);
            break;
        }
        // .turms.client.model.proto.Meetings meetings = 40;
        case kMeetings: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.meetings_);
            break;
        }
        // .turms.client.model.proto.StorageResourceInfos storage_resource_infos = 50;
        case kStorageResourceInfos: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.storage_resource_infos_);
            break;
        }
        // .turms.client.model.proto.ConversationSettingsList conversation_settings_list = 200;
        case kConversationSettingsList: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.conversation_settings_list_);
            break;
        }
        // .turms.client.model.proto.UserSettings user_settings = 400;
        case kUserSettings: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.user_settings_);
            break;
        }
        case KIND_NOT_SET: {
            break;
        }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        total_size += _internal_metadata_
                          .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                          .size();
    }
    _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
    return total_size;
}

void TurmsNotification_Data::CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) {
    MergeFrom(*::_pbi::DownCast<const TurmsNotification_Data*>(&from));
}

void TurmsNotification_Data::MergeFrom(const TurmsNotification_Data& from) {
    TurmsNotification_Data* const _this = this;
    ::google::protobuf::Arena* arena = _this->GetArena();
    // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.TurmsNotification.Data)
    ABSL_DCHECK_NE(&from, _this);
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
        const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
        const bool oneof_needs_init = oneof_to_case != oneof_from_case;
        if (oneof_needs_init) {
            if (oneof_to_case != 0) {
                _this->clear_kind();
            }
            _this->_impl_._oneof_case_[0] = oneof_from_case;
        }

        switch (oneof_from_case) {
            case kLong: {
                _this->_impl_.kind_.long__ = from._impl_.kind_.long__;
                break;
            }
            case kString: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.string_.InitDefault();
                }
                _this->_impl_.kind_.string_.Set(from._internal_string(), arena);
                break;
            }
            case kLongsWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.longs_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::LongsWithVersion>(
                            arena, *from._impl_.kind_.longs_with_version_);
                } else {
                    _this->_impl_.kind_.longs_with_version_->MergeFrom(
                        from._internal_longs_with_version());
                }
                break;
            }
            case kStringsWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.strings_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::StringsWithVersion>(
                            arena, *from._impl_.kind_.strings_with_version_);
                } else {
                    _this->_impl_.kind_.strings_with_version_->MergeFrom(
                        from._internal_strings_with_version());
                }
                break;
            }
            case kConversations: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.conversations_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::Conversations>(
                            arena, *from._impl_.kind_.conversations_);
                } else {
                    _this->_impl_.kind_.conversations_->MergeFrom(from._internal_conversations());
                }
                break;
            }
            case kMessages: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.messages_ = ::google::protobuf::MessageLite::CopyConstruct<
                        ::turms::client::model::proto::Messages>(arena,
                                                                 *from._impl_.kind_.messages_);
                } else {
                    _this->_impl_.kind_.messages_->MergeFrom(from._internal_messages());
                }
                break;
            }
            case kMessagesWithTotalList: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.messages_with_total_list_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::MessagesWithTotalList>(
                            arena, *from._impl_.kind_.messages_with_total_list_);
                } else {
                    _this->_impl_.kind_.messages_with_total_list_->MergeFrom(
                        from._internal_messages_with_total_list());
                }
                break;
            }
            case kUserSession: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.user_session_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UserSession>(
                            arena, *from._impl_.kind_.user_session_);
                } else {
                    _this->_impl_.kind_.user_session_->MergeFrom(from._internal_user_session());
                }
                break;
            }
            case kUserInfosWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.user_infos_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UserInfosWithVersion>(
                            arena, *from._impl_.kind_.user_infos_with_version_);
                } else {
                    _this->_impl_.kind_.user_infos_with_version_->MergeFrom(
                        from._internal_user_infos_with_version());
                }
                break;
            }
            case kUserOnlineStatuses: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.user_online_statuses_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UserOnlineStatuses>(
                            arena, *from._impl_.kind_.user_online_statuses_);
                } else {
                    _this->_impl_.kind_.user_online_statuses_->MergeFrom(
                        from._internal_user_online_statuses());
                }
                break;
            }
            case kUserFriendRequestsWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.user_friend_requests_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UserFriendRequestsWithVersion>(
                            arena, *from._impl_.kind_.user_friend_requests_with_version_);
                } else {
                    _this->_impl_.kind_.user_friend_requests_with_version_->MergeFrom(
                        from._internal_user_friend_requests_with_version());
                }
                break;
            }
            case kUserRelationshipGroupsWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.user_relationship_groups_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UserRelationshipGroupsWithVersion>(
                            arena, *from._impl_.kind_.user_relationship_groups_with_version_);
                } else {
                    _this->_impl_.kind_.user_relationship_groups_with_version_->MergeFrom(
                        from._internal_user_relationship_groups_with_version());
                }
                break;
            }
            case kUserRelationshipsWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.user_relationships_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UserRelationshipsWithVersion>(
                            arena, *from._impl_.kind_.user_relationships_with_version_);
                } else {
                    _this->_impl_.kind_.user_relationships_with_version_->MergeFrom(
                        from._internal_user_relationships_with_version());
                }
                break;
            }
            case kNearbyUsers: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.nearby_users_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::NearbyUsers>(
                            arena, *from._impl_.kind_.nearby_users_);
                } else {
                    _this->_impl_.kind_.nearby_users_->MergeFrom(from._internal_nearby_users());
                }
                break;
            }
            case kGroupInvitationsWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.group_invitations_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::GroupInvitationsWithVersion>(
                            arena, *from._impl_.kind_.group_invitations_with_version_);
                } else {
                    _this->_impl_.kind_.group_invitations_with_version_->MergeFrom(
                        from._internal_group_invitations_with_version());
                }
                break;
            }
            case kGroupJoinQuestionAnswerResult: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.group_join_question_answer_result_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::GroupJoinQuestionsAnswerResult>(
                            arena, *from._impl_.kind_.group_join_question_answer_result_);
                } else {
                    _this->_impl_.kind_.group_join_question_answer_result_->MergeFrom(
                        from._internal_group_join_question_answer_result());
                }
                break;
            }
            case kGroupJoinRequestsWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.group_join_requests_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::GroupJoinRequestsWithVersion>(
                            arena, *from._impl_.kind_.group_join_requests_with_version_);
                } else {
                    _this->_impl_.kind_.group_join_requests_with_version_->MergeFrom(
                        from._internal_group_join_requests_with_version());
                }
                break;
            }
            case kGroupJoinQuestionsWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.group_join_questions_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::GroupJoinQuestionsWithVersion>(
                            arena, *from._impl_.kind_.group_join_questions_with_version_);
                } else {
                    _this->_impl_.kind_.group_join_questions_with_version_->MergeFrom(
                        from._internal_group_join_questions_with_version());
                }
                break;
            }
            case kGroupMembersWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.group_members_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::GroupMembersWithVersion>(
                            arena, *from._impl_.kind_.group_members_with_version_);
                } else {
                    _this->_impl_.kind_.group_members_with_version_->MergeFrom(
                        from._internal_group_members_with_version());
                }
                break;
            }
            case kGroupsWithVersion: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.groups_with_version_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::GroupsWithVersion>(
                            arena, *from._impl_.kind_.groups_with_version_);
                } else {
                    _this->_impl_.kind_.groups_with_version_->MergeFrom(
                        from._internal_groups_with_version());
                }
                break;
            }
            case kMeetings: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.meetings_ = ::google::protobuf::MessageLite::CopyConstruct<
                        ::turms::client::model::proto::Meetings>(arena,
                                                                 *from._impl_.kind_.meetings_);
                } else {
                    _this->_impl_.kind_.meetings_->MergeFrom(from._internal_meetings());
                }
                break;
            }
            case kStorageResourceInfos: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.storage_resource_infos_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::StorageResourceInfos>(
                            arena, *from._impl_.kind_.storage_resource_infos_);
                } else {
                    _this->_impl_.kind_.storage_resource_infos_->MergeFrom(
                        from._internal_storage_resource_infos());
                }
                break;
            }
            case kConversationSettingsList: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.conversation_settings_list_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::ConversationSettingsList>(
                            arena, *from._impl_.kind_.conversation_settings_list_);
                } else {
                    _this->_impl_.kind_.conversation_settings_list_->MergeFrom(
                        from._internal_conversation_settings_list());
                }
                break;
            }
            case kUserSettings: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.user_settings_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UserSettings>(
                            arena, *from._impl_.kind_.user_settings_);
                } else {
                    _this->_impl_.kind_.user_settings_->MergeFrom(from._internal_user_settings());
                }
                break;
            }
            case KIND_NOT_SET:
                break;
        }
    }
    _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TurmsNotification_Data::CopyFrom(const TurmsNotification_Data& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.TurmsNotification.Data)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void TurmsNotification_Data::InternalSwap(TurmsNotification_Data* PROTOBUF_RESTRICT other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_.kind_, other->_impl_.kind_);
    swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

// ===================================================================

class TurmsNotification::_Internal {
   public:
    using HasBits = decltype(std::declval<TurmsNotification>()._impl_._has_bits_);
    static constexpr ::int32_t kHasBitsOffset =
        8 * PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_._has_bits_);
};

void TurmsNotification::clear_custom_attributes() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.custom_attributes_.Clear();
}
void TurmsNotification::clear_relayed_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (_impl_.relayed_request_ != nullptr)
        _impl_.relayed_request_->Clear();
    _impl_._has_bits_[0] &= ~0x00000004u;
}
TurmsNotification::TurmsNotification(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
    SharedCtor(arena);
    // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.TurmsNotification)
}
inline PROTOBUF_NDEBUG_INLINE TurmsNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena,
    const Impl_& from,
    const ::turms::client::model::proto::TurmsNotification& from_msg)
    : _has_bits_{from._has_bits_},
      _cached_size_{0},
      custom_attributes_{visibility, arena, from.custom_attributes_},
      reason_(arena, from.reason_) {
}

TurmsNotification::TurmsNotification(::google::protobuf::Arena* arena,
                                     const TurmsNotification& from)
    : ::google::protobuf::MessageLite(arena) {
    TurmsNotification* const _this = this;
    (void)_this;
    _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
    new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
    ::uint32_t cached_has_bits = _impl_._has_bits_[0];
    _impl_.data_ =
        (cached_has_bits & 0x00000002u)
            ? ::google::protobuf::MessageLite::CopyConstruct<
                  ::turms::client::model::proto::TurmsNotification_Data>(arena, *from._impl_.data_)
            : nullptr;
    _impl_.relayed_request_ =
        (cached_has_bits & 0x00000004u)
            ? ::google::protobuf::MessageLite::CopyConstruct<
                  ::turms::client::model::proto::TurmsRequest>(arena, *from._impl_.relayed_request_)
            : nullptr;
    ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, timestamp_),
             reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, timestamp_),
             offsetof(Impl_, requester_id_) - offsetof(Impl_, timestamp_) +
                 sizeof(Impl_::requester_id_));

    // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.TurmsNotification)
}
inline PROTOBUF_NDEBUG_INLINE TurmsNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena)
    : _cached_size_{0},
      custom_attributes_{visibility, arena},
      reason_(arena) {
}

inline void TurmsNotification::SharedCtor(::_pb::Arena* arena) {
    new (&_impl_) Impl_(internal_visibility(), arena);
    ::memset(
        reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, data_),
        0,
        offsetof(Impl_, requester_id_) - offsetof(Impl_, data_) + sizeof(Impl_::requester_id_));
}
TurmsNotification::~TurmsNotification() {
    // @@protoc_insertion_point(destructor:turms.client.model.proto.TurmsNotification)
    _internal_metadata_.Delete<std::string>();
    SharedDtor();
}
inline void TurmsNotification::SharedDtor() {
    ABSL_DCHECK(GetArena() == nullptr);
    _impl_.reason_.Destroy();
    delete _impl_.data_;
    delete _impl_.relayed_request_;
    _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData* TurmsNotification::GetClassData() const {
    PROTOBUF_CONSTINIT static const ClassDataLite<43> _data_ = {
        {
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_._cached_size_),
            true,
        },
        "turms.client.model.proto.TurmsNotification",
    };

    return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<4, 9, 3, 65, 2>
    TurmsNotification::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_._has_bits_),
            0,  // no _extensions_
            12,
            120,  // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294963588,  // skipmap
            offsetof(decltype(_table_), field_entries),
            9,  // num_field_entries
            3,  // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            &_TurmsNotification_default_instance_._instance,
            nullptr,                                // post_loop_handler
            ::_pbi::TcParser::GenericFallbackLite,  // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::TurmsNotification>(),  // to_prefetch
#endif  // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // int64 timestamp = 1;
            {::_pbi::TcParser::FastV64S1,
             {8, 63, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.timestamp_)}},
            // repeated .turms.client.model.proto.Value custom_attributes = 2;
            {::_pbi::TcParser::FastMtR1,
             {18, 63, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.custom_attributes_)}},
            {::_pbi::TcParser::MiniParse, {}},
            // optional int64 request_id = 4;
            {::_pbi::TcParser::FastV64S1,
             {32, 3, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.request_id_)}},
            // optional int32 code = 5;
            {::_pbi::TcParser::FastV32S1,
             {40, 4, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.code_)}},
            // optional string reason = 6;
            {::_pbi::TcParser::FastUS1,
             {50, 0, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.reason_)}},
            // .turms.client.model.proto.TurmsNotification.Data data = 7;
            {::_pbi::TcParser::FastMtS1,
             {58, 1, 1, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.data_)}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
            // optional int64 requester_id = 10;
            {::_pbi::TcParser::FastV64S1,
             {80, 6, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.requester_id_)}},
            // optional int32 close_status = 11;
            {::_pbi::TcParser::FastV32S1,
             {88, 5, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.close_status_)}},
            // .turms.client.model.proto.TurmsRequest relayed_request = 12;
            {::_pbi::TcParser::FastMtS1,
             {98, 2, 2, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.relayed_request_)}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
        }},
        {{65535, 65535}},
        {{
            // int64 timestamp = 1;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.timestamp_),
             -1,
             0,
             (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
            // repeated .turms.client.model.proto.Value custom_attributes = 2;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.custom_attributes_),
             -1,
             0,
             (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
            // optional int64 request_id = 4;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.request_id_),
             _Internal::kHasBitsOffset + 3,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional int32 code = 5;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.code_),
             _Internal::kHasBitsOffset + 4,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // optional string reason = 6;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.reason_),
             _Internal::kHasBitsOffset + 0,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // .turms.client.model.proto.TurmsNotification.Data data = 7;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.data_),
             _Internal::kHasBitsOffset + 1,
             1,
             (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
            // optional int64 requester_id = 10;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.requester_id_),
             _Internal::kHasBitsOffset + 6,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional int32 close_status = 11;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.close_status_),
             _Internal::kHasBitsOffset + 5,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // .turms.client.model.proto.TurmsRequest relayed_request = 12;
            {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.relayed_request_),
             _Internal::kHasBitsOffset + 2,
             2,
             (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::Value>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::TurmsNotification_Data>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::TurmsRequest>()},
        }},
        {{"\52\0\0\0\0\6\0\0\0\0\0\0\0\0\0\0"
          "turms.client.model.proto.TurmsNotification"
          "reason"}},
};

PROTOBUF_NOINLINE void TurmsNotification::Clear() {
    // @@protoc_insertion_point(message_clear_start:turms.client.model.proto.TurmsNotification)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.custom_attributes_.Clear();
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
        if (cached_has_bits & 0x00000001u) {
            _impl_.reason_.ClearNonDefaultToEmpty();
        }
        if (cached_has_bits & 0x00000002u) {
            ABSL_DCHECK(_impl_.data_ != nullptr);
            _impl_.data_->Clear();
        }
        if (cached_has_bits & 0x00000004u) {
            ABSL_DCHECK(_impl_.relayed_request_ != nullptr);
            _impl_.relayed_request_->Clear();
        }
    }
    _impl_.timestamp_ = ::int64_t{0};
    if (cached_has_bits & 0x00000078u) {
        ::memset(&_impl_.request_id_,
                 0,
                 static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.requester_id_) -
                                       reinterpret_cast<char*>(&_impl_.request_id_)) +
                     sizeof(_impl_.requester_id_));
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<std::string>();
}

::uint8_t* TurmsNotification::_InternalSerialize(
    ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.TurmsNotification)
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 timestamp = 1;
    if (this->_internal_timestamp() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
            stream, this->_internal_timestamp(), target);
    }

    // repeated .turms.client.model.proto.Value custom_attributes = 2;
    for (unsigned i = 0, n = static_cast<unsigned>(this->_internal_custom_attributes_size()); i < n;
         i++) {
        const auto& repfield = this->_internal_custom_attributes().Get(i);
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(), target, stream);
    }

    cached_has_bits = _impl_._has_bits_[0];
    // optional int64 request_id = 4;
    if (cached_has_bits & 0x00000008u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
            stream, this->_internal_request_id(), target);
    }

    // optional int32 code = 5;
    if (cached_has_bits & 0x00000010u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
            stream, this->_internal_code(), target);
    }

    // optional string reason = 6;
    if (cached_has_bits & 0x00000001u) {
        const std::string& _s = this->_internal_reason();
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            _s.data(),
            static_cast<int>(_s.length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "turms.client.model.proto.TurmsNotification.reason");
        target = stream->WriteStringMaybeAliased(6, _s, target);
    }

    // .turms.client.model.proto.TurmsNotification.Data data = 7;
    if (cached_has_bits & 0x00000002u) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            7, *_impl_.data_, _impl_.data_->GetCachedSize(), target, stream);
    }

    // optional int64 requester_id = 10;
    if (cached_has_bits & 0x00000040u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<10>(
            stream, this->_internal_requester_id(), target);
    }

    // optional int32 close_status = 11;
    if (cached_has_bits & 0x00000020u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
            stream, this->_internal_close_status(), target);
    }

    // .turms.client.model.proto.TurmsRequest relayed_request = 12;
    if (cached_has_bits & 0x00000004u) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            12, *_impl_.relayed_request_, _impl_.relayed_request_->GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = stream->WriteRaw(
            _internal_metadata_
                .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                .data(),
            static_cast<int>(
                _internal_metadata_
                    .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                    .size()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.TurmsNotification)
    return target;
}

::size_t TurmsNotification::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.TurmsNotification)
    ::size_t total_size = 0;

    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
    // repeated .turms.client.model.proto.Value custom_attributes = 2;
    total_size += 1UL * this->_internal_custom_attributes_size();
    for (const auto& msg : this->_internal_custom_attributes()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
    }
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
        // optional string reason = 6;
        if (cached_has_bits & 0x00000001u) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->_internal_reason());
        }

        // .turms.client.model.proto.TurmsNotification.Data data = 7;
        if (cached_has_bits & 0x00000002u) {
            total_size +=
                1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.data_);
        }

        // .turms.client.model.proto.TurmsRequest relayed_request = 12;
        if (cached_has_bits & 0x00000004u) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.relayed_request_);
        }
    }
    // int64 timestamp = 1;
    if (this->_internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

    if (cached_has_bits & 0x00000078u) {
        // optional int64 request_id = 4;
        if (cached_has_bits & 0x00000008u) {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
        }

        // optional int32 code = 5;
        if (cached_has_bits & 0x00000010u) {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
        }

        // optional int32 close_status = 11;
        if (cached_has_bits & 0x00000020u) {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_close_status());
        }

        // optional int64 requester_id = 10;
        if (cached_has_bits & 0x00000040u) {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requester_id());
        }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        total_size += _internal_metadata_
                          .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                          .size();
    }
    _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
    return total_size;
}

void TurmsNotification::CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) {
    MergeFrom(*::_pbi::DownCast<const TurmsNotification*>(&from));
}

void TurmsNotification::MergeFrom(const TurmsNotification& from) {
    TurmsNotification* const _this = this;
    ::google::protobuf::Arena* arena = _this->GetArena();
    // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.TurmsNotification)
    ABSL_DCHECK_NE(&from, _this);
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    _this->_internal_mutable_custom_attributes()->MergeFrom(from._internal_custom_attributes());
    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
        if (cached_has_bits & 0x00000001u) {
            _this->_internal_set_reason(from._internal_reason());
        }
        if (cached_has_bits & 0x00000002u) {
            ABSL_DCHECK(from._impl_.data_ != nullptr);
            if (_this->_impl_.data_ == nullptr) {
                _this->_impl_.data_ = ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::TurmsNotification_Data>(arena,
                                                                           *from._impl_.data_);
            } else {
                _this->_impl_.data_->MergeFrom(*from._impl_.data_);
            }
        }
        if (cached_has_bits & 0x00000004u) {
            ABSL_DCHECK(from._impl_.relayed_request_ != nullptr);
            if (_this->_impl_.relayed_request_ == nullptr) {
                _this->_impl_.relayed_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::TurmsRequest>(arena,
                                                                 *from._impl_.relayed_request_);
            } else {
                _this->_impl_.relayed_request_->MergeFrom(*from._impl_.relayed_request_);
            }
        }
    }
    if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000078u) {
        if (cached_has_bits & 0x00000008u) {
            _this->_impl_.request_id_ = from._impl_.request_id_;
        }
        if (cached_has_bits & 0x00000010u) {
            _this->_impl_.code_ = from._impl_.code_;
        }
        if (cached_has_bits & 0x00000020u) {
            _this->_impl_.close_status_ = from._impl_.close_status_;
        }
        if (cached_has_bits & 0x00000040u) {
            _this->_impl_.requester_id_ = from._impl_.requester_id_;
        }
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
    _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TurmsNotification::CopyFrom(const TurmsNotification& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.TurmsNotification)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void TurmsNotification::InternalSwap(TurmsNotification* PROTOBUF_RESTRICT other) {
    using std::swap;
    auto* arena = GetArena();
    ABSL_DCHECK_EQ(arena, other->GetArena());
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    _impl_.custom_attributes_.InternalSwap(&other->_impl_.custom_attributes_);
    ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
    ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(TurmsNotification,
                                                                _impl_.requester_id_) +
                                          sizeof(TurmsNotification::_impl_.requester_id_) -
                                          PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.data_)>(
        reinterpret_cast<char*>(&_impl_.data_), reinterpret_cast<char*>(&other->_impl_.data_));
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
