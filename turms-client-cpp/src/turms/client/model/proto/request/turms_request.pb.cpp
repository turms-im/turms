// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: request/turms_request.proto
// Protobuf C++ Version: 5.27.2

#include "turms/client/model/proto/request/turms_request.pb.h"

#include <algorithm>
#include <type_traits>

#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/wire_format_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {

inline constexpr TurmsRequest::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      custom_attributes_{},
      request_id_{::int64_t{0}},
      kind_{},
      _oneof_case_{} {
}

template <typename>
PROTOBUF_CONSTEXPR TurmsRequest::TurmsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {
}
struct TurmsRequestDefaultTypeInternal {
    PROTOBUF_CONSTEXPR TurmsRequestDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {
    }
    ~TurmsRequestDefaultTypeInternal() {
    }
    union {
        TurmsRequest _instance;
    };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    TurmsRequestDefaultTypeInternal _TurmsRequest_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class TurmsRequest::_Internal {
   public:
    using HasBits = decltype(std::declval<TurmsRequest>()._impl_._has_bits_);
    static constexpr ::int32_t kHasBitsOffset =
        8 * PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_._has_bits_);
    static constexpr ::int32_t kOneofCaseOffset =
        PROTOBUF_FIELD_OFFSET(::turms::client::model::proto::TurmsRequest, _impl_._oneof_case_);
};

void TurmsRequest::clear_custom_attributes() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.custom_attributes_.Clear();
}
void TurmsRequest::set_allocated_create_session_request(
    ::turms::client::model::proto::CreateSessionRequest* create_session_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_session_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_session_request)->GetArena();
        if (message_arena != submessage_arena) {
            create_session_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_session_request, submessage_arena);
        }
        set_has_create_session_request();
        _impl_.kind_.create_session_request_ = create_session_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_session_request)
}
void TurmsRequest::clear_create_session_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateSessionRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_session_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_session_request_ != nullptr) {
                _impl_.kind_.create_session_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_session_request(
    ::turms::client::model::proto::DeleteSessionRequest* delete_session_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_session_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_session_request)->GetArena();
        if (message_arena != submessage_arena) {
            delete_session_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_session_request, submessage_arena);
        }
        set_has_delete_session_request();
        _impl_.kind_.delete_session_request_ = delete_session_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_session_request)
}
void TurmsRequest::clear_delete_session_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteSessionRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_session_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_session_request_ != nullptr) {
                _impl_.kind_.delete_session_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_conversations_request(
    ::turms::client::model::proto::QueryConversationsRequest* query_conversations_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_conversations_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_conversations_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_conversations_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_conversations_request, submessage_arena);
        }
        set_has_query_conversations_request();
        _impl_.kind_.query_conversations_request_ = query_conversations_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_conversations_request)
}
void TurmsRequest::clear_query_conversations_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryConversationsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_conversations_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_conversations_request_ != nullptr) {
                _impl_.kind_.query_conversations_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_conversation_request(
    ::turms::client::model::proto::UpdateConversationRequest* update_conversation_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_conversation_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_conversation_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_conversation_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_conversation_request, submessage_arena);
        }
        set_has_update_conversation_request();
        _impl_.kind_.update_conversation_request_ = update_conversation_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_conversation_request)
}
void TurmsRequest::clear_update_conversation_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateConversationRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_conversation_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_conversation_request_ != nullptr) {
                _impl_.kind_.update_conversation_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_typing_status_request(
    ::turms::client::model::proto::UpdateTypingStatusRequest* update_typing_status_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_typing_status_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_typing_status_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_typing_status_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_typing_status_request, submessage_arena);
        }
        set_has_update_typing_status_request();
        _impl_.kind_.update_typing_status_request_ = update_typing_status_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_typing_status_request)
}
void TurmsRequest::clear_update_typing_status_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateTypingStatusRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_typing_status_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_typing_status_request_ != nullptr) {
                _impl_.kind_.update_typing_status_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_message_request(
    ::turms::client::model::proto::CreateMessageRequest* create_message_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_message_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_message_request)->GetArena();
        if (message_arena != submessage_arena) {
            create_message_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_message_request, submessage_arena);
        }
        set_has_create_message_request();
        _impl_.kind_.create_message_request_ = create_message_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_message_request)
}
void TurmsRequest::clear_create_message_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateMessageRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_message_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_message_request_ != nullptr) {
                _impl_.kind_.create_message_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_messages_request(
    ::turms::client::model::proto::QueryMessagesRequest* query_messages_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_messages_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_messages_request)->GetArena();
        if (message_arena != submessage_arena) {
            query_messages_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_messages_request, submessage_arena);
        }
        set_has_query_messages_request();
        _impl_.kind_.query_messages_request_ = query_messages_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_messages_request)
}
void TurmsRequest::clear_query_messages_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryMessagesRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_messages_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_messages_request_ != nullptr) {
                _impl_.kind_.query_messages_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_message_request(
    ::turms::client::model::proto::UpdateMessageRequest* update_message_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_message_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_message_request)->GetArena();
        if (message_arena != submessage_arena) {
            update_message_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_message_request, submessage_arena);
        }
        set_has_update_message_request();
        _impl_.kind_.update_message_request_ = update_message_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_message_request)
}
void TurmsRequest::clear_update_message_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateMessageRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_message_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_message_request_ != nullptr) {
                _impl_.kind_.update_message_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_group_members_request(
    ::turms::client::model::proto::CreateGroupMembersRequest* create_group_members_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_group_members_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_group_members_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            create_group_members_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_group_members_request, submessage_arena);
        }
        set_has_create_group_members_request();
        _impl_.kind_.create_group_members_request_ = create_group_members_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_group_members_request)
}
void TurmsRequest::clear_create_group_members_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateGroupMembersRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_group_members_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_group_members_request_ != nullptr) {
                _impl_.kind_.create_group_members_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_group_members_request(
    ::turms::client::model::proto::DeleteGroupMembersRequest* delete_group_members_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_group_members_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_group_members_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_group_members_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_group_members_request, submessage_arena);
        }
        set_has_delete_group_members_request();
        _impl_.kind_.delete_group_members_request_ = delete_group_members_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_members_request)
}
void TurmsRequest::clear_delete_group_members_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteGroupMembersRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_group_members_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_group_members_request_ != nullptr) {
                _impl_.kind_.delete_group_members_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_group_members_request(
    ::turms::client::model::proto::QueryGroupMembersRequest* query_group_members_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_group_members_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_group_members_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_group_members_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_group_members_request, submessage_arena);
        }
        set_has_query_group_members_request();
        _impl_.kind_.query_group_members_request_ = query_group_members_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_group_members_request)
}
void TurmsRequest::clear_query_group_members_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryGroupMembersRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_group_members_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_group_members_request_ != nullptr) {
                _impl_.kind_.query_group_members_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_group_member_request(
    ::turms::client::model::proto::UpdateGroupMemberRequest* update_group_member_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_group_member_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_group_member_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_group_member_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_group_member_request, submessage_arena);
        }
        set_has_update_group_member_request();
        _impl_.kind_.update_group_member_request_ = update_group_member_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_group_member_request)
}
void TurmsRequest::clear_update_group_member_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateGroupMemberRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_group_member_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_group_member_request_ != nullptr) {
                _impl_.kind_.update_group_member_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_user_profiles_request(
    ::turms::client::model::proto::QueryUserProfilesRequest* query_user_profiles_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_user_profiles_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_user_profiles_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_user_profiles_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_user_profiles_request, submessage_arena);
        }
        set_has_query_user_profiles_request();
        _impl_.kind_.query_user_profiles_request_ = query_user_profiles_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_user_profiles_request)
}
void TurmsRequest::clear_query_user_profiles_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryUserProfilesRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_user_profiles_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_user_profiles_request_ != nullptr) {
                _impl_.kind_.query_user_profiles_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_nearby_users_request(
    ::turms::client::model::proto::QueryNearbyUsersRequest* query_nearby_users_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_nearby_users_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_nearby_users_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_nearby_users_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_nearby_users_request, submessage_arena);
        }
        set_has_query_nearby_users_request();
        _impl_.kind_.query_nearby_users_request_ = query_nearby_users_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_nearby_users_request)
}
void TurmsRequest::clear_query_nearby_users_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryNearbyUsersRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_nearby_users_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_nearby_users_request_ != nullptr) {
                _impl_.kind_.query_nearby_users_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_user_online_statuses_request(
    ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
        query_user_online_statuses_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_user_online_statuses_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_user_online_statuses_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_user_online_statuses_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_user_online_statuses_request, submessage_arena);
        }
        set_has_query_user_online_statuses_request();
        _impl_.kind_.query_user_online_statuses_request_ = query_user_online_statuses_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_user_online_statuses_request)
}
void TurmsRequest::clear_query_user_online_statuses_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryUserOnlineStatusesRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_user_online_statuses_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_user_online_statuses_request_ != nullptr) {
                _impl_.kind_.query_user_online_statuses_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_user_location_request(
    ::turms::client::model::proto::UpdateUserLocationRequest* update_user_location_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_user_location_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_user_location_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_user_location_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_user_location_request, submessage_arena);
        }
        set_has_update_user_location_request();
        _impl_.kind_.update_user_location_request_ = update_user_location_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_user_location_request)
}
void TurmsRequest::clear_update_user_location_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateUserLocationRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_user_location_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_user_location_request_ != nullptr) {
                _impl_.kind_.update_user_location_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_user_online_status_request(
    ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
        update_user_online_status_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_user_online_status_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_user_online_status_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_user_online_status_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_user_online_status_request, submessage_arena);
        }
        set_has_update_user_online_status_request();
        _impl_.kind_.update_user_online_status_request_ = update_user_online_status_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_user_online_status_request)
}
void TurmsRequest::clear_update_user_online_status_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateUserOnlineStatusRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_user_online_status_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_user_online_status_request_ != nullptr) {
                _impl_.kind_.update_user_online_status_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_user_request(
    ::turms::client::model::proto::UpdateUserRequest* update_user_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_user_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_user_request)->GetArena();
        if (message_arena != submessage_arena) {
            update_user_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_user_request, submessage_arena);
        }
        set_has_update_user_request();
        _impl_.kind_.update_user_request_ = update_user_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_user_request)
}
void TurmsRequest::clear_update_user_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateUserRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_user_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_user_request_ != nullptr) {
                _impl_.kind_.update_user_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_user_settings_request(
    ::turms::client::model::proto::UpdateUserSettingsRequest* update_user_settings_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_user_settings_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_user_settings_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_user_settings_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_user_settings_request, submessage_arena);
        }
        set_has_update_user_settings_request();
        _impl_.kind_.update_user_settings_request_ = update_user_settings_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_user_settings_request)
}
void TurmsRequest::clear_update_user_settings_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateUserSettingsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_user_settings_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_user_settings_request_ != nullptr) {
                _impl_.kind_.update_user_settings_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_user_settings_request(
    ::turms::client::model::proto::DeleteUserSettingsRequest* delete_user_settings_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_user_settings_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_user_settings_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_user_settings_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_user_settings_request, submessage_arena);
        }
        set_has_delete_user_settings_request();
        _impl_.kind_.delete_user_settings_request_ = delete_user_settings_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_user_settings_request)
}
void TurmsRequest::clear_delete_user_settings_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteUserSettingsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_user_settings_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_user_settings_request_ != nullptr) {
                _impl_.kind_.delete_user_settings_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_user_settings_request(
    ::turms::client::model::proto::QueryUserSettingsRequest* query_user_settings_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_user_settings_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_user_settings_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_user_settings_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_user_settings_request, submessage_arena);
        }
        set_has_query_user_settings_request();
        _impl_.kind_.query_user_settings_request_ = query_user_settings_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_user_settings_request)
}
void TurmsRequest::clear_query_user_settings_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryUserSettingsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_user_settings_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_user_settings_request_ != nullptr) {
                _impl_.kind_.query_user_settings_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_friend_request_request(
    ::turms::client::model::proto::CreateFriendRequestRequest* create_friend_request_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_friend_request_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_friend_request_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            create_friend_request_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_friend_request_request, submessage_arena);
        }
        set_has_create_friend_request_request();
        _impl_.kind_.create_friend_request_request_ = create_friend_request_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_friend_request_request)
}
void TurmsRequest::clear_create_friend_request_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateFriendRequestRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_friend_request_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_friend_request_request_ != nullptr) {
                _impl_.kind_.create_friend_request_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_relationship_group_request(
    ::turms::client::model::proto::CreateRelationshipGroupRequest*
        create_relationship_group_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_relationship_group_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_relationship_group_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            create_relationship_group_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_relationship_group_request, submessage_arena);
        }
        set_has_create_relationship_group_request();
        _impl_.kind_.create_relationship_group_request_ = create_relationship_group_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_relationship_group_request)
}
void TurmsRequest::clear_create_relationship_group_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateRelationshipGroupRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_relationship_group_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_relationship_group_request_ != nullptr) {
                _impl_.kind_.create_relationship_group_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_relationship_request(
    ::turms::client::model::proto::CreateRelationshipRequest* create_relationship_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_relationship_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_relationship_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            create_relationship_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_relationship_request, submessage_arena);
        }
        set_has_create_relationship_request();
        _impl_.kind_.create_relationship_request_ = create_relationship_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_relationship_request)
}
void TurmsRequest::clear_create_relationship_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateRelationshipRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_relationship_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_relationship_request_ != nullptr) {
                _impl_.kind_.create_relationship_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_friend_request_request(
    ::turms::client::model::proto::DeleteFriendRequestRequest* delete_friend_request_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_friend_request_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_friend_request_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_friend_request_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_friend_request_request, submessage_arena);
        }
        set_has_delete_friend_request_request();
        _impl_.kind_.delete_friend_request_request_ = delete_friend_request_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_friend_request_request)
}
void TurmsRequest::clear_delete_friend_request_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteFriendRequestRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_friend_request_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_friend_request_request_ != nullptr) {
                _impl_.kind_.delete_friend_request_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_relationship_group_request(
    ::turms::client::model::proto::DeleteRelationshipGroupRequest*
        delete_relationship_group_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_relationship_group_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_relationship_group_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_relationship_group_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_relationship_group_request, submessage_arena);
        }
        set_has_delete_relationship_group_request();
        _impl_.kind_.delete_relationship_group_request_ = delete_relationship_group_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_relationship_group_request)
}
void TurmsRequest::clear_delete_relationship_group_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteRelationshipGroupRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_relationship_group_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_relationship_group_request_ != nullptr) {
                _impl_.kind_.delete_relationship_group_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_relationship_request(
    ::turms::client::model::proto::DeleteRelationshipRequest* delete_relationship_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_relationship_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_relationship_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_relationship_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_relationship_request, submessage_arena);
        }
        set_has_delete_relationship_request();
        _impl_.kind_.delete_relationship_request_ = delete_relationship_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_relationship_request)
}
void TurmsRequest::clear_delete_relationship_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteRelationshipRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_relationship_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_relationship_request_ != nullptr) {
                _impl_.kind_.delete_relationship_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_friend_requests_request(
    ::turms::client::model::proto::QueryFriendRequestsRequest* query_friend_requests_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_friend_requests_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_friend_requests_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_friend_requests_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_friend_requests_request, submessage_arena);
        }
        set_has_query_friend_requests_request();
        _impl_.kind_.query_friend_requests_request_ = query_friend_requests_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_friend_requests_request)
}
void TurmsRequest::clear_query_friend_requests_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryFriendRequestsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_friend_requests_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_friend_requests_request_ != nullptr) {
                _impl_.kind_.query_friend_requests_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_related_user_ids_request(
    ::turms::client::model::proto::QueryRelatedUserIdsRequest* query_related_user_ids_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_related_user_ids_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_related_user_ids_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_related_user_ids_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_related_user_ids_request, submessage_arena);
        }
        set_has_query_related_user_ids_request();
        _impl_.kind_.query_related_user_ids_request_ = query_related_user_ids_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_related_user_ids_request)
}
void TurmsRequest::clear_query_related_user_ids_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryRelatedUserIdsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_related_user_ids_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_related_user_ids_request_ != nullptr) {
                _impl_.kind_.query_related_user_ids_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_relationship_groups_request(
    ::turms::client::model::proto::QueryRelationshipGroupsRequest*
        query_relationship_groups_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_relationship_groups_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_relationship_groups_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_relationship_groups_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_relationship_groups_request, submessage_arena);
        }
        set_has_query_relationship_groups_request();
        _impl_.kind_.query_relationship_groups_request_ = query_relationship_groups_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_relationship_groups_request)
}
void TurmsRequest::clear_query_relationship_groups_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryRelationshipGroupsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_relationship_groups_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_relationship_groups_request_ != nullptr) {
                _impl_.kind_.query_relationship_groups_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_relationships_request(
    ::turms::client::model::proto::QueryRelationshipsRequest* query_relationships_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_relationships_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_relationships_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_relationships_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_relationships_request, submessage_arena);
        }
        set_has_query_relationships_request();
        _impl_.kind_.query_relationships_request_ = query_relationships_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_relationships_request)
}
void TurmsRequest::clear_query_relationships_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryRelationshipsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_relationships_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_relationships_request_ != nullptr) {
                _impl_.kind_.query_relationships_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_friend_request_request(
    ::turms::client::model::proto::UpdateFriendRequestRequest* update_friend_request_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_friend_request_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_friend_request_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_friend_request_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_friend_request_request, submessage_arena);
        }
        set_has_update_friend_request_request();
        _impl_.kind_.update_friend_request_request_ = update_friend_request_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_friend_request_request)
}
void TurmsRequest::clear_update_friend_request_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateFriendRequestRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_friend_request_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_friend_request_request_ != nullptr) {
                _impl_.kind_.update_friend_request_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_relationship_group_request(
    ::turms::client::model::proto::UpdateRelationshipGroupRequest*
        update_relationship_group_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_relationship_group_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_relationship_group_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_relationship_group_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_relationship_group_request, submessage_arena);
        }
        set_has_update_relationship_group_request();
        _impl_.kind_.update_relationship_group_request_ = update_relationship_group_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_relationship_group_request)
}
void TurmsRequest::clear_update_relationship_group_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateRelationshipGroupRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_relationship_group_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_relationship_group_request_ != nullptr) {
                _impl_.kind_.update_relationship_group_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_relationship_request(
    ::turms::client::model::proto::UpdateRelationshipRequest* update_relationship_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_relationship_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_relationship_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_relationship_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_relationship_request, submessage_arena);
        }
        set_has_update_relationship_request();
        _impl_.kind_.update_relationship_request_ = update_relationship_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_relationship_request)
}
void TurmsRequest::clear_update_relationship_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateRelationshipRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_relationship_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_relationship_request_ != nullptr) {
                _impl_.kind_.update_relationship_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_group_request(
    ::turms::client::model::proto::CreateGroupRequest* create_group_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_group_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_group_request)->GetArena();
        if (message_arena != submessage_arena) {
            create_group_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_group_request, submessage_arena);
        }
        set_has_create_group_request();
        _impl_.kind_.create_group_request_ = create_group_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_group_request)
}
void TurmsRequest::clear_create_group_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateGroupRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_group_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_group_request_ != nullptr) {
                _impl_.kind_.create_group_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_group_request(
    ::turms::client::model::proto::DeleteGroupRequest* delete_group_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_group_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_group_request)->GetArena();
        if (message_arena != submessage_arena) {
            delete_group_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_group_request, submessage_arena);
        }
        set_has_delete_group_request();
        _impl_.kind_.delete_group_request_ = delete_group_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_request)
}
void TurmsRequest::clear_delete_group_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteGroupRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_group_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_group_request_ != nullptr) {
                _impl_.kind_.delete_group_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_groups_request(
    ::turms::client::model::proto::QueryGroupsRequest* query_groups_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_groups_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_groups_request)->GetArena();
        if (message_arena != submessage_arena) {
            query_groups_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_groups_request, submessage_arena);
        }
        set_has_query_groups_request();
        _impl_.kind_.query_groups_request_ = query_groups_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_groups_request)
}
void TurmsRequest::clear_query_groups_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryGroupsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_groups_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_groups_request_ != nullptr) {
                _impl_.kind_.query_groups_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_joined_group_ids_request(
    ::turms::client::model::proto::QueryJoinedGroupIdsRequest* query_joined_group_ids_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_joined_group_ids_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_joined_group_ids_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_joined_group_ids_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_joined_group_ids_request, submessage_arena);
        }
        set_has_query_joined_group_ids_request();
        _impl_.kind_.query_joined_group_ids_request_ = query_joined_group_ids_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_joined_group_ids_request)
}
void TurmsRequest::clear_query_joined_group_ids_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryJoinedGroupIdsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_joined_group_ids_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_joined_group_ids_request_ != nullptr) {
                _impl_.kind_.query_joined_group_ids_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_joined_group_infos_request(
    ::turms::client::model::proto::QueryJoinedGroupInfosRequest* query_joined_group_infos_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_joined_group_infos_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_joined_group_infos_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_joined_group_infos_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_joined_group_infos_request, submessage_arena);
        }
        set_has_query_joined_group_infos_request();
        _impl_.kind_.query_joined_group_infos_request_ = query_joined_group_infos_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_joined_group_infos_request)
}
void TurmsRequest::clear_query_joined_group_infos_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryJoinedGroupInfosRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_joined_group_infos_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_joined_group_infos_request_ != nullptr) {
                _impl_.kind_.query_joined_group_infos_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_group_request(
    ::turms::client::model::proto::UpdateGroupRequest* update_group_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_group_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_group_request)->GetArena();
        if (message_arena != submessage_arena) {
            update_group_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_group_request, submessage_arena);
        }
        set_has_update_group_request();
        _impl_.kind_.update_group_request_ = update_group_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_group_request)
}
void TurmsRequest::clear_update_group_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateGroupRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_group_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_group_request_ != nullptr) {
                _impl_.kind_.update_group_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_group_blocked_user_request(
    ::turms::client::model::proto::CreateGroupBlockedUserRequest*
        create_group_blocked_user_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_group_blocked_user_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_group_blocked_user_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            create_group_blocked_user_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_group_blocked_user_request, submessage_arena);
        }
        set_has_create_group_blocked_user_request();
        _impl_.kind_.create_group_blocked_user_request_ = create_group_blocked_user_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_group_blocked_user_request)
}
void TurmsRequest::clear_create_group_blocked_user_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateGroupBlockedUserRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_group_blocked_user_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_group_blocked_user_request_ != nullptr) {
                _impl_.kind_.create_group_blocked_user_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_group_blocked_user_request(
    ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
        delete_group_blocked_user_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_group_blocked_user_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_group_blocked_user_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_group_blocked_user_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_group_blocked_user_request, submessage_arena);
        }
        set_has_delete_group_blocked_user_request();
        _impl_.kind_.delete_group_blocked_user_request_ = delete_group_blocked_user_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_blocked_user_request)
}
void TurmsRequest::clear_delete_group_blocked_user_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteGroupBlockedUserRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_group_blocked_user_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_group_blocked_user_request_ != nullptr) {
                _impl_.kind_.delete_group_blocked_user_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_group_blocked_user_ids_request(
    ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
        query_group_blocked_user_ids_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_group_blocked_user_ids_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_group_blocked_user_ids_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_group_blocked_user_ids_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_group_blocked_user_ids_request, submessage_arena);
        }
        set_has_query_group_blocked_user_ids_request();
        _impl_.kind_.query_group_blocked_user_ids_request_ = query_group_blocked_user_ids_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_group_blocked_user_ids_request)
}
void TurmsRequest::clear_query_group_blocked_user_ids_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryGroupBlockedUserIdsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_group_blocked_user_ids_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_group_blocked_user_ids_request_ != nullptr) {
                _impl_.kind_.query_group_blocked_user_ids_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_group_blocked_user_infos_request(
    ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
        query_group_blocked_user_infos_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_group_blocked_user_infos_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(
                query_group_blocked_user_infos_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_group_blocked_user_infos_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_group_blocked_user_infos_request, submessage_arena);
        }
        set_has_query_group_blocked_user_infos_request();
        _impl_.kind_.query_group_blocked_user_infos_request_ =
            query_group_blocked_user_infos_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_group_blocked_user_infos_request)
}
void TurmsRequest::clear_query_group_blocked_user_infos_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryGroupBlockedUserInfosRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_group_blocked_user_infos_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_group_blocked_user_infos_request_ != nullptr) {
                _impl_.kind_.query_group_blocked_user_infos_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_check_group_join_questions_answers_request(
    ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
        check_group_join_questions_answers_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (check_group_join_questions_answers_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(
                check_group_join_questions_answers_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            check_group_join_questions_answers_request =
                ::google::protobuf::internal::GetOwnedMessage(
                    message_arena, check_group_join_questions_answers_request, submessage_arena);
        }
        set_has_check_group_join_questions_answers_request();
        _impl_.kind_.check_group_join_questions_answers_request_ =
            check_group_join_questions_answers_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.check_group_join_questions_answers_request)
}
void TurmsRequest::clear_check_group_join_questions_answers_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCheckGroupJoinQuestionsAnswersRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.check_group_join_questions_answers_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.check_group_join_questions_answers_request_ != nullptr) {
                _impl_.kind_.check_group_join_questions_answers_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_group_invitation_request(
    ::turms::client::model::proto::CreateGroupInvitationRequest* create_group_invitation_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_group_invitation_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_group_invitation_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            create_group_invitation_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_group_invitation_request, submessage_arena);
        }
        set_has_create_group_invitation_request();
        _impl_.kind_.create_group_invitation_request_ = create_group_invitation_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_group_invitation_request)
}
void TurmsRequest::clear_create_group_invitation_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateGroupInvitationRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_group_invitation_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_group_invitation_request_ != nullptr) {
                _impl_.kind_.create_group_invitation_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_group_join_request_request(
    ::turms::client::model::proto::CreateGroupJoinRequestRequest*
        create_group_join_request_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_group_join_request_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_group_join_request_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            create_group_join_request_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_group_join_request_request, submessage_arena);
        }
        set_has_create_group_join_request_request();
        _impl_.kind_.create_group_join_request_request_ = create_group_join_request_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_group_join_request_request)
}
void TurmsRequest::clear_create_group_join_request_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateGroupJoinRequestRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_group_join_request_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_group_join_request_request_ != nullptr) {
                _impl_.kind_.create_group_join_request_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_group_join_questions_request(
    ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
        create_group_join_questions_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_group_join_questions_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_group_join_questions_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            create_group_join_questions_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_group_join_questions_request, submessage_arena);
        }
        set_has_create_group_join_questions_request();
        _impl_.kind_.create_group_join_questions_request_ = create_group_join_questions_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_group_join_questions_request)
}
void TurmsRequest::clear_create_group_join_questions_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateGroupJoinQuestionsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_group_join_questions_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_group_join_questions_request_ != nullptr) {
                _impl_.kind_.create_group_join_questions_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_group_invitation_request(
    ::turms::client::model::proto::DeleteGroupInvitationRequest* delete_group_invitation_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_group_invitation_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_group_invitation_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_group_invitation_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_group_invitation_request, submessage_arena);
        }
        set_has_delete_group_invitation_request();
        _impl_.kind_.delete_group_invitation_request_ = delete_group_invitation_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_invitation_request)
}
void TurmsRequest::clear_delete_group_invitation_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteGroupInvitationRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_group_invitation_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_group_invitation_request_ != nullptr) {
                _impl_.kind_.delete_group_invitation_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_group_join_request_request(
    ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
        delete_group_join_request_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_group_join_request_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_group_join_request_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_group_join_request_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_group_join_request_request, submessage_arena);
        }
        set_has_delete_group_join_request_request();
        _impl_.kind_.delete_group_join_request_request_ = delete_group_join_request_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_join_request_request)
}
void TurmsRequest::clear_delete_group_join_request_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteGroupJoinRequestRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_group_join_request_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_group_join_request_request_ != nullptr) {
                _impl_.kind_.delete_group_join_request_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_group_join_questions_request(
    ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
        delete_group_join_questions_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_group_join_questions_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_group_join_questions_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_group_join_questions_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_group_join_questions_request, submessage_arena);
        }
        set_has_delete_group_join_questions_request();
        _impl_.kind_.delete_group_join_questions_request_ = delete_group_join_questions_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_join_questions_request)
}
void TurmsRequest::clear_delete_group_join_questions_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteGroupJoinQuestionsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_group_join_questions_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_group_join_questions_request_ != nullptr) {
                _impl_.kind_.delete_group_join_questions_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_group_invitations_request(
    ::turms::client::model::proto::QueryGroupInvitationsRequest* query_group_invitations_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_group_invitations_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_group_invitations_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_group_invitations_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_group_invitations_request, submessage_arena);
        }
        set_has_query_group_invitations_request();
        _impl_.kind_.query_group_invitations_request_ = query_group_invitations_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_group_invitations_request)
}
void TurmsRequest::clear_query_group_invitations_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryGroupInvitationsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_group_invitations_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_group_invitations_request_ != nullptr) {
                _impl_.kind_.query_group_invitations_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_group_join_requests_request(
    ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
        query_group_join_requests_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_group_join_requests_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_group_join_requests_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_group_join_requests_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_group_join_requests_request, submessage_arena);
        }
        set_has_query_group_join_requests_request();
        _impl_.kind_.query_group_join_requests_request_ = query_group_join_requests_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_group_join_requests_request)
}
void TurmsRequest::clear_query_group_join_requests_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryGroupJoinRequestsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_group_join_requests_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_group_join_requests_request_ != nullptr) {
                _impl_.kind_.query_group_join_requests_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_group_join_questions_request(
    ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
        query_group_join_questions_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_group_join_questions_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_group_join_questions_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_group_join_questions_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_group_join_questions_request, submessage_arena);
        }
        set_has_query_group_join_questions_request();
        _impl_.kind_.query_group_join_questions_request_ = query_group_join_questions_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_group_join_questions_request)
}
void TurmsRequest::clear_query_group_join_questions_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryGroupJoinQuestionsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_group_join_questions_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_group_join_questions_request_ != nullptr) {
                _impl_.kind_.query_group_join_questions_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_group_invitation_request(
    ::turms::client::model::proto::UpdateGroupInvitationRequest* update_group_invitation_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_group_invitation_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_group_invitation_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_group_invitation_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_group_invitation_request, submessage_arena);
        }
        set_has_update_group_invitation_request();
        _impl_.kind_.update_group_invitation_request_ = update_group_invitation_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_group_invitation_request)
}
void TurmsRequest::clear_update_group_invitation_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateGroupInvitationRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_group_invitation_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_group_invitation_request_ != nullptr) {
                _impl_.kind_.update_group_invitation_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_group_join_question_request(
    ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
        update_group_join_question_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_group_join_question_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_group_join_question_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_group_join_question_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_group_join_question_request, submessage_arena);
        }
        set_has_update_group_join_question_request();
        _impl_.kind_.update_group_join_question_request_ = update_group_join_question_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_group_join_question_request)
}
void TurmsRequest::clear_update_group_join_question_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateGroupJoinQuestionRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_group_join_question_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_group_join_question_request_ != nullptr) {
                _impl_.kind_.update_group_join_question_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_group_join_request_request(
    ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
        update_group_join_request_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_group_join_request_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_group_join_request_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_group_join_request_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_group_join_request_request, submessage_arena);
        }
        set_has_update_group_join_request_request();
        _impl_.kind_.update_group_join_request_request_ = update_group_join_request_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_group_join_request_request)
}
void TurmsRequest::clear_update_group_join_request_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateGroupJoinRequestRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_group_join_request_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_group_join_request_request_ != nullptr) {
                _impl_.kind_.update_group_join_request_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_meeting_request(
    ::turms::client::model::proto::CreateMeetingRequest* create_meeting_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_meeting_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_meeting_request)->GetArena();
        if (message_arena != submessage_arena) {
            create_meeting_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_meeting_request, submessage_arena);
        }
        set_has_create_meeting_request();
        _impl_.kind_.create_meeting_request_ = create_meeting_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_meeting_request)
}
void TurmsRequest::clear_create_meeting_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateMeetingRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_meeting_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_meeting_request_ != nullptr) {
                _impl_.kind_.create_meeting_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_meeting_request(
    ::turms::client::model::proto::DeleteMeetingRequest* delete_meeting_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_meeting_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_meeting_request)->GetArena();
        if (message_arena != submessage_arena) {
            delete_meeting_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_meeting_request, submessage_arena);
        }
        set_has_delete_meeting_request();
        _impl_.kind_.delete_meeting_request_ = delete_meeting_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_meeting_request)
}
void TurmsRequest::clear_delete_meeting_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteMeetingRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_meeting_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_meeting_request_ != nullptr) {
                _impl_.kind_.delete_meeting_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_meetings_request(
    ::turms::client::model::proto::QueryMeetingsRequest* query_meetings_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_meetings_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_meetings_request)->GetArena();
        if (message_arena != submessage_arena) {
            query_meetings_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_meetings_request, submessage_arena);
        }
        set_has_query_meetings_request();
        _impl_.kind_.query_meetings_request_ = query_meetings_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_meetings_request)
}
void TurmsRequest::clear_query_meetings_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryMeetingsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_meetings_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_meetings_request_ != nullptr) {
                _impl_.kind_.query_meetings_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_meeting_request(
    ::turms::client::model::proto::UpdateMeetingRequest* update_meeting_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_meeting_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_meeting_request)->GetArena();
        if (message_arena != submessage_arena) {
            update_meeting_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_meeting_request, submessage_arena);
        }
        set_has_update_meeting_request();
        _impl_.kind_.update_meeting_request_ = update_meeting_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_meeting_request)
}
void TurmsRequest::clear_update_meeting_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateMeetingRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_meeting_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_meeting_request_ != nullptr) {
                _impl_.kind_.update_meeting_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_meeting_invitation_request(
    ::turms::client::model::proto::UpdateMeetingInvitationRequest*
        update_meeting_invitation_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_meeting_invitation_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_meeting_invitation_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_meeting_invitation_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_meeting_invitation_request, submessage_arena);
        }
        set_has_update_meeting_invitation_request();
        _impl_.kind_.update_meeting_invitation_request_ = update_meeting_invitation_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_meeting_invitation_request)
}
void TurmsRequest::clear_update_meeting_invitation_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateMeetingInvitationRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_meeting_invitation_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_meeting_invitation_request_ != nullptr) {
                _impl_.kind_.update_meeting_invitation_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_resource_request(
    ::turms::client::model::proto::DeleteResourceRequest* delete_resource_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_resource_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_resource_request)->GetArena();
        if (message_arena != submessage_arena) {
            delete_resource_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_resource_request, submessage_arena);
        }
        set_has_delete_resource_request();
        _impl_.kind_.delete_resource_request_ = delete_resource_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_resource_request)
}
void TurmsRequest::clear_delete_resource_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteResourceRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_resource_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_resource_request_ != nullptr) {
                _impl_.kind_.delete_resource_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_resource_download_info_request(
    ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
        query_resource_download_info_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_resource_download_info_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_resource_download_info_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_resource_download_info_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_resource_download_info_request, submessage_arena);
        }
        set_has_query_resource_download_info_request();
        _impl_.kind_.query_resource_download_info_request_ = query_resource_download_info_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_resource_download_info_request)
}
void TurmsRequest::clear_query_resource_download_info_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryResourceDownloadInfoRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_resource_download_info_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_resource_download_info_request_ != nullptr) {
                _impl_.kind_.query_resource_download_info_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_resource_upload_info_request(
    ::turms::client::model::proto::QueryResourceUploadInfoRequest*
        query_resource_upload_info_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_resource_upload_info_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_resource_upload_info_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_resource_upload_info_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_resource_upload_info_request, submessage_arena);
        }
        set_has_query_resource_upload_info_request();
        _impl_.kind_.query_resource_upload_info_request_ = query_resource_upload_info_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_resource_upload_info_request)
}
void TurmsRequest::clear_query_resource_upload_info_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryResourceUploadInfoRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_resource_upload_info_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_resource_upload_info_request_ != nullptr) {
                _impl_.kind_.query_resource_upload_info_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_message_attachment_infos_request(
    ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
        query_message_attachment_infos_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_message_attachment_infos_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(
                query_message_attachment_infos_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_message_attachment_infos_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_message_attachment_infos_request, submessage_arena);
        }
        set_has_query_message_attachment_infos_request();
        _impl_.kind_.query_message_attachment_infos_request_ =
            query_message_attachment_infos_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_message_attachment_infos_request)
}
void TurmsRequest::clear_query_message_attachment_infos_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryMessageAttachmentInfosRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_message_attachment_infos_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_message_attachment_infos_request_ != nullptr) {
                _impl_.kind_.query_message_attachment_infos_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_message_attachment_info_request(
    ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
        update_message_attachment_info_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_message_attachment_info_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(
                update_message_attachment_info_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_message_attachment_info_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_message_attachment_info_request, submessage_arena);
        }
        set_has_update_message_attachment_info_request();
        _impl_.kind_.update_message_attachment_info_request_ =
            update_message_attachment_info_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_message_attachment_info_request)
}
void TurmsRequest::clear_update_message_attachment_info_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateMessageAttachmentInfoRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_message_attachment_info_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_message_attachment_info_request_ != nullptr) {
                _impl_.kind_.update_message_attachment_info_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_conversation_settings_request(
    ::turms::client::model::proto::DeleteConversationSettingsRequest*
        delete_conversation_settings_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_conversation_settings_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_conversation_settings_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_conversation_settings_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_conversation_settings_request, submessage_arena);
        }
        set_has_delete_conversation_settings_request();
        _impl_.kind_.delete_conversation_settings_request_ = delete_conversation_settings_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_conversation_settings_request)
}
void TurmsRequest::clear_delete_conversation_settings_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteConversationSettingsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_conversation_settings_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_conversation_settings_request_ != nullptr) {
                _impl_.kind_.delete_conversation_settings_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_query_conversation_settings_request(
    ::turms::client::model::proto::QueryConversationSettingsRequest*
        query_conversation_settings_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (query_conversation_settings_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(query_conversation_settings_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            query_conversation_settings_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, query_conversation_settings_request, submessage_arena);
        }
        set_has_query_conversation_settings_request();
        _impl_.kind_.query_conversation_settings_request_ = query_conversation_settings_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.query_conversation_settings_request)
}
void TurmsRequest::clear_query_conversation_settings_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kQueryConversationSettingsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.query_conversation_settings_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.query_conversation_settings_request_ != nullptr) {
                _impl_.kind_.query_conversation_settings_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_update_conversation_settings_request(
    ::turms::client::model::proto::UpdateConversationSettingsRequest*
        update_conversation_settings_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (update_conversation_settings_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(update_conversation_settings_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            update_conversation_settings_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, update_conversation_settings_request, submessage_arena);
        }
        set_has_update_conversation_settings_request();
        _impl_.kind_.update_conversation_settings_request_ = update_conversation_settings_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.update_conversation_settings_request)
}
void TurmsRequest::clear_update_conversation_settings_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kUpdateConversationSettingsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.update_conversation_settings_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.update_conversation_settings_request_ != nullptr) {
                _impl_.kind_.update_conversation_settings_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_create_message_reactions_request(
    ::turms::client::model::proto::CreateMessageReactionsRequest*
        create_message_reactions_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (create_message_reactions_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(create_message_reactions_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            create_message_reactions_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, create_message_reactions_request, submessage_arena);
        }
        set_has_create_message_reactions_request();
        _impl_.kind_.create_message_reactions_request_ = create_message_reactions_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.create_message_reactions_request)
}
void TurmsRequest::clear_create_message_reactions_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kCreateMessageReactionsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.create_message_reactions_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.create_message_reactions_request_ != nullptr) {
                _impl_.kind_.create_message_reactions_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
void TurmsRequest::set_allocated_delete_message_reactions_request(
    ::turms::client::model::proto::DeleteMessageReactionsRequest*
        delete_message_reactions_request) {
    ::google::protobuf::Arena* message_arena = GetArena();
    clear_kind();
    if (delete_message_reactions_request) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(delete_message_reactions_request)
                ->GetArena();
        if (message_arena != submessage_arena) {
            delete_message_reactions_request = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, delete_message_reactions_request, submessage_arena);
        }
        set_has_delete_message_reactions_request();
        _impl_.kind_.delete_message_reactions_request_ = delete_message_reactions_request;
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsRequest.delete_message_reactions_request)
}
void TurmsRequest::clear_delete_message_reactions_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDeleteMessageReactionsRequest) {
        if (GetArena() == nullptr) {
            delete _impl_.kind_.delete_message_reactions_request_;
        } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
            if (_impl_.kind_.delete_message_reactions_request_ != nullptr) {
                _impl_.kind_.delete_message_reactions_request_->Clear();
            }
        }
        clear_has_kind();
    }
}
TurmsRequest::TurmsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
    SharedCtor(arena);
    // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.TurmsRequest)
}
inline PROTOBUF_NDEBUG_INLINE TurmsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena,
    const Impl_& from,
    const ::turms::client::model::proto::TurmsRequest& from_msg)
    : _has_bits_{from._has_bits_},
      _cached_size_{0},
      custom_attributes_{visibility, arena, from.custom_attributes_},
      kind_{},
      _oneof_case_{from._oneof_case_[0]} {
}

TurmsRequest::TurmsRequest(::google::protobuf::Arena* arena, const TurmsRequest& from)
    : ::google::protobuf::MessageLite(arena) {
    TurmsRequest* const _this = this;
    (void)_this;
    _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
    new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
    _impl_.request_id_ = from._impl_.request_id_;
    switch (kind_case()) {
        case KIND_NOT_SET:
            break;
        case kCreateSessionRequest:
            _impl_.kind_.create_session_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::CreateSessionRequest>(
                arena, *from._impl_.kind_.create_session_request_);
            break;
        case kDeleteSessionRequest:
            _impl_.kind_.delete_session_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::DeleteSessionRequest>(
                arena, *from._impl_.kind_.delete_session_request_);
            break;
        case kQueryConversationsRequest:
            _impl_.kind_.query_conversations_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryConversationsRequest>(
                    arena, *from._impl_.kind_.query_conversations_request_);
            break;
        case kUpdateConversationRequest:
            _impl_.kind_.update_conversation_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateConversationRequest>(
                    arena, *from._impl_.kind_.update_conversation_request_);
            break;
        case kUpdateTypingStatusRequest:
            _impl_.kind_.update_typing_status_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateTypingStatusRequest>(
                    arena, *from._impl_.kind_.update_typing_status_request_);
            break;
        case kCreateMessageRequest:
            _impl_.kind_.create_message_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::CreateMessageRequest>(
                arena, *from._impl_.kind_.create_message_request_);
            break;
        case kQueryMessagesRequest:
            _impl_.kind_.query_messages_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::QueryMessagesRequest>(
                arena, *from._impl_.kind_.query_messages_request_);
            break;
        case kUpdateMessageRequest:
            _impl_.kind_.update_message_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::UpdateMessageRequest>(
                arena, *from._impl_.kind_.update_message_request_);
            break;
        case kCreateGroupMembersRequest:
            _impl_.kind_.create_group_members_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CreateGroupMembersRequest>(
                    arena, *from._impl_.kind_.create_group_members_request_);
            break;
        case kDeleteGroupMembersRequest:
            _impl_.kind_.delete_group_members_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteGroupMembersRequest>(
                    arena, *from._impl_.kind_.delete_group_members_request_);
            break;
        case kQueryGroupMembersRequest:
            _impl_.kind_.query_group_members_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryGroupMembersRequest>(
                    arena, *from._impl_.kind_.query_group_members_request_);
            break;
        case kUpdateGroupMemberRequest:
            _impl_.kind_.update_group_member_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateGroupMemberRequest>(
                    arena, *from._impl_.kind_.update_group_member_request_);
            break;
        case kQueryUserProfilesRequest:
            _impl_.kind_.query_user_profiles_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryUserProfilesRequest>(
                    arena, *from._impl_.kind_.query_user_profiles_request_);
            break;
        case kQueryNearbyUsersRequest:
            _impl_.kind_.query_nearby_users_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryNearbyUsersRequest>(
                    arena, *from._impl_.kind_.query_nearby_users_request_);
            break;
        case kQueryUserOnlineStatusesRequest:
            _impl_.kind_.query_user_online_statuses_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryUserOnlineStatusesRequest>(
                    arena, *from._impl_.kind_.query_user_online_statuses_request_);
            break;
        case kUpdateUserLocationRequest:
            _impl_.kind_.update_user_location_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateUserLocationRequest>(
                    arena, *from._impl_.kind_.update_user_location_request_);
            break;
        case kUpdateUserOnlineStatusRequest:
            _impl_.kind_.update_user_online_status_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateUserOnlineStatusRequest>(
                    arena, *from._impl_.kind_.update_user_online_status_request_);
            break;
        case kUpdateUserRequest:
            _impl_.kind_.update_user_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::UpdateUserRequest>(
                arena, *from._impl_.kind_.update_user_request_);
            break;
        case kUpdateUserSettingsRequest:
            _impl_.kind_.update_user_settings_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateUserSettingsRequest>(
                    arena, *from._impl_.kind_.update_user_settings_request_);
            break;
        case kDeleteUserSettingsRequest:
            _impl_.kind_.delete_user_settings_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteUserSettingsRequest>(
                    arena, *from._impl_.kind_.delete_user_settings_request_);
            break;
        case kQueryUserSettingsRequest:
            _impl_.kind_.query_user_settings_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryUserSettingsRequest>(
                    arena, *from._impl_.kind_.query_user_settings_request_);
            break;
        case kCreateFriendRequestRequest:
            _impl_.kind_.create_friend_request_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CreateFriendRequestRequest>(
                    arena, *from._impl_.kind_.create_friend_request_request_);
            break;
        case kCreateRelationshipGroupRequest:
            _impl_.kind_.create_relationship_group_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CreateRelationshipGroupRequest>(
                    arena, *from._impl_.kind_.create_relationship_group_request_);
            break;
        case kCreateRelationshipRequest:
            _impl_.kind_.create_relationship_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CreateRelationshipRequest>(
                    arena, *from._impl_.kind_.create_relationship_request_);
            break;
        case kDeleteFriendRequestRequest:
            _impl_.kind_.delete_friend_request_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteFriendRequestRequest>(
                    arena, *from._impl_.kind_.delete_friend_request_request_);
            break;
        case kDeleteRelationshipGroupRequest:
            _impl_.kind_.delete_relationship_group_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteRelationshipGroupRequest>(
                    arena, *from._impl_.kind_.delete_relationship_group_request_);
            break;
        case kDeleteRelationshipRequest:
            _impl_.kind_.delete_relationship_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteRelationshipRequest>(
                    arena, *from._impl_.kind_.delete_relationship_request_);
            break;
        case kQueryFriendRequestsRequest:
            _impl_.kind_.query_friend_requests_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryFriendRequestsRequest>(
                    arena, *from._impl_.kind_.query_friend_requests_request_);
            break;
        case kQueryRelatedUserIdsRequest:
            _impl_.kind_.query_related_user_ids_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryRelatedUserIdsRequest>(
                    arena, *from._impl_.kind_.query_related_user_ids_request_);
            break;
        case kQueryRelationshipGroupsRequest:
            _impl_.kind_.query_relationship_groups_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryRelationshipGroupsRequest>(
                    arena, *from._impl_.kind_.query_relationship_groups_request_);
            break;
        case kQueryRelationshipsRequest:
            _impl_.kind_.query_relationships_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryRelationshipsRequest>(
                    arena, *from._impl_.kind_.query_relationships_request_);
            break;
        case kUpdateFriendRequestRequest:
            _impl_.kind_.update_friend_request_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateFriendRequestRequest>(
                    arena, *from._impl_.kind_.update_friend_request_request_);
            break;
        case kUpdateRelationshipGroupRequest:
            _impl_.kind_.update_relationship_group_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateRelationshipGroupRequest>(
                    arena, *from._impl_.kind_.update_relationship_group_request_);
            break;
        case kUpdateRelationshipRequest:
            _impl_.kind_.update_relationship_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateRelationshipRequest>(
                    arena, *from._impl_.kind_.update_relationship_request_);
            break;
        case kCreateGroupRequest:
            _impl_.kind_.create_group_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::CreateGroupRequest>(
                arena, *from._impl_.kind_.create_group_request_);
            break;
        case kDeleteGroupRequest:
            _impl_.kind_.delete_group_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::DeleteGroupRequest>(
                arena, *from._impl_.kind_.delete_group_request_);
            break;
        case kQueryGroupsRequest:
            _impl_.kind_.query_groups_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::QueryGroupsRequest>(
                arena, *from._impl_.kind_.query_groups_request_);
            break;
        case kQueryJoinedGroupIdsRequest:
            _impl_.kind_.query_joined_group_ids_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryJoinedGroupIdsRequest>(
                    arena, *from._impl_.kind_.query_joined_group_ids_request_);
            break;
        case kQueryJoinedGroupInfosRequest:
            _impl_.kind_.query_joined_group_infos_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryJoinedGroupInfosRequest>(
                    arena, *from._impl_.kind_.query_joined_group_infos_request_);
            break;
        case kUpdateGroupRequest:
            _impl_.kind_.update_group_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::UpdateGroupRequest>(
                arena, *from._impl_.kind_.update_group_request_);
            break;
        case kCreateGroupBlockedUserRequest:
            _impl_.kind_.create_group_blocked_user_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CreateGroupBlockedUserRequest>(
                    arena, *from._impl_.kind_.create_group_blocked_user_request_);
            break;
        case kDeleteGroupBlockedUserRequest:
            _impl_.kind_.delete_group_blocked_user_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteGroupBlockedUserRequest>(
                    arena, *from._impl_.kind_.delete_group_blocked_user_request_);
            break;
        case kQueryGroupBlockedUserIdsRequest:
            _impl_.kind_.query_group_blocked_user_ids_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest>(
                    arena, *from._impl_.kind_.query_group_blocked_user_ids_request_);
            break;
        case kQueryGroupBlockedUserInfosRequest:
            _impl_.kind_.query_group_blocked_user_infos_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest>(
                    arena, *from._impl_.kind_.query_group_blocked_user_infos_request_);
            break;
        case kCheckGroupJoinQuestionsAnswersRequest:
            _impl_.kind_.check_group_join_questions_answers_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest>(
                    arena, *from._impl_.kind_.check_group_join_questions_answers_request_);
            break;
        case kCreateGroupInvitationRequest:
            _impl_.kind_.create_group_invitation_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CreateGroupInvitationRequest>(
                    arena, *from._impl_.kind_.create_group_invitation_request_);
            break;
        case kCreateGroupJoinRequestRequest:
            _impl_.kind_.create_group_join_request_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CreateGroupJoinRequestRequest>(
                    arena, *from._impl_.kind_.create_group_join_request_request_);
            break;
        case kCreateGroupJoinQuestionsRequest:
            _impl_.kind_.create_group_join_questions_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CreateGroupJoinQuestionsRequest>(
                    arena, *from._impl_.kind_.create_group_join_questions_request_);
            break;
        case kDeleteGroupInvitationRequest:
            _impl_.kind_.delete_group_invitation_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteGroupInvitationRequest>(
                    arena, *from._impl_.kind_.delete_group_invitation_request_);
            break;
        case kDeleteGroupJoinRequestRequest:
            _impl_.kind_.delete_group_join_request_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteGroupJoinRequestRequest>(
                    arena, *from._impl_.kind_.delete_group_join_request_request_);
            break;
        case kDeleteGroupJoinQuestionsRequest:
            _impl_.kind_.delete_group_join_questions_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest>(
                    arena, *from._impl_.kind_.delete_group_join_questions_request_);
            break;
        case kQueryGroupInvitationsRequest:
            _impl_.kind_.query_group_invitations_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryGroupInvitationsRequest>(
                    arena, *from._impl_.kind_.query_group_invitations_request_);
            break;
        case kQueryGroupJoinRequestsRequest:
            _impl_.kind_.query_group_join_requests_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryGroupJoinRequestsRequest>(
                    arena, *from._impl_.kind_.query_group_join_requests_request_);
            break;
        case kQueryGroupJoinQuestionsRequest:
            _impl_.kind_.query_group_join_questions_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryGroupJoinQuestionsRequest>(
                    arena, *from._impl_.kind_.query_group_join_questions_request_);
            break;
        case kUpdateGroupInvitationRequest:
            _impl_.kind_.update_group_invitation_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateGroupInvitationRequest>(
                    arena, *from._impl_.kind_.update_group_invitation_request_);
            break;
        case kUpdateGroupJoinQuestionRequest:
            _impl_.kind_.update_group_join_question_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateGroupJoinQuestionRequest>(
                    arena, *from._impl_.kind_.update_group_join_question_request_);
            break;
        case kUpdateGroupJoinRequestRequest:
            _impl_.kind_.update_group_join_request_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateGroupJoinRequestRequest>(
                    arena, *from._impl_.kind_.update_group_join_request_request_);
            break;
        case kCreateMeetingRequest:
            _impl_.kind_.create_meeting_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::CreateMeetingRequest>(
                arena, *from._impl_.kind_.create_meeting_request_);
            break;
        case kDeleteMeetingRequest:
            _impl_.kind_.delete_meeting_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::DeleteMeetingRequest>(
                arena, *from._impl_.kind_.delete_meeting_request_);
            break;
        case kQueryMeetingsRequest:
            _impl_.kind_.query_meetings_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::QueryMeetingsRequest>(
                arena, *from._impl_.kind_.query_meetings_request_);
            break;
        case kUpdateMeetingRequest:
            _impl_.kind_.update_meeting_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::UpdateMeetingRequest>(
                arena, *from._impl_.kind_.update_meeting_request_);
            break;
        case kUpdateMeetingInvitationRequest:
            _impl_.kind_.update_meeting_invitation_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateMeetingInvitationRequest>(
                    arena, *from._impl_.kind_.update_meeting_invitation_request_);
            break;
        case kDeleteResourceRequest:
            _impl_.kind_.delete_resource_request_ = ::google::protobuf::MessageLite::CopyConstruct<
                ::turms::client::model::proto::DeleteResourceRequest>(
                arena, *from._impl_.kind_.delete_resource_request_);
            break;
        case kQueryResourceDownloadInfoRequest:
            _impl_.kind_.query_resource_download_info_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryResourceDownloadInfoRequest>(
                    arena, *from._impl_.kind_.query_resource_download_info_request_);
            break;
        case kQueryResourceUploadInfoRequest:
            _impl_.kind_.query_resource_upload_info_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryResourceUploadInfoRequest>(
                    arena, *from._impl_.kind_.query_resource_upload_info_request_);
            break;
        case kQueryMessageAttachmentInfosRequest:
            _impl_.kind_.query_message_attachment_infos_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryMessageAttachmentInfosRequest>(
                    arena, *from._impl_.kind_.query_message_attachment_infos_request_);
            break;
        case kUpdateMessageAttachmentInfoRequest:
            _impl_.kind_.update_message_attachment_info_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest>(
                    arena, *from._impl_.kind_.update_message_attachment_info_request_);
            break;
        case kDeleteConversationSettingsRequest:
            _impl_.kind_.delete_conversation_settings_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteConversationSettingsRequest>(
                    arena, *from._impl_.kind_.delete_conversation_settings_request_);
            break;
        case kQueryConversationSettingsRequest:
            _impl_.kind_.query_conversation_settings_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::QueryConversationSettingsRequest>(
                    arena, *from._impl_.kind_.query_conversation_settings_request_);
            break;
        case kUpdateConversationSettingsRequest:
            _impl_.kind_.update_conversation_settings_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::UpdateConversationSettingsRequest>(
                    arena, *from._impl_.kind_.update_conversation_settings_request_);
            break;
        case kCreateMessageReactionsRequest:
            _impl_.kind_.create_message_reactions_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::CreateMessageReactionsRequest>(
                    arena, *from._impl_.kind_.create_message_reactions_request_);
            break;
        case kDeleteMessageReactionsRequest:
            _impl_.kind_.delete_message_reactions_request_ =
                ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::DeleteMessageReactionsRequest>(
                    arena, *from._impl_.kind_.delete_message_reactions_request_);
            break;
    }

    // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.TurmsRequest)
}
inline PROTOBUF_NDEBUG_INLINE TurmsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena)
    : _cached_size_{0},
      custom_attributes_{visibility, arena},
      kind_{},
      _oneof_case_{} {
}

inline void TurmsRequest::SharedCtor(::_pb::Arena* arena) {
    new (&_impl_) Impl_(internal_visibility(), arena);
    _impl_.request_id_ = {};
}
TurmsRequest::~TurmsRequest() {
    // @@protoc_insertion_point(destructor:turms.client.model.proto.TurmsRequest)
    _internal_metadata_.Delete<std::string>();
    SharedDtor();
}
inline void TurmsRequest::SharedDtor() {
    ABSL_DCHECK(GetArena() == nullptr);
    if (has_kind()) {
        clear_kind();
    }
    _impl_.~Impl_();
}

void TurmsRequest::clear_kind() {
    // @@protoc_insertion_point(one_of_clear_start:turms.client.model.proto.TurmsRequest)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    switch (kind_case()) {
        case kCreateSessionRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_session_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_session_request_ != nullptr) {
                    _impl_.kind_.create_session_request_->Clear();
                }
            }
            break;
        }
        case kDeleteSessionRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_session_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_session_request_ != nullptr) {
                    _impl_.kind_.delete_session_request_->Clear();
                }
            }
            break;
        }
        case kQueryConversationsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_conversations_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_conversations_request_ != nullptr) {
                    _impl_.kind_.query_conversations_request_->Clear();
                }
            }
            break;
        }
        case kUpdateConversationRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_conversation_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_conversation_request_ != nullptr) {
                    _impl_.kind_.update_conversation_request_->Clear();
                }
            }
            break;
        }
        case kUpdateTypingStatusRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_typing_status_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_typing_status_request_ != nullptr) {
                    _impl_.kind_.update_typing_status_request_->Clear();
                }
            }
            break;
        }
        case kCreateMessageRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_message_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_message_request_ != nullptr) {
                    _impl_.kind_.create_message_request_->Clear();
                }
            }
            break;
        }
        case kQueryMessagesRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_messages_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_messages_request_ != nullptr) {
                    _impl_.kind_.query_messages_request_->Clear();
                }
            }
            break;
        }
        case kUpdateMessageRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_message_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_message_request_ != nullptr) {
                    _impl_.kind_.update_message_request_->Clear();
                }
            }
            break;
        }
        case kCreateGroupMembersRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_group_members_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_group_members_request_ != nullptr) {
                    _impl_.kind_.create_group_members_request_->Clear();
                }
            }
            break;
        }
        case kDeleteGroupMembersRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_group_members_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_group_members_request_ != nullptr) {
                    _impl_.kind_.delete_group_members_request_->Clear();
                }
            }
            break;
        }
        case kQueryGroupMembersRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_group_members_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_group_members_request_ != nullptr) {
                    _impl_.kind_.query_group_members_request_->Clear();
                }
            }
            break;
        }
        case kUpdateGroupMemberRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_group_member_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_group_member_request_ != nullptr) {
                    _impl_.kind_.update_group_member_request_->Clear();
                }
            }
            break;
        }
        case kQueryUserProfilesRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_user_profiles_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_user_profiles_request_ != nullptr) {
                    _impl_.kind_.query_user_profiles_request_->Clear();
                }
            }
            break;
        }
        case kQueryNearbyUsersRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_nearby_users_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_nearby_users_request_ != nullptr) {
                    _impl_.kind_.query_nearby_users_request_->Clear();
                }
            }
            break;
        }
        case kQueryUserOnlineStatusesRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_user_online_statuses_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_user_online_statuses_request_ != nullptr) {
                    _impl_.kind_.query_user_online_statuses_request_->Clear();
                }
            }
            break;
        }
        case kUpdateUserLocationRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_user_location_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_user_location_request_ != nullptr) {
                    _impl_.kind_.update_user_location_request_->Clear();
                }
            }
            break;
        }
        case kUpdateUserOnlineStatusRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_user_online_status_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_user_online_status_request_ != nullptr) {
                    _impl_.kind_.update_user_online_status_request_->Clear();
                }
            }
            break;
        }
        case kUpdateUserRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_user_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_user_request_ != nullptr) {
                    _impl_.kind_.update_user_request_->Clear();
                }
            }
            break;
        }
        case kUpdateUserSettingsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_user_settings_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_user_settings_request_ != nullptr) {
                    _impl_.kind_.update_user_settings_request_->Clear();
                }
            }
            break;
        }
        case kDeleteUserSettingsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_user_settings_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_user_settings_request_ != nullptr) {
                    _impl_.kind_.delete_user_settings_request_->Clear();
                }
            }
            break;
        }
        case kQueryUserSettingsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_user_settings_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_user_settings_request_ != nullptr) {
                    _impl_.kind_.query_user_settings_request_->Clear();
                }
            }
            break;
        }
        case kCreateFriendRequestRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_friend_request_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_friend_request_request_ != nullptr) {
                    _impl_.kind_.create_friend_request_request_->Clear();
                }
            }
            break;
        }
        case kCreateRelationshipGroupRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_relationship_group_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_relationship_group_request_ != nullptr) {
                    _impl_.kind_.create_relationship_group_request_->Clear();
                }
            }
            break;
        }
        case kCreateRelationshipRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_relationship_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_relationship_request_ != nullptr) {
                    _impl_.kind_.create_relationship_request_->Clear();
                }
            }
            break;
        }
        case kDeleteFriendRequestRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_friend_request_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_friend_request_request_ != nullptr) {
                    _impl_.kind_.delete_friend_request_request_->Clear();
                }
            }
            break;
        }
        case kDeleteRelationshipGroupRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_relationship_group_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_relationship_group_request_ != nullptr) {
                    _impl_.kind_.delete_relationship_group_request_->Clear();
                }
            }
            break;
        }
        case kDeleteRelationshipRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_relationship_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_relationship_request_ != nullptr) {
                    _impl_.kind_.delete_relationship_request_->Clear();
                }
            }
            break;
        }
        case kQueryFriendRequestsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_friend_requests_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_friend_requests_request_ != nullptr) {
                    _impl_.kind_.query_friend_requests_request_->Clear();
                }
            }
            break;
        }
        case kQueryRelatedUserIdsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_related_user_ids_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_related_user_ids_request_ != nullptr) {
                    _impl_.kind_.query_related_user_ids_request_->Clear();
                }
            }
            break;
        }
        case kQueryRelationshipGroupsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_relationship_groups_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_relationship_groups_request_ != nullptr) {
                    _impl_.kind_.query_relationship_groups_request_->Clear();
                }
            }
            break;
        }
        case kQueryRelationshipsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_relationships_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_relationships_request_ != nullptr) {
                    _impl_.kind_.query_relationships_request_->Clear();
                }
            }
            break;
        }
        case kUpdateFriendRequestRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_friend_request_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_friend_request_request_ != nullptr) {
                    _impl_.kind_.update_friend_request_request_->Clear();
                }
            }
            break;
        }
        case kUpdateRelationshipGroupRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_relationship_group_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_relationship_group_request_ != nullptr) {
                    _impl_.kind_.update_relationship_group_request_->Clear();
                }
            }
            break;
        }
        case kUpdateRelationshipRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_relationship_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_relationship_request_ != nullptr) {
                    _impl_.kind_.update_relationship_request_->Clear();
                }
            }
            break;
        }
        case kCreateGroupRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_group_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_group_request_ != nullptr) {
                    _impl_.kind_.create_group_request_->Clear();
                }
            }
            break;
        }
        case kDeleteGroupRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_group_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_group_request_ != nullptr) {
                    _impl_.kind_.delete_group_request_->Clear();
                }
            }
            break;
        }
        case kQueryGroupsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_groups_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_groups_request_ != nullptr) {
                    _impl_.kind_.query_groups_request_->Clear();
                }
            }
            break;
        }
        case kQueryJoinedGroupIdsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_joined_group_ids_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_joined_group_ids_request_ != nullptr) {
                    _impl_.kind_.query_joined_group_ids_request_->Clear();
                }
            }
            break;
        }
        case kQueryJoinedGroupInfosRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_joined_group_infos_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_joined_group_infos_request_ != nullptr) {
                    _impl_.kind_.query_joined_group_infos_request_->Clear();
                }
            }
            break;
        }
        case kUpdateGroupRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_group_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_group_request_ != nullptr) {
                    _impl_.kind_.update_group_request_->Clear();
                }
            }
            break;
        }
        case kCreateGroupBlockedUserRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_group_blocked_user_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_group_blocked_user_request_ != nullptr) {
                    _impl_.kind_.create_group_blocked_user_request_->Clear();
                }
            }
            break;
        }
        case kDeleteGroupBlockedUserRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_group_blocked_user_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_group_blocked_user_request_ != nullptr) {
                    _impl_.kind_.delete_group_blocked_user_request_->Clear();
                }
            }
            break;
        }
        case kQueryGroupBlockedUserIdsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_group_blocked_user_ids_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_group_blocked_user_ids_request_ != nullptr) {
                    _impl_.kind_.query_group_blocked_user_ids_request_->Clear();
                }
            }
            break;
        }
        case kQueryGroupBlockedUserInfosRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_group_blocked_user_infos_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_group_blocked_user_infos_request_ != nullptr) {
                    _impl_.kind_.query_group_blocked_user_infos_request_->Clear();
                }
            }
            break;
        }
        case kCheckGroupJoinQuestionsAnswersRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.check_group_join_questions_answers_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.check_group_join_questions_answers_request_ != nullptr) {
                    _impl_.kind_.check_group_join_questions_answers_request_->Clear();
                }
            }
            break;
        }
        case kCreateGroupInvitationRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_group_invitation_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_group_invitation_request_ != nullptr) {
                    _impl_.kind_.create_group_invitation_request_->Clear();
                }
            }
            break;
        }
        case kCreateGroupJoinRequestRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_group_join_request_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_group_join_request_request_ != nullptr) {
                    _impl_.kind_.create_group_join_request_request_->Clear();
                }
            }
            break;
        }
        case kCreateGroupJoinQuestionsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_group_join_questions_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_group_join_questions_request_ != nullptr) {
                    _impl_.kind_.create_group_join_questions_request_->Clear();
                }
            }
            break;
        }
        case kDeleteGroupInvitationRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_group_invitation_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_group_invitation_request_ != nullptr) {
                    _impl_.kind_.delete_group_invitation_request_->Clear();
                }
            }
            break;
        }
        case kDeleteGroupJoinRequestRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_group_join_request_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_group_join_request_request_ != nullptr) {
                    _impl_.kind_.delete_group_join_request_request_->Clear();
                }
            }
            break;
        }
        case kDeleteGroupJoinQuestionsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_group_join_questions_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_group_join_questions_request_ != nullptr) {
                    _impl_.kind_.delete_group_join_questions_request_->Clear();
                }
            }
            break;
        }
        case kQueryGroupInvitationsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_group_invitations_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_group_invitations_request_ != nullptr) {
                    _impl_.kind_.query_group_invitations_request_->Clear();
                }
            }
            break;
        }
        case kQueryGroupJoinRequestsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_group_join_requests_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_group_join_requests_request_ != nullptr) {
                    _impl_.kind_.query_group_join_requests_request_->Clear();
                }
            }
            break;
        }
        case kQueryGroupJoinQuestionsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_group_join_questions_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_group_join_questions_request_ != nullptr) {
                    _impl_.kind_.query_group_join_questions_request_->Clear();
                }
            }
            break;
        }
        case kUpdateGroupInvitationRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_group_invitation_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_group_invitation_request_ != nullptr) {
                    _impl_.kind_.update_group_invitation_request_->Clear();
                }
            }
            break;
        }
        case kUpdateGroupJoinQuestionRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_group_join_question_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_group_join_question_request_ != nullptr) {
                    _impl_.kind_.update_group_join_question_request_->Clear();
                }
            }
            break;
        }
        case kUpdateGroupJoinRequestRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_group_join_request_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_group_join_request_request_ != nullptr) {
                    _impl_.kind_.update_group_join_request_request_->Clear();
                }
            }
            break;
        }
        case kCreateMeetingRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_meeting_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_meeting_request_ != nullptr) {
                    _impl_.kind_.create_meeting_request_->Clear();
                }
            }
            break;
        }
        case kDeleteMeetingRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_meeting_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_meeting_request_ != nullptr) {
                    _impl_.kind_.delete_meeting_request_->Clear();
                }
            }
            break;
        }
        case kQueryMeetingsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_meetings_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_meetings_request_ != nullptr) {
                    _impl_.kind_.query_meetings_request_->Clear();
                }
            }
            break;
        }
        case kUpdateMeetingRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_meeting_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_meeting_request_ != nullptr) {
                    _impl_.kind_.update_meeting_request_->Clear();
                }
            }
            break;
        }
        case kUpdateMeetingInvitationRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_meeting_invitation_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_meeting_invitation_request_ != nullptr) {
                    _impl_.kind_.update_meeting_invitation_request_->Clear();
                }
            }
            break;
        }
        case kDeleteResourceRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_resource_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_resource_request_ != nullptr) {
                    _impl_.kind_.delete_resource_request_->Clear();
                }
            }
            break;
        }
        case kQueryResourceDownloadInfoRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_resource_download_info_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_resource_download_info_request_ != nullptr) {
                    _impl_.kind_.query_resource_download_info_request_->Clear();
                }
            }
            break;
        }
        case kQueryResourceUploadInfoRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_resource_upload_info_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_resource_upload_info_request_ != nullptr) {
                    _impl_.kind_.query_resource_upload_info_request_->Clear();
                }
            }
            break;
        }
        case kQueryMessageAttachmentInfosRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_message_attachment_infos_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_message_attachment_infos_request_ != nullptr) {
                    _impl_.kind_.query_message_attachment_infos_request_->Clear();
                }
            }
            break;
        }
        case kUpdateMessageAttachmentInfoRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_message_attachment_info_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_message_attachment_info_request_ != nullptr) {
                    _impl_.kind_.update_message_attachment_info_request_->Clear();
                }
            }
            break;
        }
        case kDeleteConversationSettingsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_conversation_settings_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_conversation_settings_request_ != nullptr) {
                    _impl_.kind_.delete_conversation_settings_request_->Clear();
                }
            }
            break;
        }
        case kQueryConversationSettingsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.query_conversation_settings_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.query_conversation_settings_request_ != nullptr) {
                    _impl_.kind_.query_conversation_settings_request_->Clear();
                }
            }
            break;
        }
        case kUpdateConversationSettingsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.update_conversation_settings_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.update_conversation_settings_request_ != nullptr) {
                    _impl_.kind_.update_conversation_settings_request_->Clear();
                }
            }
            break;
        }
        case kCreateMessageReactionsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.create_message_reactions_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.create_message_reactions_request_ != nullptr) {
                    _impl_.kind_.create_message_reactions_request_->Clear();
                }
            }
            break;
        }
        case kDeleteMessageReactionsRequest: {
            if (GetArena() == nullptr) {
                delete _impl_.kind_.delete_message_reactions_request_;
            } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
                if (_impl_.kind_.delete_message_reactions_request_ != nullptr) {
                    _impl_.kind_.delete_message_reactions_request_->Clear();
                }
            }
            break;
        }
        case KIND_NOT_SET: {
            break;
        }
    }
    _impl_._oneof_case_[0] = KIND_NOT_SET;
}

const ::google::protobuf::MessageLite::ClassData* TurmsRequest::GetClassData() const {
    PROTOBUF_CONSTINIT static const ClassDataLite<38> _data_ = {
        {
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_._cached_size_),
            true,
        },
        "turms.client.model.proto.TurmsRequest",
    };

    return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<1, 74, 73, 0, 47>
    TurmsRequest::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_._has_bits_),
            0,  // no _extensions_
            1201,
            8,  // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294950912,  // skipmap
            offsetof(decltype(_table_), field_entries),
            74,  // num_field_entries
            73,  // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            &_TurmsRequest_default_instance_._instance,
            nullptr,                                // post_loop_handler
            ::_pbi::TcParser::GenericFallbackLite,  // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::TurmsRequest>(),  // to_prefetch
#endif                                                           // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // repeated .turms.client.model.proto.Value custom_attributes = 2;
            {::_pbi::TcParser::FastMtR1,
             {18, 63, 0, PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.custom_attributes_)}},
            // optional int64 request_id = 1;
            {::_pbi::TcParser::FastV64S1,
             {8, 0, 0, PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.request_id_)}},
        }},
        {{100, 0,     1,     65024, 14,    200, 0,     1,     57344, 23,    300,  0,
          1,   65472, 36,    400,   0,     1,   65520, 42,    500,   0,     1,    57344,
          46,  900,   0,     1,     65504, 59,  1000,  0,     1,     65504, 64,   1100,
          0,   1,     65528, 69,    1200,  0,   1,     65532, 72,    65535, 65535}},
        {{
            // optional int64 request_id = 1;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.request_id_),
             _Internal::kHasBitsOffset + 0,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // repeated .turms.client.model.proto.Value custom_attributes = 2;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.custom_attributes_),
             -1,
             0,
             (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateSessionRequest create_session_request = 3;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_session_request_),
             _Internal::kOneofCaseOffset + 0,
             1,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteSessionRequest delete_session_request = 4;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_session_request_),
             _Internal::kOneofCaseOffset + 0,
             2,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryConversationsRequest query_conversations_request = 5;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_conversations_request_),
             _Internal::kOneofCaseOffset + 0,
             3,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateConversationRequest update_conversation_request = 6;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_conversation_request_),
             _Internal::kOneofCaseOffset + 0,
             4,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateTypingStatusRequest update_typing_status_request = 7;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_typing_status_request_),
             _Internal::kOneofCaseOffset + 0,
             5,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateMessageRequest create_message_request = 8;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_message_request_),
             _Internal::kOneofCaseOffset + 0,
             6,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryMessagesRequest query_messages_request = 9;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_messages_request_),
             _Internal::kOneofCaseOffset + 0,
             7,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateMessageRequest update_message_request = 10;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_message_request_),
             _Internal::kOneofCaseOffset + 0,
             8,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateGroupMembersRequest create_group_members_request =
            // 11;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_group_members_request_),
             _Internal::kOneofCaseOffset + 0,
             9,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteGroupMembersRequest delete_group_members_request =
            // 12;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_group_members_request_),
             _Internal::kOneofCaseOffset + 0,
             10,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryGroupMembersRequest query_group_members_request = 13;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_group_members_request_),
             _Internal::kOneofCaseOffset + 0,
             11,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateGroupMemberRequest update_group_member_request = 14;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_group_member_request_),
             _Internal::kOneofCaseOffset + 0,
             12,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryUserProfilesRequest query_user_profiles_request = 100;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_user_profiles_request_),
             _Internal::kOneofCaseOffset + 0,
             13,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryNearbyUsersRequest query_nearby_users_request = 101;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_nearby_users_request_),
             _Internal::kOneofCaseOffset + 0,
             14,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryUserOnlineStatusesRequest
            // query_user_online_statuses_request = 102;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_user_online_statuses_request_),
             _Internal::kOneofCaseOffset + 0,
             15,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateUserLocationRequest update_user_location_request =
            // 103;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_user_location_request_),
             _Internal::kOneofCaseOffset + 0,
             16,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateUserOnlineStatusRequest
            // update_user_online_status_request = 104;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_user_online_status_request_),
             _Internal::kOneofCaseOffset + 0,
             17,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateUserRequest update_user_request = 105;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_user_request_),
             _Internal::kOneofCaseOffset + 0,
             18,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateUserSettingsRequest update_user_settings_request =
            // 106;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_user_settings_request_),
             _Internal::kOneofCaseOffset + 0,
             19,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteUserSettingsRequest delete_user_settings_request =
            // 107;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_user_settings_request_),
             _Internal::kOneofCaseOffset + 0,
             20,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryUserSettingsRequest query_user_settings_request = 108;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_user_settings_request_),
             _Internal::kOneofCaseOffset + 0,
             21,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateFriendRequestRequest create_friend_request_request =
            // 200;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_friend_request_request_),
             _Internal::kOneofCaseOffset + 0,
             22,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateRelationshipGroupRequest
            // create_relationship_group_request = 201;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_relationship_group_request_),
             _Internal::kOneofCaseOffset + 0,
             23,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateRelationshipRequest create_relationship_request =
            // 202;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_relationship_request_),
             _Internal::kOneofCaseOffset + 0,
             24,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteFriendRequestRequest delete_friend_request_request =
            // 203;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_friend_request_request_),
             _Internal::kOneofCaseOffset + 0,
             25,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteRelationshipGroupRequest
            // delete_relationship_group_request = 204;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_relationship_group_request_),
             _Internal::kOneofCaseOffset + 0,
             26,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteRelationshipRequest delete_relationship_request =
            // 205;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_relationship_request_),
             _Internal::kOneofCaseOffset + 0,
             27,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryFriendRequestsRequest query_friend_requests_request =
            // 206;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_friend_requests_request_),
             _Internal::kOneofCaseOffset + 0,
             28,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryRelatedUserIdsRequest query_related_user_ids_request =
            // 207;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_related_user_ids_request_),
             _Internal::kOneofCaseOffset + 0,
             29,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryRelationshipGroupsRequest
            // query_relationship_groups_request = 208;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_relationship_groups_request_),
             _Internal::kOneofCaseOffset + 0,
             30,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryRelationshipsRequest query_relationships_request =
            // 209;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_relationships_request_),
             _Internal::kOneofCaseOffset + 0,
             31,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateFriendRequestRequest update_friend_request_request =
            // 210;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_friend_request_request_),
             _Internal::kOneofCaseOffset + 0,
             32,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateRelationshipGroupRequest
            // update_relationship_group_request = 211;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_relationship_group_request_),
             _Internal::kOneofCaseOffset + 0,
             33,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateRelationshipRequest update_relationship_request =
            // 212;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_relationship_request_),
             _Internal::kOneofCaseOffset + 0,
             34,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateGroupRequest create_group_request = 300;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_group_request_),
             _Internal::kOneofCaseOffset + 0,
             35,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteGroupRequest delete_group_request = 301;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_group_request_),
             _Internal::kOneofCaseOffset + 0,
             36,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryGroupsRequest query_groups_request = 302;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_groups_request_),
             _Internal::kOneofCaseOffset + 0,
             37,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryJoinedGroupIdsRequest query_joined_group_ids_request =
            // 303;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_joined_group_ids_request_),
             _Internal::kOneofCaseOffset + 0,
             38,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryJoinedGroupInfosRequest
            // query_joined_group_infos_request = 304;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_joined_group_infos_request_),
             _Internal::kOneofCaseOffset + 0,
             39,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateGroupRequest update_group_request = 305;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_group_request_),
             _Internal::kOneofCaseOffset + 0,
             40,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateGroupBlockedUserRequest
            // create_group_blocked_user_request = 400;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_group_blocked_user_request_),
             _Internal::kOneofCaseOffset + 0,
             41,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteGroupBlockedUserRequest
            // delete_group_blocked_user_request = 401;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_group_blocked_user_request_),
             _Internal::kOneofCaseOffset + 0,
             42,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryGroupBlockedUserIdsRequest
            // query_group_blocked_user_ids_request = 402;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest,
                                   _impl_.kind_.query_group_blocked_user_ids_request_),
             _Internal::kOneofCaseOffset + 0,
             43,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryGroupBlockedUserInfosRequest
            // query_group_blocked_user_infos_request = 403;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest,
                                   _impl_.kind_.query_group_blocked_user_infos_request_),
             _Internal::kOneofCaseOffset + 0,
             44,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CheckGroupJoinQuestionsAnswersRequest
            // check_group_join_questions_answers_request = 500;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest,
                                   _impl_.kind_.check_group_join_questions_answers_request_),
             _Internal::kOneofCaseOffset + 0,
             45,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateGroupInvitationRequest
            // create_group_invitation_request = 501;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_group_invitation_request_),
             _Internal::kOneofCaseOffset + 0,
             46,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateGroupJoinRequestRequest
            // create_group_join_request_request = 502;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_group_join_request_request_),
             _Internal::kOneofCaseOffset + 0,
             47,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateGroupJoinQuestionsRequest
            // create_group_join_questions_request = 503;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_group_join_questions_request_),
             _Internal::kOneofCaseOffset + 0,
             48,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteGroupInvitationRequest
            // delete_group_invitation_request = 504;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_group_invitation_request_),
             _Internal::kOneofCaseOffset + 0,
             49,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteGroupJoinRequestRequest
            // delete_group_join_request_request = 505;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_group_join_request_request_),
             _Internal::kOneofCaseOffset + 0,
             50,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteGroupJoinQuestionsRequest
            // delete_group_join_questions_request = 506;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_group_join_questions_request_),
             _Internal::kOneofCaseOffset + 0,
             51,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryGroupInvitationsRequest
            // query_group_invitations_request = 507;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_group_invitations_request_),
             _Internal::kOneofCaseOffset + 0,
             52,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryGroupJoinRequestsRequest
            // query_group_join_requests_request = 508;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_group_join_requests_request_),
             _Internal::kOneofCaseOffset + 0,
             53,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryGroupJoinQuestionsRequest
            // query_group_join_questions_request = 509;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_group_join_questions_request_),
             _Internal::kOneofCaseOffset + 0,
             54,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateGroupInvitationRequest
            // update_group_invitation_request = 510;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_group_invitation_request_),
             _Internal::kOneofCaseOffset + 0,
             55,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateGroupJoinQuestionRequest
            // update_group_join_question_request = 511;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_group_join_question_request_),
             _Internal::kOneofCaseOffset + 0,
             56,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateGroupJoinRequestRequest
            // update_group_join_request_request = 512;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_group_join_request_request_),
             _Internal::kOneofCaseOffset + 0,
             57,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateMeetingRequest create_meeting_request = 900;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_meeting_request_),
             _Internal::kOneofCaseOffset + 0,
             58,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteMeetingRequest delete_meeting_request = 901;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_meeting_request_),
             _Internal::kOneofCaseOffset + 0,
             59,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryMeetingsRequest query_meetings_request = 902;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_meetings_request_),
             _Internal::kOneofCaseOffset + 0,
             60,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateMeetingRequest update_meeting_request = 903;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_meeting_request_),
             _Internal::kOneofCaseOffset + 0,
             61,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateMeetingInvitationRequest
            // update_meeting_invitation_request = 904;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.update_meeting_invitation_request_),
             _Internal::kOneofCaseOffset + 0,
             62,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteResourceRequest delete_resource_request = 1000;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_resource_request_),
             _Internal::kOneofCaseOffset + 0,
             63,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryResourceDownloadInfoRequest
            // query_resource_download_info_request = 1001;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest,
                                   _impl_.kind_.query_resource_download_info_request_),
             _Internal::kOneofCaseOffset + 0,
             64,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryResourceUploadInfoRequest
            // query_resource_upload_info_request = 1002;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_resource_upload_info_request_),
             _Internal::kOneofCaseOffset + 0,
             65,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryMessageAttachmentInfosRequest
            // query_message_attachment_infos_request = 1003;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest,
                                   _impl_.kind_.query_message_attachment_infos_request_),
             _Internal::kOneofCaseOffset + 0,
             66,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateMessageAttachmentInfoRequest
            // update_message_attachment_info_request = 1004;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest,
                                   _impl_.kind_.update_message_attachment_info_request_),
             _Internal::kOneofCaseOffset + 0,
             67,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteConversationSettingsRequest
            // delete_conversation_settings_request = 1100;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest,
                                   _impl_.kind_.delete_conversation_settings_request_),
             _Internal::kOneofCaseOffset + 0,
             68,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.QueryConversationSettingsRequest
            // query_conversation_settings_request = 1101;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.query_conversation_settings_request_),
             _Internal::kOneofCaseOffset + 0,
             69,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.UpdateConversationSettingsRequest
            // update_conversation_settings_request = 1102;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest,
                                   _impl_.kind_.update_conversation_settings_request_),
             _Internal::kOneofCaseOffset + 0,
             70,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.CreateMessageReactionsRequest
            // create_message_reactions_request = 1200;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.create_message_reactions_request_),
             _Internal::kOneofCaseOffset + 0,
             71,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
            // .turms.client.model.proto.DeleteMessageReactionsRequest
            // delete_message_reactions_request = 1201;
            {PROTOBUF_FIELD_OFFSET(TurmsRequest, _impl_.kind_.delete_message_reactions_request_),
             _Internal::kOneofCaseOffset + 0,
             72,
             (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::Value>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::CreateSessionRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::DeleteSessionRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryConversationsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateConversationRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateTypingStatusRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::CreateMessageRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::QueryMessagesRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::UpdateMessageRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CreateGroupMembersRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteGroupMembersRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::QueryGroupMembersRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::UpdateGroupMemberRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::QueryUserProfilesRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::QueryNearbyUsersRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryUserOnlineStatusesRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateUserLocationRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateUserOnlineStatusRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::UpdateUserRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateUserSettingsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteUserSettingsRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::QueryUserSettingsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CreateFriendRequestRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CreateRelationshipGroupRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CreateRelationshipRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteFriendRequestRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteRelationshipGroupRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteRelationshipRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryFriendRequestsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryRelatedUserIdsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryRelationshipGroupsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryRelationshipsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateFriendRequestRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateRelationshipGroupRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateRelationshipRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::CreateGroupRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::DeleteGroupRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::QueryGroupsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryJoinedGroupIdsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryJoinedGroupInfosRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::UpdateGroupRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CreateGroupBlockedUserRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteGroupBlockedUserRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CreateGroupInvitationRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CreateGroupJoinRequestRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CreateGroupJoinQuestionsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteGroupInvitationRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteGroupJoinRequestRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryGroupInvitationsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryGroupJoinRequestsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryGroupJoinQuestionsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateGroupInvitationRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateGroupJoinQuestionRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateGroupJoinRequestRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::CreateMeetingRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::DeleteMeetingRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::QueryMeetingsRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::UpdateMeetingRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateMeetingInvitationRequest>()},
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::DeleteResourceRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryResourceDownloadInfoRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryResourceUploadInfoRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryMessageAttachmentInfosRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteConversationSettingsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryConversationSettingsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::UpdateConversationSettingsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::CreateMessageReactionsRequest>()},
            {::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::DeleteMessageReactionsRequest>()},
        }},
        {{}},
};

PROTOBUF_NOINLINE void TurmsRequest::Clear() {
    // @@protoc_insertion_point(message_clear_start:turms.client.model.proto.TurmsRequest)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.custom_attributes_.Clear();
    _impl_.request_id_ = ::int64_t{0};
    clear_kind();
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<std::string>();
}

::uint8_t* TurmsRequest::_InternalSerialize(
    ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.TurmsRequest)
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    // optional int64 request_id = 1;
    if (cached_has_bits & 0x00000001u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
            stream, this->_internal_request_id(), target);
    }

    // repeated .turms.client.model.proto.Value custom_attributes = 2;
    for (unsigned i = 0, n = static_cast<unsigned>(this->_internal_custom_attributes_size()); i < n;
         i++) {
        const auto& repfield = this->_internal_custom_attributes().Get(i);
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(), target, stream);
    }

    switch (kind_case()) {
        case kCreateSessionRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3,
                *_impl_.kind_.create_session_request_,
                _impl_.kind_.create_session_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteSessionRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4,
                *_impl_.kind_.delete_session_request_,
                _impl_.kind_.delete_session_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryConversationsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5,
                *_impl_.kind_.query_conversations_request_,
                _impl_.kind_.query_conversations_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateConversationRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6,
                *_impl_.kind_.update_conversation_request_,
                _impl_.kind_.update_conversation_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateTypingStatusRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7,
                *_impl_.kind_.update_typing_status_request_,
                _impl_.kind_.update_typing_status_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateMessageRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8,
                *_impl_.kind_.create_message_request_,
                _impl_.kind_.create_message_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryMessagesRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9,
                *_impl_.kind_.query_messages_request_,
                _impl_.kind_.query_messages_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateMessageRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10,
                *_impl_.kind_.update_message_request_,
                _impl_.kind_.update_message_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateGroupMembersRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11,
                *_impl_.kind_.create_group_members_request_,
                _impl_.kind_.create_group_members_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteGroupMembersRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12,
                *_impl_.kind_.delete_group_members_request_,
                _impl_.kind_.delete_group_members_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryGroupMembersRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                13,
                *_impl_.kind_.query_group_members_request_,
                _impl_.kind_.query_group_members_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateGroupMemberRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                14,
                *_impl_.kind_.update_group_member_request_,
                _impl_.kind_.update_group_member_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryUserProfilesRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                100,
                *_impl_.kind_.query_user_profiles_request_,
                _impl_.kind_.query_user_profiles_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryNearbyUsersRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                101,
                *_impl_.kind_.query_nearby_users_request_,
                _impl_.kind_.query_nearby_users_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryUserOnlineStatusesRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                102,
                *_impl_.kind_.query_user_online_statuses_request_,
                _impl_.kind_.query_user_online_statuses_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateUserLocationRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                103,
                *_impl_.kind_.update_user_location_request_,
                _impl_.kind_.update_user_location_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateUserOnlineStatusRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                104,
                *_impl_.kind_.update_user_online_status_request_,
                _impl_.kind_.update_user_online_status_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateUserRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                105,
                *_impl_.kind_.update_user_request_,
                _impl_.kind_.update_user_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateUserSettingsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                106,
                *_impl_.kind_.update_user_settings_request_,
                _impl_.kind_.update_user_settings_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteUserSettingsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                107,
                *_impl_.kind_.delete_user_settings_request_,
                _impl_.kind_.delete_user_settings_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryUserSettingsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                108,
                *_impl_.kind_.query_user_settings_request_,
                _impl_.kind_.query_user_settings_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateFriendRequestRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                200,
                *_impl_.kind_.create_friend_request_request_,
                _impl_.kind_.create_friend_request_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateRelationshipGroupRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                201,
                *_impl_.kind_.create_relationship_group_request_,
                _impl_.kind_.create_relationship_group_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateRelationshipRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                202,
                *_impl_.kind_.create_relationship_request_,
                _impl_.kind_.create_relationship_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteFriendRequestRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                203,
                *_impl_.kind_.delete_friend_request_request_,
                _impl_.kind_.delete_friend_request_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteRelationshipGroupRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                204,
                *_impl_.kind_.delete_relationship_group_request_,
                _impl_.kind_.delete_relationship_group_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteRelationshipRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                205,
                *_impl_.kind_.delete_relationship_request_,
                _impl_.kind_.delete_relationship_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryFriendRequestsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                206,
                *_impl_.kind_.query_friend_requests_request_,
                _impl_.kind_.query_friend_requests_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryRelatedUserIdsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                207,
                *_impl_.kind_.query_related_user_ids_request_,
                _impl_.kind_.query_related_user_ids_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryRelationshipGroupsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                208,
                *_impl_.kind_.query_relationship_groups_request_,
                _impl_.kind_.query_relationship_groups_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryRelationshipsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                209,
                *_impl_.kind_.query_relationships_request_,
                _impl_.kind_.query_relationships_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateFriendRequestRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                210,
                *_impl_.kind_.update_friend_request_request_,
                _impl_.kind_.update_friend_request_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateRelationshipGroupRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                211,
                *_impl_.kind_.update_relationship_group_request_,
                _impl_.kind_.update_relationship_group_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateRelationshipRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                212,
                *_impl_.kind_.update_relationship_request_,
                _impl_.kind_.update_relationship_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateGroupRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                300,
                *_impl_.kind_.create_group_request_,
                _impl_.kind_.create_group_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteGroupRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                301,
                *_impl_.kind_.delete_group_request_,
                _impl_.kind_.delete_group_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryGroupsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                302,
                *_impl_.kind_.query_groups_request_,
                _impl_.kind_.query_groups_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryJoinedGroupIdsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                303,
                *_impl_.kind_.query_joined_group_ids_request_,
                _impl_.kind_.query_joined_group_ids_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryJoinedGroupInfosRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                304,
                *_impl_.kind_.query_joined_group_infos_request_,
                _impl_.kind_.query_joined_group_infos_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateGroupRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                305,
                *_impl_.kind_.update_group_request_,
                _impl_.kind_.update_group_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateGroupBlockedUserRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                400,
                *_impl_.kind_.create_group_blocked_user_request_,
                _impl_.kind_.create_group_blocked_user_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteGroupBlockedUserRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                401,
                *_impl_.kind_.delete_group_blocked_user_request_,
                _impl_.kind_.delete_group_blocked_user_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryGroupBlockedUserIdsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                402,
                *_impl_.kind_.query_group_blocked_user_ids_request_,
                _impl_.kind_.query_group_blocked_user_ids_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryGroupBlockedUserInfosRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                403,
                *_impl_.kind_.query_group_blocked_user_infos_request_,
                _impl_.kind_.query_group_blocked_user_infos_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCheckGroupJoinQuestionsAnswersRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                500,
                *_impl_.kind_.check_group_join_questions_answers_request_,
                _impl_.kind_.check_group_join_questions_answers_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateGroupInvitationRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                501,
                *_impl_.kind_.create_group_invitation_request_,
                _impl_.kind_.create_group_invitation_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateGroupJoinRequestRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                502,
                *_impl_.kind_.create_group_join_request_request_,
                _impl_.kind_.create_group_join_request_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateGroupJoinQuestionsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                503,
                *_impl_.kind_.create_group_join_questions_request_,
                _impl_.kind_.create_group_join_questions_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteGroupInvitationRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                504,
                *_impl_.kind_.delete_group_invitation_request_,
                _impl_.kind_.delete_group_invitation_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteGroupJoinRequestRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                505,
                *_impl_.kind_.delete_group_join_request_request_,
                _impl_.kind_.delete_group_join_request_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteGroupJoinQuestionsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                506,
                *_impl_.kind_.delete_group_join_questions_request_,
                _impl_.kind_.delete_group_join_questions_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryGroupInvitationsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                507,
                *_impl_.kind_.query_group_invitations_request_,
                _impl_.kind_.query_group_invitations_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryGroupJoinRequestsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                508,
                *_impl_.kind_.query_group_join_requests_request_,
                _impl_.kind_.query_group_join_requests_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryGroupJoinQuestionsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                509,
                *_impl_.kind_.query_group_join_questions_request_,
                _impl_.kind_.query_group_join_questions_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateGroupInvitationRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                510,
                *_impl_.kind_.update_group_invitation_request_,
                _impl_.kind_.update_group_invitation_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateGroupJoinQuestionRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                511,
                *_impl_.kind_.update_group_join_question_request_,
                _impl_.kind_.update_group_join_question_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateGroupJoinRequestRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                512,
                *_impl_.kind_.update_group_join_request_request_,
                _impl_.kind_.update_group_join_request_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateMeetingRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                900,
                *_impl_.kind_.create_meeting_request_,
                _impl_.kind_.create_meeting_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteMeetingRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                901,
                *_impl_.kind_.delete_meeting_request_,
                _impl_.kind_.delete_meeting_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryMeetingsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                902,
                *_impl_.kind_.query_meetings_request_,
                _impl_.kind_.query_meetings_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateMeetingRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                903,
                *_impl_.kind_.update_meeting_request_,
                _impl_.kind_.update_meeting_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateMeetingInvitationRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                904,
                *_impl_.kind_.update_meeting_invitation_request_,
                _impl_.kind_.update_meeting_invitation_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteResourceRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1000,
                *_impl_.kind_.delete_resource_request_,
                _impl_.kind_.delete_resource_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryResourceDownloadInfoRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1001,
                *_impl_.kind_.query_resource_download_info_request_,
                _impl_.kind_.query_resource_download_info_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryResourceUploadInfoRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1002,
                *_impl_.kind_.query_resource_upload_info_request_,
                _impl_.kind_.query_resource_upload_info_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryMessageAttachmentInfosRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1003,
                *_impl_.kind_.query_message_attachment_infos_request_,
                _impl_.kind_.query_message_attachment_infos_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateMessageAttachmentInfoRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1004,
                *_impl_.kind_.update_message_attachment_info_request_,
                _impl_.kind_.update_message_attachment_info_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteConversationSettingsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1100,
                *_impl_.kind_.delete_conversation_settings_request_,
                _impl_.kind_.delete_conversation_settings_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kQueryConversationSettingsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1101,
                *_impl_.kind_.query_conversation_settings_request_,
                _impl_.kind_.query_conversation_settings_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kUpdateConversationSettingsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1102,
                *_impl_.kind_.update_conversation_settings_request_,
                _impl_.kind_.update_conversation_settings_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kCreateMessageReactionsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1200,
                *_impl_.kind_.create_message_reactions_request_,
                _impl_.kind_.create_message_reactions_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        case kDeleteMessageReactionsRequest: {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1201,
                *_impl_.kind_.delete_message_reactions_request_,
                _impl_.kind_.delete_message_reactions_request_->GetCachedSize(),
                target,
                stream);
            break;
        }
        default:
            break;
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = stream->WriteRaw(
            _internal_metadata_
                .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                .data(),
            static_cast<int>(
                _internal_metadata_
                    .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                    .size()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.TurmsRequest)
    return target;
}

::size_t TurmsRequest::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.TurmsRequest)
    ::size_t total_size = 0;

    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
    // repeated .turms.client.model.proto.Value custom_attributes = 2;
    total_size += 1UL * this->_internal_custom_attributes_size();
    for (const auto& msg : this->_internal_custom_attributes()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
    }
    // optional int64 request_id = 1;
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
    }

    switch (kind_case()) {
        // .turms.client.model.proto.CreateSessionRequest create_session_request = 3;
        case kCreateSessionRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_session_request_);
            break;
        }
        // .turms.client.model.proto.DeleteSessionRequest delete_session_request = 4;
        case kDeleteSessionRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_session_request_);
            break;
        }
        // .turms.client.model.proto.QueryConversationsRequest query_conversations_request = 5;
        case kQueryConversationsRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_conversations_request_);
            break;
        }
        // .turms.client.model.proto.UpdateConversationRequest update_conversation_request = 6;
        case kUpdateConversationRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_conversation_request_);
            break;
        }
        // .turms.client.model.proto.UpdateTypingStatusRequest update_typing_status_request = 7;
        case kUpdateTypingStatusRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_typing_status_request_);
            break;
        }
        // .turms.client.model.proto.CreateMessageRequest create_message_request = 8;
        case kCreateMessageRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_message_request_);
            break;
        }
        // .turms.client.model.proto.QueryMessagesRequest query_messages_request = 9;
        case kQueryMessagesRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_messages_request_);
            break;
        }
        // .turms.client.model.proto.UpdateMessageRequest update_message_request = 10;
        case kUpdateMessageRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_message_request_);
            break;
        }
        // .turms.client.model.proto.CreateGroupMembersRequest create_group_members_request = 11;
        case kCreateGroupMembersRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_group_members_request_);
            break;
        }
        // .turms.client.model.proto.DeleteGroupMembersRequest delete_group_members_request = 12;
        case kDeleteGroupMembersRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_group_members_request_);
            break;
        }
        // .turms.client.model.proto.QueryGroupMembersRequest query_group_members_request = 13;
        case kQueryGroupMembersRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_group_members_request_);
            break;
        }
        // .turms.client.model.proto.UpdateGroupMemberRequest update_group_member_request = 14;
        case kUpdateGroupMemberRequest: {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_group_member_request_);
            break;
        }
        // .turms.client.model.proto.QueryUserProfilesRequest query_user_profiles_request = 100;
        case kQueryUserProfilesRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_user_profiles_request_);
            break;
        }
        // .turms.client.model.proto.QueryNearbyUsersRequest query_nearby_users_request = 101;
        case kQueryNearbyUsersRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_nearby_users_request_);
            break;
        }
        // .turms.client.model.proto.QueryUserOnlineStatusesRequest
        // query_user_online_statuses_request = 102;
        case kQueryUserOnlineStatusesRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_user_online_statuses_request_);
            break;
        }
        // .turms.client.model.proto.UpdateUserLocationRequest update_user_location_request = 103;
        case kUpdateUserLocationRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_user_location_request_);
            break;
        }
        // .turms.client.model.proto.UpdateUserOnlineStatusRequest update_user_online_status_request
        // = 104;
        case kUpdateUserOnlineStatusRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_user_online_status_request_);
            break;
        }
        // .turms.client.model.proto.UpdateUserRequest update_user_request = 105;
        case kUpdateUserRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_user_request_);
            break;
        }
        // .turms.client.model.proto.UpdateUserSettingsRequest update_user_settings_request = 106;
        case kUpdateUserSettingsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_user_settings_request_);
            break;
        }
        // .turms.client.model.proto.DeleteUserSettingsRequest delete_user_settings_request = 107;
        case kDeleteUserSettingsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_user_settings_request_);
            break;
        }
        // .turms.client.model.proto.QueryUserSettingsRequest query_user_settings_request = 108;
        case kQueryUserSettingsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_user_settings_request_);
            break;
        }
        // .turms.client.model.proto.CreateFriendRequestRequest create_friend_request_request = 200;
        case kCreateFriendRequestRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_friend_request_request_);
            break;
        }
        // .turms.client.model.proto.CreateRelationshipGroupRequest
        // create_relationship_group_request = 201;
        case kCreateRelationshipGroupRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_relationship_group_request_);
            break;
        }
        // .turms.client.model.proto.CreateRelationshipRequest create_relationship_request = 202;
        case kCreateRelationshipRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_relationship_request_);
            break;
        }
        // .turms.client.model.proto.DeleteFriendRequestRequest delete_friend_request_request = 203;
        case kDeleteFriendRequestRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_friend_request_request_);
            break;
        }
        // .turms.client.model.proto.DeleteRelationshipGroupRequest
        // delete_relationship_group_request = 204;
        case kDeleteRelationshipGroupRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_relationship_group_request_);
            break;
        }
        // .turms.client.model.proto.DeleteRelationshipRequest delete_relationship_request = 205;
        case kDeleteRelationshipRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_relationship_request_);
            break;
        }
        // .turms.client.model.proto.QueryFriendRequestsRequest query_friend_requests_request = 206;
        case kQueryFriendRequestsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_friend_requests_request_);
            break;
        }
        // .turms.client.model.proto.QueryRelatedUserIdsRequest query_related_user_ids_request =
        // 207;
        case kQueryRelatedUserIdsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_related_user_ids_request_);
            break;
        }
        // .turms.client.model.proto.QueryRelationshipGroupsRequest
        // query_relationship_groups_request = 208;
        case kQueryRelationshipGroupsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_relationship_groups_request_);
            break;
        }
        // .turms.client.model.proto.QueryRelationshipsRequest query_relationships_request = 209;
        case kQueryRelationshipsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_relationships_request_);
            break;
        }
        // .turms.client.model.proto.UpdateFriendRequestRequest update_friend_request_request = 210;
        case kUpdateFriendRequestRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_friend_request_request_);
            break;
        }
        // .turms.client.model.proto.UpdateRelationshipGroupRequest
        // update_relationship_group_request = 211;
        case kUpdateRelationshipGroupRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_relationship_group_request_);
            break;
        }
        // .turms.client.model.proto.UpdateRelationshipRequest update_relationship_request = 212;
        case kUpdateRelationshipRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_relationship_request_);
            break;
        }
        // .turms.client.model.proto.CreateGroupRequest create_group_request = 300;
        case kCreateGroupRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_group_request_);
            break;
        }
        // .turms.client.model.proto.DeleteGroupRequest delete_group_request = 301;
        case kDeleteGroupRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_group_request_);
            break;
        }
        // .turms.client.model.proto.QueryGroupsRequest query_groups_request = 302;
        case kQueryGroupsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_groups_request_);
            break;
        }
        // .turms.client.model.proto.QueryJoinedGroupIdsRequest query_joined_group_ids_request =
        // 303;
        case kQueryJoinedGroupIdsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_joined_group_ids_request_);
            break;
        }
        // .turms.client.model.proto.QueryJoinedGroupInfosRequest query_joined_group_infos_request =
        // 304;
        case kQueryJoinedGroupInfosRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_joined_group_infos_request_);
            break;
        }
        // .turms.client.model.proto.UpdateGroupRequest update_group_request = 305;
        case kUpdateGroupRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_group_request_);
            break;
        }
        // .turms.client.model.proto.CreateGroupBlockedUserRequest create_group_blocked_user_request
        // = 400;
        case kCreateGroupBlockedUserRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_group_blocked_user_request_);
            break;
        }
        // .turms.client.model.proto.DeleteGroupBlockedUserRequest delete_group_blocked_user_request
        // = 401;
        case kDeleteGroupBlockedUserRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_group_blocked_user_request_);
            break;
        }
        // .turms.client.model.proto.QueryGroupBlockedUserIdsRequest
        // query_group_blocked_user_ids_request = 402;
        case kQueryGroupBlockedUserIdsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_group_blocked_user_ids_request_);
            break;
        }
        // .turms.client.model.proto.QueryGroupBlockedUserInfosRequest
        // query_group_blocked_user_infos_request = 403;
        case kQueryGroupBlockedUserInfosRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_group_blocked_user_infos_request_);
            break;
        }
        // .turms.client.model.proto.CheckGroupJoinQuestionsAnswersRequest
        // check_group_join_questions_answers_request = 500;
        case kCheckGroupJoinQuestionsAnswersRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.check_group_join_questions_answers_request_);
            break;
        }
        // .turms.client.model.proto.CreateGroupInvitationRequest create_group_invitation_request =
        // 501;
        case kCreateGroupInvitationRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_group_invitation_request_);
            break;
        }
        // .turms.client.model.proto.CreateGroupJoinRequestRequest create_group_join_request_request
        // = 502;
        case kCreateGroupJoinRequestRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_group_join_request_request_);
            break;
        }
        // .turms.client.model.proto.CreateGroupJoinQuestionsRequest
        // create_group_join_questions_request = 503;
        case kCreateGroupJoinQuestionsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_group_join_questions_request_);
            break;
        }
        // .turms.client.model.proto.DeleteGroupInvitationRequest delete_group_invitation_request =
        // 504;
        case kDeleteGroupInvitationRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_group_invitation_request_);
            break;
        }
        // .turms.client.model.proto.DeleteGroupJoinRequestRequest delete_group_join_request_request
        // = 505;
        case kDeleteGroupJoinRequestRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_group_join_request_request_);
            break;
        }
        // .turms.client.model.proto.DeleteGroupJoinQuestionsRequest
        // delete_group_join_questions_request = 506;
        case kDeleteGroupJoinQuestionsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_group_join_questions_request_);
            break;
        }
        // .turms.client.model.proto.QueryGroupInvitationsRequest query_group_invitations_request =
        // 507;
        case kQueryGroupInvitationsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_group_invitations_request_);
            break;
        }
        // .turms.client.model.proto.QueryGroupJoinRequestsRequest query_group_join_requests_request
        // = 508;
        case kQueryGroupJoinRequestsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_group_join_requests_request_);
            break;
        }
        // .turms.client.model.proto.QueryGroupJoinQuestionsRequest
        // query_group_join_questions_request = 509;
        case kQueryGroupJoinQuestionsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_group_join_questions_request_);
            break;
        }
        // .turms.client.model.proto.UpdateGroupInvitationRequest update_group_invitation_request =
        // 510;
        case kUpdateGroupInvitationRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_group_invitation_request_);
            break;
        }
        // .turms.client.model.proto.UpdateGroupJoinQuestionRequest
        // update_group_join_question_request = 511;
        case kUpdateGroupJoinQuestionRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_group_join_question_request_);
            break;
        }
        // .turms.client.model.proto.UpdateGroupJoinRequestRequest update_group_join_request_request
        // = 512;
        case kUpdateGroupJoinRequestRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_group_join_request_request_);
            break;
        }
        // .turms.client.model.proto.CreateMeetingRequest create_meeting_request = 900;
        case kCreateMeetingRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_meeting_request_);
            break;
        }
        // .turms.client.model.proto.DeleteMeetingRequest delete_meeting_request = 901;
        case kDeleteMeetingRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_meeting_request_);
            break;
        }
        // .turms.client.model.proto.QueryMeetingsRequest query_meetings_request = 902;
        case kQueryMeetingsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_meetings_request_);
            break;
        }
        // .turms.client.model.proto.UpdateMeetingRequest update_meeting_request = 903;
        case kUpdateMeetingRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_meeting_request_);
            break;
        }
        // .turms.client.model.proto.UpdateMeetingInvitationRequest
        // update_meeting_invitation_request = 904;
        case kUpdateMeetingInvitationRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_meeting_invitation_request_);
            break;
        }
        // .turms.client.model.proto.DeleteResourceRequest delete_resource_request = 1000;
        case kDeleteResourceRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_resource_request_);
            break;
        }
        // .turms.client.model.proto.QueryResourceDownloadInfoRequest
        // query_resource_download_info_request = 1001;
        case kQueryResourceDownloadInfoRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_resource_download_info_request_);
            break;
        }
        // .turms.client.model.proto.QueryResourceUploadInfoRequest
        // query_resource_upload_info_request = 1002;
        case kQueryResourceUploadInfoRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_resource_upload_info_request_);
            break;
        }
        // .turms.client.model.proto.QueryMessageAttachmentInfosRequest
        // query_message_attachment_infos_request = 1003;
        case kQueryMessageAttachmentInfosRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_message_attachment_infos_request_);
            break;
        }
        // .turms.client.model.proto.UpdateMessageAttachmentInfoRequest
        // update_message_attachment_info_request = 1004;
        case kUpdateMessageAttachmentInfoRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_message_attachment_info_request_);
            break;
        }
        // .turms.client.model.proto.DeleteConversationSettingsRequest
        // delete_conversation_settings_request = 1100;
        case kDeleteConversationSettingsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_conversation_settings_request_);
            break;
        }
        // .turms.client.model.proto.QueryConversationSettingsRequest
        // query_conversation_settings_request = 1101;
        case kQueryConversationSettingsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.query_conversation_settings_request_);
            break;
        }
        // .turms.client.model.proto.UpdateConversationSettingsRequest
        // update_conversation_settings_request = 1102;
        case kUpdateConversationSettingsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.update_conversation_settings_request_);
            break;
        }
        // .turms.client.model.proto.CreateMessageReactionsRequest create_message_reactions_request
        // = 1200;
        case kCreateMessageReactionsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.create_message_reactions_request_);
            break;
        }
        // .turms.client.model.proto.DeleteMessageReactionsRequest delete_message_reactions_request
        // = 1201;
        case kDeleteMessageReactionsRequest: {
            total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                                  *_impl_.kind_.delete_message_reactions_request_);
            break;
        }
        case KIND_NOT_SET: {
            break;
        }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        total_size += _internal_metadata_
                          .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                          .size();
    }
    _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
    return total_size;
}

void TurmsRequest::CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) {
    MergeFrom(*::_pbi::DownCast<const TurmsRequest*>(&from));
}

void TurmsRequest::MergeFrom(const TurmsRequest& from) {
    TurmsRequest* const _this = this;
    ::google::protobuf::Arena* arena = _this->GetArena();
    // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.TurmsRequest)
    ABSL_DCHECK_NE(&from, _this);
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    _this->_internal_mutable_custom_attributes()->MergeFrom(from._internal_custom_attributes());
    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x00000001u) {
        _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
    if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
        const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
        const bool oneof_needs_init = oneof_to_case != oneof_from_case;
        if (oneof_needs_init) {
            if (oneof_to_case != 0) {
                _this->clear_kind();
            }
            _this->_impl_._oneof_case_[0] = oneof_from_case;
        }

        switch (oneof_from_case) {
            case kCreateSessionRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_session_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateSessionRequest>(
                            arena, *from._impl_.kind_.create_session_request_);
                } else {
                    _this->_impl_.kind_.create_session_request_->MergeFrom(
                        from._internal_create_session_request());
                }
                break;
            }
            case kDeleteSessionRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_session_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteSessionRequest>(
                            arena, *from._impl_.kind_.delete_session_request_);
                } else {
                    _this->_impl_.kind_.delete_session_request_->MergeFrom(
                        from._internal_delete_session_request());
                }
                break;
            }
            case kQueryConversationsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_conversations_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryConversationsRequest>(
                            arena, *from._impl_.kind_.query_conversations_request_);
                } else {
                    _this->_impl_.kind_.query_conversations_request_->MergeFrom(
                        from._internal_query_conversations_request());
                }
                break;
            }
            case kUpdateConversationRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_conversation_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateConversationRequest>(
                            arena, *from._impl_.kind_.update_conversation_request_);
                } else {
                    _this->_impl_.kind_.update_conversation_request_->MergeFrom(
                        from._internal_update_conversation_request());
                }
                break;
            }
            case kUpdateTypingStatusRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_typing_status_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateTypingStatusRequest>(
                            arena, *from._impl_.kind_.update_typing_status_request_);
                } else {
                    _this->_impl_.kind_.update_typing_status_request_->MergeFrom(
                        from._internal_update_typing_status_request());
                }
                break;
            }
            case kCreateMessageRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_message_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateMessageRequest>(
                            arena, *from._impl_.kind_.create_message_request_);
                } else {
                    _this->_impl_.kind_.create_message_request_->MergeFrom(
                        from._internal_create_message_request());
                }
                break;
            }
            case kQueryMessagesRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_messages_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryMessagesRequest>(
                            arena, *from._impl_.kind_.query_messages_request_);
                } else {
                    _this->_impl_.kind_.query_messages_request_->MergeFrom(
                        from._internal_query_messages_request());
                }
                break;
            }
            case kUpdateMessageRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_message_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateMessageRequest>(
                            arena, *from._impl_.kind_.update_message_request_);
                } else {
                    _this->_impl_.kind_.update_message_request_->MergeFrom(
                        from._internal_update_message_request());
                }
                break;
            }
            case kCreateGroupMembersRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_group_members_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateGroupMembersRequest>(
                            arena, *from._impl_.kind_.create_group_members_request_);
                } else {
                    _this->_impl_.kind_.create_group_members_request_->MergeFrom(
                        from._internal_create_group_members_request());
                }
                break;
            }
            case kDeleteGroupMembersRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_group_members_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteGroupMembersRequest>(
                            arena, *from._impl_.kind_.delete_group_members_request_);
                } else {
                    _this->_impl_.kind_.delete_group_members_request_->MergeFrom(
                        from._internal_delete_group_members_request());
                }
                break;
            }
            case kQueryGroupMembersRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_group_members_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryGroupMembersRequest>(
                            arena, *from._impl_.kind_.query_group_members_request_);
                } else {
                    _this->_impl_.kind_.query_group_members_request_->MergeFrom(
                        from._internal_query_group_members_request());
                }
                break;
            }
            case kUpdateGroupMemberRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_group_member_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateGroupMemberRequest>(
                            arena, *from._impl_.kind_.update_group_member_request_);
                } else {
                    _this->_impl_.kind_.update_group_member_request_->MergeFrom(
                        from._internal_update_group_member_request());
                }
                break;
            }
            case kQueryUserProfilesRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_user_profiles_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryUserProfilesRequest>(
                            arena, *from._impl_.kind_.query_user_profiles_request_);
                } else {
                    _this->_impl_.kind_.query_user_profiles_request_->MergeFrom(
                        from._internal_query_user_profiles_request());
                }
                break;
            }
            case kQueryNearbyUsersRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_nearby_users_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryNearbyUsersRequest>(
                            arena, *from._impl_.kind_.query_nearby_users_request_);
                } else {
                    _this->_impl_.kind_.query_nearby_users_request_->MergeFrom(
                        from._internal_query_nearby_users_request());
                }
                break;
            }
            case kQueryUserOnlineStatusesRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_user_online_statuses_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryUserOnlineStatusesRequest>(
                            arena, *from._impl_.kind_.query_user_online_statuses_request_);
                } else {
                    _this->_impl_.kind_.query_user_online_statuses_request_->MergeFrom(
                        from._internal_query_user_online_statuses_request());
                }
                break;
            }
            case kUpdateUserLocationRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_user_location_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateUserLocationRequest>(
                            arena, *from._impl_.kind_.update_user_location_request_);
                } else {
                    _this->_impl_.kind_.update_user_location_request_->MergeFrom(
                        from._internal_update_user_location_request());
                }
                break;
            }
            case kUpdateUserOnlineStatusRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_user_online_status_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateUserOnlineStatusRequest>(
                            arena, *from._impl_.kind_.update_user_online_status_request_);
                } else {
                    _this->_impl_.kind_.update_user_online_status_request_->MergeFrom(
                        from._internal_update_user_online_status_request());
                }
                break;
            }
            case kUpdateUserRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_user_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateUserRequest>(
                            arena, *from._impl_.kind_.update_user_request_);
                } else {
                    _this->_impl_.kind_.update_user_request_->MergeFrom(
                        from._internal_update_user_request());
                }
                break;
            }
            case kUpdateUserSettingsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_user_settings_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateUserSettingsRequest>(
                            arena, *from._impl_.kind_.update_user_settings_request_);
                } else {
                    _this->_impl_.kind_.update_user_settings_request_->MergeFrom(
                        from._internal_update_user_settings_request());
                }
                break;
            }
            case kDeleteUserSettingsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_user_settings_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteUserSettingsRequest>(
                            arena, *from._impl_.kind_.delete_user_settings_request_);
                } else {
                    _this->_impl_.kind_.delete_user_settings_request_->MergeFrom(
                        from._internal_delete_user_settings_request());
                }
                break;
            }
            case kQueryUserSettingsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_user_settings_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryUserSettingsRequest>(
                            arena, *from._impl_.kind_.query_user_settings_request_);
                } else {
                    _this->_impl_.kind_.query_user_settings_request_->MergeFrom(
                        from._internal_query_user_settings_request());
                }
                break;
            }
            case kCreateFriendRequestRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_friend_request_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateFriendRequestRequest>(
                            arena, *from._impl_.kind_.create_friend_request_request_);
                } else {
                    _this->_impl_.kind_.create_friend_request_request_->MergeFrom(
                        from._internal_create_friend_request_request());
                }
                break;
            }
            case kCreateRelationshipGroupRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_relationship_group_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateRelationshipGroupRequest>(
                            arena, *from._impl_.kind_.create_relationship_group_request_);
                } else {
                    _this->_impl_.kind_.create_relationship_group_request_->MergeFrom(
                        from._internal_create_relationship_group_request());
                }
                break;
            }
            case kCreateRelationshipRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_relationship_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateRelationshipRequest>(
                            arena, *from._impl_.kind_.create_relationship_request_);
                } else {
                    _this->_impl_.kind_.create_relationship_request_->MergeFrom(
                        from._internal_create_relationship_request());
                }
                break;
            }
            case kDeleteFriendRequestRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_friend_request_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteFriendRequestRequest>(
                            arena, *from._impl_.kind_.delete_friend_request_request_);
                } else {
                    _this->_impl_.kind_.delete_friend_request_request_->MergeFrom(
                        from._internal_delete_friend_request_request());
                }
                break;
            }
            case kDeleteRelationshipGroupRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_relationship_group_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteRelationshipGroupRequest>(
                            arena, *from._impl_.kind_.delete_relationship_group_request_);
                } else {
                    _this->_impl_.kind_.delete_relationship_group_request_->MergeFrom(
                        from._internal_delete_relationship_group_request());
                }
                break;
            }
            case kDeleteRelationshipRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_relationship_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteRelationshipRequest>(
                            arena, *from._impl_.kind_.delete_relationship_request_);
                } else {
                    _this->_impl_.kind_.delete_relationship_request_->MergeFrom(
                        from._internal_delete_relationship_request());
                }
                break;
            }
            case kQueryFriendRequestsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_friend_requests_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryFriendRequestsRequest>(
                            arena, *from._impl_.kind_.query_friend_requests_request_);
                } else {
                    _this->_impl_.kind_.query_friend_requests_request_->MergeFrom(
                        from._internal_query_friend_requests_request());
                }
                break;
            }
            case kQueryRelatedUserIdsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_related_user_ids_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryRelatedUserIdsRequest>(
                            arena, *from._impl_.kind_.query_related_user_ids_request_);
                } else {
                    _this->_impl_.kind_.query_related_user_ids_request_->MergeFrom(
                        from._internal_query_related_user_ids_request());
                }
                break;
            }
            case kQueryRelationshipGroupsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_relationship_groups_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryRelationshipGroupsRequest>(
                            arena, *from._impl_.kind_.query_relationship_groups_request_);
                } else {
                    _this->_impl_.kind_.query_relationship_groups_request_->MergeFrom(
                        from._internal_query_relationship_groups_request());
                }
                break;
            }
            case kQueryRelationshipsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_relationships_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryRelationshipsRequest>(
                            arena, *from._impl_.kind_.query_relationships_request_);
                } else {
                    _this->_impl_.kind_.query_relationships_request_->MergeFrom(
                        from._internal_query_relationships_request());
                }
                break;
            }
            case kUpdateFriendRequestRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_friend_request_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateFriendRequestRequest>(
                            arena, *from._impl_.kind_.update_friend_request_request_);
                } else {
                    _this->_impl_.kind_.update_friend_request_request_->MergeFrom(
                        from._internal_update_friend_request_request());
                }
                break;
            }
            case kUpdateRelationshipGroupRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_relationship_group_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateRelationshipGroupRequest>(
                            arena, *from._impl_.kind_.update_relationship_group_request_);
                } else {
                    _this->_impl_.kind_.update_relationship_group_request_->MergeFrom(
                        from._internal_update_relationship_group_request());
                }
                break;
            }
            case kUpdateRelationshipRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_relationship_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateRelationshipRequest>(
                            arena, *from._impl_.kind_.update_relationship_request_);
                } else {
                    _this->_impl_.kind_.update_relationship_request_->MergeFrom(
                        from._internal_update_relationship_request());
                }
                break;
            }
            case kCreateGroupRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_group_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateGroupRequest>(
                            arena, *from._impl_.kind_.create_group_request_);
                } else {
                    _this->_impl_.kind_.create_group_request_->MergeFrom(
                        from._internal_create_group_request());
                }
                break;
            }
            case kDeleteGroupRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_group_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteGroupRequest>(
                            arena, *from._impl_.kind_.delete_group_request_);
                } else {
                    _this->_impl_.kind_.delete_group_request_->MergeFrom(
                        from._internal_delete_group_request());
                }
                break;
            }
            case kQueryGroupsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_groups_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryGroupsRequest>(
                            arena, *from._impl_.kind_.query_groups_request_);
                } else {
                    _this->_impl_.kind_.query_groups_request_->MergeFrom(
                        from._internal_query_groups_request());
                }
                break;
            }
            case kQueryJoinedGroupIdsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_joined_group_ids_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryJoinedGroupIdsRequest>(
                            arena, *from._impl_.kind_.query_joined_group_ids_request_);
                } else {
                    _this->_impl_.kind_.query_joined_group_ids_request_->MergeFrom(
                        from._internal_query_joined_group_ids_request());
                }
                break;
            }
            case kQueryJoinedGroupInfosRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_joined_group_infos_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryJoinedGroupInfosRequest>(
                            arena, *from._impl_.kind_.query_joined_group_infos_request_);
                } else {
                    _this->_impl_.kind_.query_joined_group_infos_request_->MergeFrom(
                        from._internal_query_joined_group_infos_request());
                }
                break;
            }
            case kUpdateGroupRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_group_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateGroupRequest>(
                            arena, *from._impl_.kind_.update_group_request_);
                } else {
                    _this->_impl_.kind_.update_group_request_->MergeFrom(
                        from._internal_update_group_request());
                }
                break;
            }
            case kCreateGroupBlockedUserRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_group_blocked_user_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateGroupBlockedUserRequest>(
                            arena, *from._impl_.kind_.create_group_blocked_user_request_);
                } else {
                    _this->_impl_.kind_.create_group_blocked_user_request_->MergeFrom(
                        from._internal_create_group_blocked_user_request());
                }
                break;
            }
            case kDeleteGroupBlockedUserRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_group_blocked_user_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteGroupBlockedUserRequest>(
                            arena, *from._impl_.kind_.delete_group_blocked_user_request_);
                } else {
                    _this->_impl_.kind_.delete_group_blocked_user_request_->MergeFrom(
                        from._internal_delete_group_blocked_user_request());
                }
                break;
            }
            case kQueryGroupBlockedUserIdsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_group_blocked_user_ids_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest>(
                            arena, *from._impl_.kind_.query_group_blocked_user_ids_request_);
                } else {
                    _this->_impl_.kind_.query_group_blocked_user_ids_request_->MergeFrom(
                        from._internal_query_group_blocked_user_ids_request());
                }
                break;
            }
            case kQueryGroupBlockedUserInfosRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_group_blocked_user_infos_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest>(
                            arena, *from._impl_.kind_.query_group_blocked_user_infos_request_);
                } else {
                    _this->_impl_.kind_.query_group_blocked_user_infos_request_->MergeFrom(
                        from._internal_query_group_blocked_user_infos_request());
                }
                break;
            }
            case kCheckGroupJoinQuestionsAnswersRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.check_group_join_questions_answers_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest>(
                            arena, *from._impl_.kind_.check_group_join_questions_answers_request_);
                } else {
                    _this->_impl_.kind_.check_group_join_questions_answers_request_->MergeFrom(
                        from._internal_check_group_join_questions_answers_request());
                }
                break;
            }
            case kCreateGroupInvitationRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_group_invitation_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateGroupInvitationRequest>(
                            arena, *from._impl_.kind_.create_group_invitation_request_);
                } else {
                    _this->_impl_.kind_.create_group_invitation_request_->MergeFrom(
                        from._internal_create_group_invitation_request());
                }
                break;
            }
            case kCreateGroupJoinRequestRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_group_join_request_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateGroupJoinRequestRequest>(
                            arena, *from._impl_.kind_.create_group_join_request_request_);
                } else {
                    _this->_impl_.kind_.create_group_join_request_request_->MergeFrom(
                        from._internal_create_group_join_request_request());
                }
                break;
            }
            case kCreateGroupJoinQuestionsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_group_join_questions_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateGroupJoinQuestionsRequest>(
                            arena, *from._impl_.kind_.create_group_join_questions_request_);
                } else {
                    _this->_impl_.kind_.create_group_join_questions_request_->MergeFrom(
                        from._internal_create_group_join_questions_request());
                }
                break;
            }
            case kDeleteGroupInvitationRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_group_invitation_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteGroupInvitationRequest>(
                            arena, *from._impl_.kind_.delete_group_invitation_request_);
                } else {
                    _this->_impl_.kind_.delete_group_invitation_request_->MergeFrom(
                        from._internal_delete_group_invitation_request());
                }
                break;
            }
            case kDeleteGroupJoinRequestRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_group_join_request_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteGroupJoinRequestRequest>(
                            arena, *from._impl_.kind_.delete_group_join_request_request_);
                } else {
                    _this->_impl_.kind_.delete_group_join_request_request_->MergeFrom(
                        from._internal_delete_group_join_request_request());
                }
                break;
            }
            case kDeleteGroupJoinQuestionsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_group_join_questions_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest>(
                            arena, *from._impl_.kind_.delete_group_join_questions_request_);
                } else {
                    _this->_impl_.kind_.delete_group_join_questions_request_->MergeFrom(
                        from._internal_delete_group_join_questions_request());
                }
                break;
            }
            case kQueryGroupInvitationsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_group_invitations_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryGroupInvitationsRequest>(
                            arena, *from._impl_.kind_.query_group_invitations_request_);
                } else {
                    _this->_impl_.kind_.query_group_invitations_request_->MergeFrom(
                        from._internal_query_group_invitations_request());
                }
                break;
            }
            case kQueryGroupJoinRequestsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_group_join_requests_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryGroupJoinRequestsRequest>(
                            arena, *from._impl_.kind_.query_group_join_requests_request_);
                } else {
                    _this->_impl_.kind_.query_group_join_requests_request_->MergeFrom(
                        from._internal_query_group_join_requests_request());
                }
                break;
            }
            case kQueryGroupJoinQuestionsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_group_join_questions_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryGroupJoinQuestionsRequest>(
                            arena, *from._impl_.kind_.query_group_join_questions_request_);
                } else {
                    _this->_impl_.kind_.query_group_join_questions_request_->MergeFrom(
                        from._internal_query_group_join_questions_request());
                }
                break;
            }
            case kUpdateGroupInvitationRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_group_invitation_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateGroupInvitationRequest>(
                            arena, *from._impl_.kind_.update_group_invitation_request_);
                } else {
                    _this->_impl_.kind_.update_group_invitation_request_->MergeFrom(
                        from._internal_update_group_invitation_request());
                }
                break;
            }
            case kUpdateGroupJoinQuestionRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_group_join_question_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateGroupJoinQuestionRequest>(
                            arena, *from._impl_.kind_.update_group_join_question_request_);
                } else {
                    _this->_impl_.kind_.update_group_join_question_request_->MergeFrom(
                        from._internal_update_group_join_question_request());
                }
                break;
            }
            case kUpdateGroupJoinRequestRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_group_join_request_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateGroupJoinRequestRequest>(
                            arena, *from._impl_.kind_.update_group_join_request_request_);
                } else {
                    _this->_impl_.kind_.update_group_join_request_request_->MergeFrom(
                        from._internal_update_group_join_request_request());
                }
                break;
            }
            case kCreateMeetingRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_meeting_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateMeetingRequest>(
                            arena, *from._impl_.kind_.create_meeting_request_);
                } else {
                    _this->_impl_.kind_.create_meeting_request_->MergeFrom(
                        from._internal_create_meeting_request());
                }
                break;
            }
            case kDeleteMeetingRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_meeting_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteMeetingRequest>(
                            arena, *from._impl_.kind_.delete_meeting_request_);
                } else {
                    _this->_impl_.kind_.delete_meeting_request_->MergeFrom(
                        from._internal_delete_meeting_request());
                }
                break;
            }
            case kQueryMeetingsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_meetings_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryMeetingsRequest>(
                            arena, *from._impl_.kind_.query_meetings_request_);
                } else {
                    _this->_impl_.kind_.query_meetings_request_->MergeFrom(
                        from._internal_query_meetings_request());
                }
                break;
            }
            case kUpdateMeetingRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_meeting_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateMeetingRequest>(
                            arena, *from._impl_.kind_.update_meeting_request_);
                } else {
                    _this->_impl_.kind_.update_meeting_request_->MergeFrom(
                        from._internal_update_meeting_request());
                }
                break;
            }
            case kUpdateMeetingInvitationRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_meeting_invitation_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateMeetingInvitationRequest>(
                            arena, *from._impl_.kind_.update_meeting_invitation_request_);
                } else {
                    _this->_impl_.kind_.update_meeting_invitation_request_->MergeFrom(
                        from._internal_update_meeting_invitation_request());
                }
                break;
            }
            case kDeleteResourceRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_resource_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteResourceRequest>(
                            arena, *from._impl_.kind_.delete_resource_request_);
                } else {
                    _this->_impl_.kind_.delete_resource_request_->MergeFrom(
                        from._internal_delete_resource_request());
                }
                break;
            }
            case kQueryResourceDownloadInfoRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_resource_download_info_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryResourceDownloadInfoRequest>(
                            arena, *from._impl_.kind_.query_resource_download_info_request_);
                } else {
                    _this->_impl_.kind_.query_resource_download_info_request_->MergeFrom(
                        from._internal_query_resource_download_info_request());
                }
                break;
            }
            case kQueryResourceUploadInfoRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_resource_upload_info_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryResourceUploadInfoRequest>(
                            arena, *from._impl_.kind_.query_resource_upload_info_request_);
                } else {
                    _this->_impl_.kind_.query_resource_upload_info_request_->MergeFrom(
                        from._internal_query_resource_upload_info_request());
                }
                break;
            }
            case kQueryMessageAttachmentInfosRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_message_attachment_infos_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryMessageAttachmentInfosRequest>(
                            arena, *from._impl_.kind_.query_message_attachment_infos_request_);
                } else {
                    _this->_impl_.kind_.query_message_attachment_infos_request_->MergeFrom(
                        from._internal_query_message_attachment_infos_request());
                }
                break;
            }
            case kUpdateMessageAttachmentInfoRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_message_attachment_info_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest>(
                            arena, *from._impl_.kind_.update_message_attachment_info_request_);
                } else {
                    _this->_impl_.kind_.update_message_attachment_info_request_->MergeFrom(
                        from._internal_update_message_attachment_info_request());
                }
                break;
            }
            case kDeleteConversationSettingsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_conversation_settings_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteConversationSettingsRequest>(
                            arena, *from._impl_.kind_.delete_conversation_settings_request_);
                } else {
                    _this->_impl_.kind_.delete_conversation_settings_request_->MergeFrom(
                        from._internal_delete_conversation_settings_request());
                }
                break;
            }
            case kQueryConversationSettingsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.query_conversation_settings_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::QueryConversationSettingsRequest>(
                            arena, *from._impl_.kind_.query_conversation_settings_request_);
                } else {
                    _this->_impl_.kind_.query_conversation_settings_request_->MergeFrom(
                        from._internal_query_conversation_settings_request());
                }
                break;
            }
            case kUpdateConversationSettingsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.update_conversation_settings_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::UpdateConversationSettingsRequest>(
                            arena, *from._impl_.kind_.update_conversation_settings_request_);
                } else {
                    _this->_impl_.kind_.update_conversation_settings_request_->MergeFrom(
                        from._internal_update_conversation_settings_request());
                }
                break;
            }
            case kCreateMessageReactionsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.create_message_reactions_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::CreateMessageReactionsRequest>(
                            arena, *from._impl_.kind_.create_message_reactions_request_);
                } else {
                    _this->_impl_.kind_.create_message_reactions_request_->MergeFrom(
                        from._internal_create_message_reactions_request());
                }
                break;
            }
            case kDeleteMessageReactionsRequest: {
                if (oneof_needs_init) {
                    _this->_impl_.kind_.delete_message_reactions_request_ =
                        ::google::protobuf::MessageLite::CopyConstruct<
                            ::turms::client::model::proto::DeleteMessageReactionsRequest>(
                            arena, *from._impl_.kind_.delete_message_reactions_request_);
                } else {
                    _this->_impl_.kind_.delete_message_reactions_request_->MergeFrom(
                        from._internal_delete_message_reactions_request());
                }
                break;
            }
            case KIND_NOT_SET:
                break;
        }
    }
    _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TurmsRequest::CopyFrom(const TurmsRequest& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.TurmsRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void TurmsRequest::InternalSwap(TurmsRequest* PROTOBUF_RESTRICT other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    _impl_.custom_attributes_.InternalSwap(&other->_impl_.custom_attributes_);
    swap(_impl_.request_id_, other->_impl_.request_id_);
    swap(_impl_.kind_, other->_impl_.kind_);
    swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
