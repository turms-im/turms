// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: constant/device_type.proto
// Protobuf C++ Version: 5.27.2

#include "turms/client/model/proto/constant/device_type.pb.h"

#include <algorithm>
#include <type_traits>

#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/wire_format_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
PROTOBUF_CONSTINIT const uint32_t DeviceType_internal_data_[] = {
    393216u,
    0u,
};
bool DeviceType_IsValid(int value) {
    return 0 <= value && value <= 5;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string> DeviceType_strings[6] = {};

static const char DeviceType_names[] = {
    "ANDROID"
    "BROWSER"
    "DESKTOP"
    "IOS"
    "OTHERS"
    "UNKNOWN"};

static const ::google::protobuf::internal::EnumEntry DeviceType_entries[] = {
    {{&DeviceType_names[0], 7}, 3},
    {{&DeviceType_names[7], 7}, 1},
    {{&DeviceType_names[14], 7}, 0},
    {{&DeviceType_names[21], 3}, 2},
    {{&DeviceType_names[24], 6}, 4},
    {{&DeviceType_names[30], 7}, 5},
};

static const int DeviceType_entries_by_number[] = {
    2,  // 0 -> DESKTOP
    1,  // 1 -> BROWSER
    3,  // 2 -> IOS
    0,  // 3 -> ANDROID
    4,  // 4 -> OTHERS
    5,  // 5 -> UNKNOWN
};

const std::string& DeviceType_Name(DeviceType value) {
    static const bool kDummy = ::google::protobuf::internal::InitializeEnumStrings(
        DeviceType_entries, DeviceType_entries_by_number, 6, DeviceType_strings);
    (void)kDummy;

    int idx = ::google::protobuf::internal::LookUpEnumName(
        DeviceType_entries, DeviceType_entries_by_number, 6, value);
    return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                     : DeviceType_strings[idx].get();
}

bool DeviceType_Parse(absl::string_view name, DeviceType* value) {
    int int_value;
    bool success =
        ::google::protobuf::internal::LookUpEnumValue(DeviceType_entries, 6, name, &int_value);
    if (success) {
        *value = static_cast<DeviceType>(int_value);
    }
    return success;
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
