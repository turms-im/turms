// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: request/turms_request.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2fturms_5frequest_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_request_2fturms_5frequest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "turms/client/model/proto/model/common/value.pb.h"
#include "turms/client/model/proto/request/conference/create_meeting_request.pb.h"
#include "turms/client/model/proto/request/conference/delete_meeting_request.pb.h"
#include "turms/client/model/proto/request/conference/query_meetings_request.pb.h"
#include "turms/client/model/proto/request/conference/update_meeting_invitation_request.pb.h"
#include "turms/client/model/proto/request/conference/update_meeting_request.pb.h"
#include "turms/client/model/proto/request/conversation/delete_conversation_settings_request.pb.h"
#include "turms/client/model/proto/request/conversation/query_conversation_settings_request.pb.h"
#include "turms/client/model/proto/request/conversation/query_conversations_request.pb.h"
#include "turms/client/model/proto/request/conversation/update_conversation_request.pb.h"
#include "turms/client/model/proto/request/conversation/update_conversation_settings_request.pb.h"
#include "turms/client/model/proto/request/conversation/update_typing_status_request.pb.h"
#include "turms/client/model/proto/request/group/blocklist/create_group_blocked_user_request.pb.h"
#include "turms/client/model/proto/request/group/blocklist/delete_group_blocked_user_request.pb.h"
#include "turms/client/model/proto/request/group/blocklist/query_group_blocked_user_ids_request.pb.h"
#include "turms/client/model/proto/request/group/blocklist/query_group_blocked_user_infos_request.pb.h"
#include "turms/client/model/proto/request/group/create_group_request.pb.h"
#include "turms/client/model/proto/request/group/delete_group_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/check_group_join_questions_answers_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/create_group_invitation_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/create_group_join_questions_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/create_group_join_request_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/delete_group_invitation_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/delete_group_join_questions_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/delete_group_join_request_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/query_group_invitations_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/query_group_join_questions_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/query_group_join_requests_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/update_group_invitation_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/update_group_join_question_request.pb.h"
#include "turms/client/model/proto/request/group/enrollment/update_group_join_request_request.pb.h"
#include "turms/client/model/proto/request/group/member/create_group_members_request.pb.h"
#include "turms/client/model/proto/request/group/member/delete_group_members_request.pb.h"
#include "turms/client/model/proto/request/group/member/query_group_members_request.pb.h"
#include "turms/client/model/proto/request/group/member/update_group_member_request.pb.h"
#include "turms/client/model/proto/request/group/query_groups_request.pb.h"
#include "turms/client/model/proto/request/group/query_joined_group_ids_request.pb.h"
#include "turms/client/model/proto/request/group/query_joined_group_infos_request.pb.h"
#include "turms/client/model/proto/request/group/update_group_request.pb.h"
#include "turms/client/model/proto/request/message/create_message_reactions_request.pb.h"
#include "turms/client/model/proto/request/message/create_message_request.pb.h"
#include "turms/client/model/proto/request/message/delete_message_reactions_request.pb.h"
#include "turms/client/model/proto/request/message/query_messages_request.pb.h"
#include "turms/client/model/proto/request/message/update_message_request.pb.h"
#include "turms/client/model/proto/request/storage/delete_resource_request.pb.h"
#include "turms/client/model/proto/request/storage/query_message_attachment_infos_request.pb.h"
#include "turms/client/model/proto/request/storage/query_resource_download_info_request.pb.h"
#include "turms/client/model/proto/request/storage/query_resource_upload_info_request.pb.h"
#include "turms/client/model/proto/request/storage/update_message_attachment_info_request.pb.h"
#include "turms/client/model/proto/request/user/create_session_request.pb.h"
#include "turms/client/model/proto/request/user/delete_session_request.pb.h"
#include "turms/client/model/proto/request/user/delete_user_settings_request.pb.h"
#include "turms/client/model/proto/request/user/query_nearby_users_request.pb.h"
#include "turms/client/model/proto/request/user/query_user_online_statuses_request.pb.h"
#include "turms/client/model/proto/request/user/query_user_profiles_request.pb.h"
#include "turms/client/model/proto/request/user/query_user_settings_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/create_friend_request_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/create_relationship_group_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/create_relationship_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/delete_friend_request_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/delete_relationship_group_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/delete_relationship_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/query_friend_requests_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/query_related_user_ids_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/query_relationship_groups_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/query_relationships_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/update_friend_request_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/update_relationship_group_request.pb.h"
#include "turms/client/model/proto/request/user/relationship/update_relationship_request.pb.h"
#include "turms/client/model/proto/request/user/update_user_location_request.pb.h"
#include "turms/client/model/proto/request/user/update_user_online_status_request.pb.h"
#include "turms/client/model/proto/request/user/update_user_request.pb.h"
#include "turms/client/model/proto/request/user/update_user_settings_request.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_request_2fturms_5frequest_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2fturms_5frequest_2eproto {
    static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class TurmsRequest;
struct TurmsRequestDefaultTypeInternal;
extern TurmsRequestDefaultTypeInternal _TurmsRequest_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================

// -------------------------------------------------------------------

class TurmsRequest final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:turms.client.model.proto.TurmsRequest) */ {
   public:
    inline TurmsRequest()
        : TurmsRequest(nullptr) {
    }
    ~TurmsRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR TurmsRequest(::google::protobuf::internal::ConstantInitialized);

    inline TurmsRequest(const TurmsRequest& from)
        : TurmsRequest(nullptr, from) {
    }
    inline TurmsRequest(TurmsRequest&& from) noexcept
        : TurmsRequest(nullptr, std::move(from)) {
    }
    inline TurmsRequest& operator=(const TurmsRequest& from) {
        CopyFrom(from);
        return *this;
    }
    inline TurmsRequest& operator=(TurmsRequest&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const std::string& unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<std::string>(
            ::google::protobuf::internal::GetEmptyString);
    }
    inline std::string* mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<std::string>();
    }

    static const TurmsRequest& default_instance() {
        return *internal_default_instance();
    }
    enum KindCase {
        kCreateSessionRequest = 3,
        kDeleteSessionRequest = 4,
        kQueryConversationsRequest = 5,
        kUpdateConversationRequest = 6,
        kUpdateTypingStatusRequest = 7,
        kCreateMessageRequest = 8,
        kQueryMessagesRequest = 9,
        kUpdateMessageRequest = 10,
        kCreateGroupMembersRequest = 11,
        kDeleteGroupMembersRequest = 12,
        kQueryGroupMembersRequest = 13,
        kUpdateGroupMemberRequest = 14,
        kQueryUserProfilesRequest = 100,
        kQueryNearbyUsersRequest = 101,
        kQueryUserOnlineStatusesRequest = 102,
        kUpdateUserLocationRequest = 103,
        kUpdateUserOnlineStatusRequest = 104,
        kUpdateUserRequest = 105,
        kUpdateUserSettingsRequest = 106,
        kDeleteUserSettingsRequest = 107,
        kQueryUserSettingsRequest = 108,
        kCreateFriendRequestRequest = 200,
        kCreateRelationshipGroupRequest = 201,
        kCreateRelationshipRequest = 202,
        kDeleteFriendRequestRequest = 203,
        kDeleteRelationshipGroupRequest = 204,
        kDeleteRelationshipRequest = 205,
        kQueryFriendRequestsRequest = 206,
        kQueryRelatedUserIdsRequest = 207,
        kQueryRelationshipGroupsRequest = 208,
        kQueryRelationshipsRequest = 209,
        kUpdateFriendRequestRequest = 210,
        kUpdateRelationshipGroupRequest = 211,
        kUpdateRelationshipRequest = 212,
        kCreateGroupRequest = 300,
        kDeleteGroupRequest = 301,
        kQueryGroupsRequest = 302,
        kQueryJoinedGroupIdsRequest = 303,
        kQueryJoinedGroupInfosRequest = 304,
        kUpdateGroupRequest = 305,
        kCreateGroupBlockedUserRequest = 400,
        kDeleteGroupBlockedUserRequest = 401,
        kQueryGroupBlockedUserIdsRequest = 402,
        kQueryGroupBlockedUserInfosRequest = 403,
        kCheckGroupJoinQuestionsAnswersRequest = 500,
        kCreateGroupInvitationRequest = 501,
        kCreateGroupJoinRequestRequest = 502,
        kCreateGroupJoinQuestionsRequest = 503,
        kDeleteGroupInvitationRequest = 504,
        kDeleteGroupJoinRequestRequest = 505,
        kDeleteGroupJoinQuestionsRequest = 506,
        kQueryGroupInvitationsRequest = 507,
        kQueryGroupJoinRequestsRequest = 508,
        kQueryGroupJoinQuestionsRequest = 509,
        kUpdateGroupInvitationRequest = 510,
        kUpdateGroupJoinQuestionRequest = 511,
        kUpdateGroupJoinRequestRequest = 512,
        kCreateMeetingRequest = 900,
        kDeleteMeetingRequest = 901,
        kQueryMeetingsRequest = 902,
        kUpdateMeetingRequest = 903,
        kUpdateMeetingInvitationRequest = 904,
        kDeleteResourceRequest = 1000,
        kQueryResourceDownloadInfoRequest = 1001,
        kQueryResourceUploadInfoRequest = 1002,
        kQueryMessageAttachmentInfosRequest = 1003,
        kUpdateMessageAttachmentInfoRequest = 1004,
        kDeleteConversationSettingsRequest = 1100,
        kQueryConversationSettingsRequest = 1101,
        kUpdateConversationSettingsRequest = 1102,
        kCreateMessageReactionsRequest = 1200,
        kDeleteMessageReactionsRequest = 1201,
        KIND_NOT_SET = 0,
    };
    static inline const TurmsRequest* internal_default_instance() {
        return reinterpret_cast<const TurmsRequest*>(&_TurmsRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;
    friend void swap(TurmsRequest& a, TurmsRequest& b) {
        a.Swap(&b);
    }
    inline void Swap(TurmsRequest* other) {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(TurmsRequest* other) {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    TurmsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::MessageLite::DefaultConstruct<TurmsRequest>(arena);
    }
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) final;
    void CopyFrom(const TurmsRequest& from);
    void MergeFrom(const TurmsRequest& from);
    bool IsInitialized() const {
        return true;
    }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(::uint8_t* target,
                                  ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const {
        return _impl_._cached_size_.Get();
    }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(TurmsRequest* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() {
        return "turms.client.model.proto.TurmsRequest";
    }

   protected:
    explicit TurmsRequest(::google::protobuf::Arena* arena);
    TurmsRequest(::google::protobuf::Arena* arena, const TurmsRequest& from);
    TurmsRequest(::google::protobuf::Arena* arena, TurmsRequest&& from) noexcept
        : TurmsRequest(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::MessageLite::ClassData* GetClassData() const final;

   public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
        kCustomAttributesFieldNumber = 2,
        kRequestIdFieldNumber = 1,
        kCreateSessionRequestFieldNumber = 3,
        kDeleteSessionRequestFieldNumber = 4,
        kQueryConversationsRequestFieldNumber = 5,
        kUpdateConversationRequestFieldNumber = 6,
        kUpdateTypingStatusRequestFieldNumber = 7,
        kCreateMessageRequestFieldNumber = 8,
        kQueryMessagesRequestFieldNumber = 9,
        kUpdateMessageRequestFieldNumber = 10,
        kCreateGroupMembersRequestFieldNumber = 11,
        kDeleteGroupMembersRequestFieldNumber = 12,
        kQueryGroupMembersRequestFieldNumber = 13,
        kUpdateGroupMemberRequestFieldNumber = 14,
        kQueryUserProfilesRequestFieldNumber = 100,
        kQueryNearbyUsersRequestFieldNumber = 101,
        kQueryUserOnlineStatusesRequestFieldNumber = 102,
        kUpdateUserLocationRequestFieldNumber = 103,
        kUpdateUserOnlineStatusRequestFieldNumber = 104,
        kUpdateUserRequestFieldNumber = 105,
        kUpdateUserSettingsRequestFieldNumber = 106,
        kDeleteUserSettingsRequestFieldNumber = 107,
        kQueryUserSettingsRequestFieldNumber = 108,
        kCreateFriendRequestRequestFieldNumber = 200,
        kCreateRelationshipGroupRequestFieldNumber = 201,
        kCreateRelationshipRequestFieldNumber = 202,
        kDeleteFriendRequestRequestFieldNumber = 203,
        kDeleteRelationshipGroupRequestFieldNumber = 204,
        kDeleteRelationshipRequestFieldNumber = 205,
        kQueryFriendRequestsRequestFieldNumber = 206,
        kQueryRelatedUserIdsRequestFieldNumber = 207,
        kQueryRelationshipGroupsRequestFieldNumber = 208,
        kQueryRelationshipsRequestFieldNumber = 209,
        kUpdateFriendRequestRequestFieldNumber = 210,
        kUpdateRelationshipGroupRequestFieldNumber = 211,
        kUpdateRelationshipRequestFieldNumber = 212,
        kCreateGroupRequestFieldNumber = 300,
        kDeleteGroupRequestFieldNumber = 301,
        kQueryGroupsRequestFieldNumber = 302,
        kQueryJoinedGroupIdsRequestFieldNumber = 303,
        kQueryJoinedGroupInfosRequestFieldNumber = 304,
        kUpdateGroupRequestFieldNumber = 305,
        kCreateGroupBlockedUserRequestFieldNumber = 400,
        kDeleteGroupBlockedUserRequestFieldNumber = 401,
        kQueryGroupBlockedUserIdsRequestFieldNumber = 402,
        kQueryGroupBlockedUserInfosRequestFieldNumber = 403,
        kCheckGroupJoinQuestionsAnswersRequestFieldNumber = 500,
        kCreateGroupInvitationRequestFieldNumber = 501,
        kCreateGroupJoinRequestRequestFieldNumber = 502,
        kCreateGroupJoinQuestionsRequestFieldNumber = 503,
        kDeleteGroupInvitationRequestFieldNumber = 504,
        kDeleteGroupJoinRequestRequestFieldNumber = 505,
        kDeleteGroupJoinQuestionsRequestFieldNumber = 506,
        kQueryGroupInvitationsRequestFieldNumber = 507,
        kQueryGroupJoinRequestsRequestFieldNumber = 508,
        kQueryGroupJoinQuestionsRequestFieldNumber = 509,
        kUpdateGroupInvitationRequestFieldNumber = 510,
        kUpdateGroupJoinQuestionRequestFieldNumber = 511,
        kUpdateGroupJoinRequestRequestFieldNumber = 512,
        kCreateMeetingRequestFieldNumber = 900,
        kDeleteMeetingRequestFieldNumber = 901,
        kQueryMeetingsRequestFieldNumber = 902,
        kUpdateMeetingRequestFieldNumber = 903,
        kUpdateMeetingInvitationRequestFieldNumber = 904,
        kDeleteResourceRequestFieldNumber = 1000,
        kQueryResourceDownloadInfoRequestFieldNumber = 1001,
        kQueryResourceUploadInfoRequestFieldNumber = 1002,
        kQueryMessageAttachmentInfosRequestFieldNumber = 1003,
        kUpdateMessageAttachmentInfoRequestFieldNumber = 1004,
        kDeleteConversationSettingsRequestFieldNumber = 1100,
        kQueryConversationSettingsRequestFieldNumber = 1101,
        kUpdateConversationSettingsRequestFieldNumber = 1102,
        kCreateMessageReactionsRequestFieldNumber = 1200,
        kDeleteMessageReactionsRequestFieldNumber = 1201,
    };
    // repeated .turms.client.model.proto.Value custom_attributes = 2;
    int custom_attributes_size() const;

   private:
    int _internal_custom_attributes_size() const;

   public:
    void clear_custom_attributes();
    ::turms::client::model::proto::Value* mutable_custom_attributes(int index);
    ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
    mutable_custom_attributes();

   private:
    const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
    _internal_custom_attributes() const;
    ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
    _internal_mutable_custom_attributes();

   public:
    const ::turms::client::model::proto::Value& custom_attributes(int index) const;
    ::turms::client::model::proto::Value* add_custom_attributes();
    const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
    custom_attributes() const;
    // optional int64 request_id = 1;
    bool has_request_id() const;
    void clear_request_id();
    ::int64_t request_id() const;
    void set_request_id(::int64_t value);

   private:
    ::int64_t _internal_request_id() const;
    void _internal_set_request_id(::int64_t value);

   public:
    // .turms.client.model.proto.CreateSessionRequest create_session_request = 3;
    bool has_create_session_request() const;

   private:
    bool _internal_has_create_session_request() const;

   public:
    void clear_create_session_request();
    const ::turms::client::model::proto::CreateSessionRequest& create_session_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateSessionRequest*
    release_create_session_request();
    ::turms::client::model::proto::CreateSessionRequest* mutable_create_session_request();
    void set_allocated_create_session_request(
        ::turms::client::model::proto::CreateSessionRequest* value);
    void unsafe_arena_set_allocated_create_session_request(
        ::turms::client::model::proto::CreateSessionRequest* value);
    ::turms::client::model::proto::CreateSessionRequest*
    unsafe_arena_release_create_session_request();

   private:
    const ::turms::client::model::proto::CreateSessionRequest& _internal_create_session_request()
        const;
    ::turms::client::model::proto::CreateSessionRequest* _internal_mutable_create_session_request();

   public:
    // .turms.client.model.proto.DeleteSessionRequest delete_session_request = 4;
    bool has_delete_session_request() const;

   private:
    bool _internal_has_delete_session_request() const;

   public:
    void clear_delete_session_request();
    const ::turms::client::model::proto::DeleteSessionRequest& delete_session_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteSessionRequest*
    release_delete_session_request();
    ::turms::client::model::proto::DeleteSessionRequest* mutable_delete_session_request();
    void set_allocated_delete_session_request(
        ::turms::client::model::proto::DeleteSessionRequest* value);
    void unsafe_arena_set_allocated_delete_session_request(
        ::turms::client::model::proto::DeleteSessionRequest* value);
    ::turms::client::model::proto::DeleteSessionRequest*
    unsafe_arena_release_delete_session_request();

   private:
    const ::turms::client::model::proto::DeleteSessionRequest& _internal_delete_session_request()
        const;
    ::turms::client::model::proto::DeleteSessionRequest* _internal_mutable_delete_session_request();

   public:
    // .turms.client.model.proto.QueryConversationsRequest query_conversations_request = 5;
    bool has_query_conversations_request() const;

   private:
    bool _internal_has_query_conversations_request() const;

   public:
    void clear_query_conversations_request();
    const ::turms::client::model::proto::QueryConversationsRequest& query_conversations_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryConversationsRequest*
    release_query_conversations_request();
    ::turms::client::model::proto::QueryConversationsRequest* mutable_query_conversations_request();
    void set_allocated_query_conversations_request(
        ::turms::client::model::proto::QueryConversationsRequest* value);
    void unsafe_arena_set_allocated_query_conversations_request(
        ::turms::client::model::proto::QueryConversationsRequest* value);
    ::turms::client::model::proto::QueryConversationsRequest*
    unsafe_arena_release_query_conversations_request();

   private:
    const ::turms::client::model::proto::QueryConversationsRequest&
    _internal_query_conversations_request() const;
    ::turms::client::model::proto::QueryConversationsRequest*
    _internal_mutable_query_conversations_request();

   public:
    // .turms.client.model.proto.UpdateConversationRequest update_conversation_request = 6;
    bool has_update_conversation_request() const;

   private:
    bool _internal_has_update_conversation_request() const;

   public:
    void clear_update_conversation_request();
    const ::turms::client::model::proto::UpdateConversationRequest& update_conversation_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateConversationRequest*
    release_update_conversation_request();
    ::turms::client::model::proto::UpdateConversationRequest* mutable_update_conversation_request();
    void set_allocated_update_conversation_request(
        ::turms::client::model::proto::UpdateConversationRequest* value);
    void unsafe_arena_set_allocated_update_conversation_request(
        ::turms::client::model::proto::UpdateConversationRequest* value);
    ::turms::client::model::proto::UpdateConversationRequest*
    unsafe_arena_release_update_conversation_request();

   private:
    const ::turms::client::model::proto::UpdateConversationRequest&
    _internal_update_conversation_request() const;
    ::turms::client::model::proto::UpdateConversationRequest*
    _internal_mutable_update_conversation_request();

   public:
    // .turms.client.model.proto.UpdateTypingStatusRequest update_typing_status_request = 7;
    bool has_update_typing_status_request() const;

   private:
    bool _internal_has_update_typing_status_request() const;

   public:
    void clear_update_typing_status_request();
    const ::turms::client::model::proto::UpdateTypingStatusRequest& update_typing_status_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateTypingStatusRequest*
    release_update_typing_status_request();
    ::turms::client::model::proto::UpdateTypingStatusRequest*
    mutable_update_typing_status_request();
    void set_allocated_update_typing_status_request(
        ::turms::client::model::proto::UpdateTypingStatusRequest* value);
    void unsafe_arena_set_allocated_update_typing_status_request(
        ::turms::client::model::proto::UpdateTypingStatusRequest* value);
    ::turms::client::model::proto::UpdateTypingStatusRequest*
    unsafe_arena_release_update_typing_status_request();

   private:
    const ::turms::client::model::proto::UpdateTypingStatusRequest&
    _internal_update_typing_status_request() const;
    ::turms::client::model::proto::UpdateTypingStatusRequest*
    _internal_mutable_update_typing_status_request();

   public:
    // .turms.client.model.proto.CreateMessageRequest create_message_request = 8;
    bool has_create_message_request() const;

   private:
    bool _internal_has_create_message_request() const;

   public:
    void clear_create_message_request();
    const ::turms::client::model::proto::CreateMessageRequest& create_message_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateMessageRequest*
    release_create_message_request();
    ::turms::client::model::proto::CreateMessageRequest* mutable_create_message_request();
    void set_allocated_create_message_request(
        ::turms::client::model::proto::CreateMessageRequest* value);
    void unsafe_arena_set_allocated_create_message_request(
        ::turms::client::model::proto::CreateMessageRequest* value);
    ::turms::client::model::proto::CreateMessageRequest*
    unsafe_arena_release_create_message_request();

   private:
    const ::turms::client::model::proto::CreateMessageRequest& _internal_create_message_request()
        const;
    ::turms::client::model::proto::CreateMessageRequest* _internal_mutable_create_message_request();

   public:
    // .turms.client.model.proto.QueryMessagesRequest query_messages_request = 9;
    bool has_query_messages_request() const;

   private:
    bool _internal_has_query_messages_request() const;

   public:
    void clear_query_messages_request();
    const ::turms::client::model::proto::QueryMessagesRequest& query_messages_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryMessagesRequest*
    release_query_messages_request();
    ::turms::client::model::proto::QueryMessagesRequest* mutable_query_messages_request();
    void set_allocated_query_messages_request(
        ::turms::client::model::proto::QueryMessagesRequest* value);
    void unsafe_arena_set_allocated_query_messages_request(
        ::turms::client::model::proto::QueryMessagesRequest* value);
    ::turms::client::model::proto::QueryMessagesRequest*
    unsafe_arena_release_query_messages_request();

   private:
    const ::turms::client::model::proto::QueryMessagesRequest& _internal_query_messages_request()
        const;
    ::turms::client::model::proto::QueryMessagesRequest* _internal_mutable_query_messages_request();

   public:
    // .turms.client.model.proto.UpdateMessageRequest update_message_request = 10;
    bool has_update_message_request() const;

   private:
    bool _internal_has_update_message_request() const;

   public:
    void clear_update_message_request();
    const ::turms::client::model::proto::UpdateMessageRequest& update_message_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateMessageRequest*
    release_update_message_request();
    ::turms::client::model::proto::UpdateMessageRequest* mutable_update_message_request();
    void set_allocated_update_message_request(
        ::turms::client::model::proto::UpdateMessageRequest* value);
    void unsafe_arena_set_allocated_update_message_request(
        ::turms::client::model::proto::UpdateMessageRequest* value);
    ::turms::client::model::proto::UpdateMessageRequest*
    unsafe_arena_release_update_message_request();

   private:
    const ::turms::client::model::proto::UpdateMessageRequest& _internal_update_message_request()
        const;
    ::turms::client::model::proto::UpdateMessageRequest* _internal_mutable_update_message_request();

   public:
    // .turms.client.model.proto.CreateGroupMembersRequest create_group_members_request = 11;
    bool has_create_group_members_request() const;

   private:
    bool _internal_has_create_group_members_request() const;

   public:
    void clear_create_group_members_request();
    const ::turms::client::model::proto::CreateGroupMembersRequest& create_group_members_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateGroupMembersRequest*
    release_create_group_members_request();
    ::turms::client::model::proto::CreateGroupMembersRequest*
    mutable_create_group_members_request();
    void set_allocated_create_group_members_request(
        ::turms::client::model::proto::CreateGroupMembersRequest* value);
    void unsafe_arena_set_allocated_create_group_members_request(
        ::turms::client::model::proto::CreateGroupMembersRequest* value);
    ::turms::client::model::proto::CreateGroupMembersRequest*
    unsafe_arena_release_create_group_members_request();

   private:
    const ::turms::client::model::proto::CreateGroupMembersRequest&
    _internal_create_group_members_request() const;
    ::turms::client::model::proto::CreateGroupMembersRequest*
    _internal_mutable_create_group_members_request();

   public:
    // .turms.client.model.proto.DeleteGroupMembersRequest delete_group_members_request = 12;
    bool has_delete_group_members_request() const;

   private:
    bool _internal_has_delete_group_members_request() const;

   public:
    void clear_delete_group_members_request();
    const ::turms::client::model::proto::DeleteGroupMembersRequest& delete_group_members_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteGroupMembersRequest*
    release_delete_group_members_request();
    ::turms::client::model::proto::DeleteGroupMembersRequest*
    mutable_delete_group_members_request();
    void set_allocated_delete_group_members_request(
        ::turms::client::model::proto::DeleteGroupMembersRequest* value);
    void unsafe_arena_set_allocated_delete_group_members_request(
        ::turms::client::model::proto::DeleteGroupMembersRequest* value);
    ::turms::client::model::proto::DeleteGroupMembersRequest*
    unsafe_arena_release_delete_group_members_request();

   private:
    const ::turms::client::model::proto::DeleteGroupMembersRequest&
    _internal_delete_group_members_request() const;
    ::turms::client::model::proto::DeleteGroupMembersRequest*
    _internal_mutable_delete_group_members_request();

   public:
    // .turms.client.model.proto.QueryGroupMembersRequest query_group_members_request = 13;
    bool has_query_group_members_request() const;

   private:
    bool _internal_has_query_group_members_request() const;

   public:
    void clear_query_group_members_request();
    const ::turms::client::model::proto::QueryGroupMembersRequest& query_group_members_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryGroupMembersRequest*
    release_query_group_members_request();
    ::turms::client::model::proto::QueryGroupMembersRequest* mutable_query_group_members_request();
    void set_allocated_query_group_members_request(
        ::turms::client::model::proto::QueryGroupMembersRequest* value);
    void unsafe_arena_set_allocated_query_group_members_request(
        ::turms::client::model::proto::QueryGroupMembersRequest* value);
    ::turms::client::model::proto::QueryGroupMembersRequest*
    unsafe_arena_release_query_group_members_request();

   private:
    const ::turms::client::model::proto::QueryGroupMembersRequest&
    _internal_query_group_members_request() const;
    ::turms::client::model::proto::QueryGroupMembersRequest*
    _internal_mutable_query_group_members_request();

   public:
    // .turms.client.model.proto.UpdateGroupMemberRequest update_group_member_request = 14;
    bool has_update_group_member_request() const;

   private:
    bool _internal_has_update_group_member_request() const;

   public:
    void clear_update_group_member_request();
    const ::turms::client::model::proto::UpdateGroupMemberRequest& update_group_member_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateGroupMemberRequest*
    release_update_group_member_request();
    ::turms::client::model::proto::UpdateGroupMemberRequest* mutable_update_group_member_request();
    void set_allocated_update_group_member_request(
        ::turms::client::model::proto::UpdateGroupMemberRequest* value);
    void unsafe_arena_set_allocated_update_group_member_request(
        ::turms::client::model::proto::UpdateGroupMemberRequest* value);
    ::turms::client::model::proto::UpdateGroupMemberRequest*
    unsafe_arena_release_update_group_member_request();

   private:
    const ::turms::client::model::proto::UpdateGroupMemberRequest&
    _internal_update_group_member_request() const;
    ::turms::client::model::proto::UpdateGroupMemberRequest*
    _internal_mutable_update_group_member_request();

   public:
    // .turms.client.model.proto.QueryUserProfilesRequest query_user_profiles_request = 100;
    bool has_query_user_profiles_request() const;

   private:
    bool _internal_has_query_user_profiles_request() const;

   public:
    void clear_query_user_profiles_request();
    const ::turms::client::model::proto::QueryUserProfilesRequest& query_user_profiles_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryUserProfilesRequest*
    release_query_user_profiles_request();
    ::turms::client::model::proto::QueryUserProfilesRequest* mutable_query_user_profiles_request();
    void set_allocated_query_user_profiles_request(
        ::turms::client::model::proto::QueryUserProfilesRequest* value);
    void unsafe_arena_set_allocated_query_user_profiles_request(
        ::turms::client::model::proto::QueryUserProfilesRequest* value);
    ::turms::client::model::proto::QueryUserProfilesRequest*
    unsafe_arena_release_query_user_profiles_request();

   private:
    const ::turms::client::model::proto::QueryUserProfilesRequest&
    _internal_query_user_profiles_request() const;
    ::turms::client::model::proto::QueryUserProfilesRequest*
    _internal_mutable_query_user_profiles_request();

   public:
    // .turms.client.model.proto.QueryNearbyUsersRequest query_nearby_users_request = 101;
    bool has_query_nearby_users_request() const;

   private:
    bool _internal_has_query_nearby_users_request() const;

   public:
    void clear_query_nearby_users_request();
    const ::turms::client::model::proto::QueryNearbyUsersRequest& query_nearby_users_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryNearbyUsersRequest*
    release_query_nearby_users_request();
    ::turms::client::model::proto::QueryNearbyUsersRequest* mutable_query_nearby_users_request();
    void set_allocated_query_nearby_users_request(
        ::turms::client::model::proto::QueryNearbyUsersRequest* value);
    void unsafe_arena_set_allocated_query_nearby_users_request(
        ::turms::client::model::proto::QueryNearbyUsersRequest* value);
    ::turms::client::model::proto::QueryNearbyUsersRequest*
    unsafe_arena_release_query_nearby_users_request();

   private:
    const ::turms::client::model::proto::QueryNearbyUsersRequest&
    _internal_query_nearby_users_request() const;
    ::turms::client::model::proto::QueryNearbyUsersRequest*
    _internal_mutable_query_nearby_users_request();

   public:
    // .turms.client.model.proto.QueryUserOnlineStatusesRequest query_user_online_statuses_request =
    // 102;
    bool has_query_user_online_statuses_request() const;

   private:
    bool _internal_has_query_user_online_statuses_request() const;

   public:
    void clear_query_user_online_statuses_request();
    const ::turms::client::model::proto::QueryUserOnlineStatusesRequest&
    query_user_online_statuses_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
    release_query_user_online_statuses_request();
    ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
    mutable_query_user_online_statuses_request();
    void set_allocated_query_user_online_statuses_request(
        ::turms::client::model::proto::QueryUserOnlineStatusesRequest* value);
    void unsafe_arena_set_allocated_query_user_online_statuses_request(
        ::turms::client::model::proto::QueryUserOnlineStatusesRequest* value);
    ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
    unsafe_arena_release_query_user_online_statuses_request();

   private:
    const ::turms::client::model::proto::QueryUserOnlineStatusesRequest&
    _internal_query_user_online_statuses_request() const;
    ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
    _internal_mutable_query_user_online_statuses_request();

   public:
    // .turms.client.model.proto.UpdateUserLocationRequest update_user_location_request = 103;
    bool has_update_user_location_request() const;

   private:
    bool _internal_has_update_user_location_request() const;

   public:
    void clear_update_user_location_request();
    const ::turms::client::model::proto::UpdateUserLocationRequest& update_user_location_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateUserLocationRequest*
    release_update_user_location_request();
    ::turms::client::model::proto::UpdateUserLocationRequest*
    mutable_update_user_location_request();
    void set_allocated_update_user_location_request(
        ::turms::client::model::proto::UpdateUserLocationRequest* value);
    void unsafe_arena_set_allocated_update_user_location_request(
        ::turms::client::model::proto::UpdateUserLocationRequest* value);
    ::turms::client::model::proto::UpdateUserLocationRequest*
    unsafe_arena_release_update_user_location_request();

   private:
    const ::turms::client::model::proto::UpdateUserLocationRequest&
    _internal_update_user_location_request() const;
    ::turms::client::model::proto::UpdateUserLocationRequest*
    _internal_mutable_update_user_location_request();

   public:
    // .turms.client.model.proto.UpdateUserOnlineStatusRequest update_user_online_status_request =
    // 104;
    bool has_update_user_online_status_request() const;

   private:
    bool _internal_has_update_user_online_status_request() const;

   public:
    void clear_update_user_online_status_request();
    const ::turms::client::model::proto::UpdateUserOnlineStatusRequest&
    update_user_online_status_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
    release_update_user_online_status_request();
    ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
    mutable_update_user_online_status_request();
    void set_allocated_update_user_online_status_request(
        ::turms::client::model::proto::UpdateUserOnlineStatusRequest* value);
    void unsafe_arena_set_allocated_update_user_online_status_request(
        ::turms::client::model::proto::UpdateUserOnlineStatusRequest* value);
    ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
    unsafe_arena_release_update_user_online_status_request();

   private:
    const ::turms::client::model::proto::UpdateUserOnlineStatusRequest&
    _internal_update_user_online_status_request() const;
    ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
    _internal_mutable_update_user_online_status_request();

   public:
    // .turms.client.model.proto.UpdateUserRequest update_user_request = 105;
    bool has_update_user_request() const;

   private:
    bool _internal_has_update_user_request() const;

   public:
    void clear_update_user_request();
    const ::turms::client::model::proto::UpdateUserRequest& update_user_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateUserRequest*
    release_update_user_request();
    ::turms::client::model::proto::UpdateUserRequest* mutable_update_user_request();
    void set_allocated_update_user_request(::turms::client::model::proto::UpdateUserRequest* value);
    void unsafe_arena_set_allocated_update_user_request(
        ::turms::client::model::proto::UpdateUserRequest* value);
    ::turms::client::model::proto::UpdateUserRequest* unsafe_arena_release_update_user_request();

   private:
    const ::turms::client::model::proto::UpdateUserRequest& _internal_update_user_request() const;
    ::turms::client::model::proto::UpdateUserRequest* _internal_mutable_update_user_request();

   public:
    // .turms.client.model.proto.UpdateUserSettingsRequest update_user_settings_request = 106;
    bool has_update_user_settings_request() const;

   private:
    bool _internal_has_update_user_settings_request() const;

   public:
    void clear_update_user_settings_request();
    const ::turms::client::model::proto::UpdateUserSettingsRequest& update_user_settings_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateUserSettingsRequest*
    release_update_user_settings_request();
    ::turms::client::model::proto::UpdateUserSettingsRequest*
    mutable_update_user_settings_request();
    void set_allocated_update_user_settings_request(
        ::turms::client::model::proto::UpdateUserSettingsRequest* value);
    void unsafe_arena_set_allocated_update_user_settings_request(
        ::turms::client::model::proto::UpdateUserSettingsRequest* value);
    ::turms::client::model::proto::UpdateUserSettingsRequest*
    unsafe_arena_release_update_user_settings_request();

   private:
    const ::turms::client::model::proto::UpdateUserSettingsRequest&
    _internal_update_user_settings_request() const;
    ::turms::client::model::proto::UpdateUserSettingsRequest*
    _internal_mutable_update_user_settings_request();

   public:
    // .turms.client.model.proto.DeleteUserSettingsRequest delete_user_settings_request = 107;
    bool has_delete_user_settings_request() const;

   private:
    bool _internal_has_delete_user_settings_request() const;

   public:
    void clear_delete_user_settings_request();
    const ::turms::client::model::proto::DeleteUserSettingsRequest& delete_user_settings_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteUserSettingsRequest*
    release_delete_user_settings_request();
    ::turms::client::model::proto::DeleteUserSettingsRequest*
    mutable_delete_user_settings_request();
    void set_allocated_delete_user_settings_request(
        ::turms::client::model::proto::DeleteUserSettingsRequest* value);
    void unsafe_arena_set_allocated_delete_user_settings_request(
        ::turms::client::model::proto::DeleteUserSettingsRequest* value);
    ::turms::client::model::proto::DeleteUserSettingsRequest*
    unsafe_arena_release_delete_user_settings_request();

   private:
    const ::turms::client::model::proto::DeleteUserSettingsRequest&
    _internal_delete_user_settings_request() const;
    ::turms::client::model::proto::DeleteUserSettingsRequest*
    _internal_mutable_delete_user_settings_request();

   public:
    // .turms.client.model.proto.QueryUserSettingsRequest query_user_settings_request = 108;
    bool has_query_user_settings_request() const;

   private:
    bool _internal_has_query_user_settings_request() const;

   public:
    void clear_query_user_settings_request();
    const ::turms::client::model::proto::QueryUserSettingsRequest& query_user_settings_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryUserSettingsRequest*
    release_query_user_settings_request();
    ::turms::client::model::proto::QueryUserSettingsRequest* mutable_query_user_settings_request();
    void set_allocated_query_user_settings_request(
        ::turms::client::model::proto::QueryUserSettingsRequest* value);
    void unsafe_arena_set_allocated_query_user_settings_request(
        ::turms::client::model::proto::QueryUserSettingsRequest* value);
    ::turms::client::model::proto::QueryUserSettingsRequest*
    unsafe_arena_release_query_user_settings_request();

   private:
    const ::turms::client::model::proto::QueryUserSettingsRequest&
    _internal_query_user_settings_request() const;
    ::turms::client::model::proto::QueryUserSettingsRequest*
    _internal_mutable_query_user_settings_request();

   public:
    // .turms.client.model.proto.CreateFriendRequestRequest create_friend_request_request = 200;
    bool has_create_friend_request_request() const;

   private:
    bool _internal_has_create_friend_request_request() const;

   public:
    void clear_create_friend_request_request();
    const ::turms::client::model::proto::CreateFriendRequestRequest& create_friend_request_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateFriendRequestRequest*
    release_create_friend_request_request();
    ::turms::client::model::proto::CreateFriendRequestRequest*
    mutable_create_friend_request_request();
    void set_allocated_create_friend_request_request(
        ::turms::client::model::proto::CreateFriendRequestRequest* value);
    void unsafe_arena_set_allocated_create_friend_request_request(
        ::turms::client::model::proto::CreateFriendRequestRequest* value);
    ::turms::client::model::proto::CreateFriendRequestRequest*
    unsafe_arena_release_create_friend_request_request();

   private:
    const ::turms::client::model::proto::CreateFriendRequestRequest&
    _internal_create_friend_request_request() const;
    ::turms::client::model::proto::CreateFriendRequestRequest*
    _internal_mutable_create_friend_request_request();

   public:
    // .turms.client.model.proto.CreateRelationshipGroupRequest create_relationship_group_request =
    // 201;
    bool has_create_relationship_group_request() const;

   private:
    bool _internal_has_create_relationship_group_request() const;

   public:
    void clear_create_relationship_group_request();
    const ::turms::client::model::proto::CreateRelationshipGroupRequest&
    create_relationship_group_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateRelationshipGroupRequest*
    release_create_relationship_group_request();
    ::turms::client::model::proto::CreateRelationshipGroupRequest*
    mutable_create_relationship_group_request();
    void set_allocated_create_relationship_group_request(
        ::turms::client::model::proto::CreateRelationshipGroupRequest* value);
    void unsafe_arena_set_allocated_create_relationship_group_request(
        ::turms::client::model::proto::CreateRelationshipGroupRequest* value);
    ::turms::client::model::proto::CreateRelationshipGroupRequest*
    unsafe_arena_release_create_relationship_group_request();

   private:
    const ::turms::client::model::proto::CreateRelationshipGroupRequest&
    _internal_create_relationship_group_request() const;
    ::turms::client::model::proto::CreateRelationshipGroupRequest*
    _internal_mutable_create_relationship_group_request();

   public:
    // .turms.client.model.proto.CreateRelationshipRequest create_relationship_request = 202;
    bool has_create_relationship_request() const;

   private:
    bool _internal_has_create_relationship_request() const;

   public:
    void clear_create_relationship_request();
    const ::turms::client::model::proto::CreateRelationshipRequest& create_relationship_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateRelationshipRequest*
    release_create_relationship_request();
    ::turms::client::model::proto::CreateRelationshipRequest* mutable_create_relationship_request();
    void set_allocated_create_relationship_request(
        ::turms::client::model::proto::CreateRelationshipRequest* value);
    void unsafe_arena_set_allocated_create_relationship_request(
        ::turms::client::model::proto::CreateRelationshipRequest* value);
    ::turms::client::model::proto::CreateRelationshipRequest*
    unsafe_arena_release_create_relationship_request();

   private:
    const ::turms::client::model::proto::CreateRelationshipRequest&
    _internal_create_relationship_request() const;
    ::turms::client::model::proto::CreateRelationshipRequest*
    _internal_mutable_create_relationship_request();

   public:
    // .turms.client.model.proto.DeleteFriendRequestRequest delete_friend_request_request = 203;
    bool has_delete_friend_request_request() const;

   private:
    bool _internal_has_delete_friend_request_request() const;

   public:
    void clear_delete_friend_request_request();
    const ::turms::client::model::proto::DeleteFriendRequestRequest& delete_friend_request_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteFriendRequestRequest*
    release_delete_friend_request_request();
    ::turms::client::model::proto::DeleteFriendRequestRequest*
    mutable_delete_friend_request_request();
    void set_allocated_delete_friend_request_request(
        ::turms::client::model::proto::DeleteFriendRequestRequest* value);
    void unsafe_arena_set_allocated_delete_friend_request_request(
        ::turms::client::model::proto::DeleteFriendRequestRequest* value);
    ::turms::client::model::proto::DeleteFriendRequestRequest*
    unsafe_arena_release_delete_friend_request_request();

   private:
    const ::turms::client::model::proto::DeleteFriendRequestRequest&
    _internal_delete_friend_request_request() const;
    ::turms::client::model::proto::DeleteFriendRequestRequest*
    _internal_mutable_delete_friend_request_request();

   public:
    // .turms.client.model.proto.DeleteRelationshipGroupRequest delete_relationship_group_request =
    // 204;
    bool has_delete_relationship_group_request() const;

   private:
    bool _internal_has_delete_relationship_group_request() const;

   public:
    void clear_delete_relationship_group_request();
    const ::turms::client::model::proto::DeleteRelationshipGroupRequest&
    delete_relationship_group_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteRelationshipGroupRequest*
    release_delete_relationship_group_request();
    ::turms::client::model::proto::DeleteRelationshipGroupRequest*
    mutable_delete_relationship_group_request();
    void set_allocated_delete_relationship_group_request(
        ::turms::client::model::proto::DeleteRelationshipGroupRequest* value);
    void unsafe_arena_set_allocated_delete_relationship_group_request(
        ::turms::client::model::proto::DeleteRelationshipGroupRequest* value);
    ::turms::client::model::proto::DeleteRelationshipGroupRequest*
    unsafe_arena_release_delete_relationship_group_request();

   private:
    const ::turms::client::model::proto::DeleteRelationshipGroupRequest&
    _internal_delete_relationship_group_request() const;
    ::turms::client::model::proto::DeleteRelationshipGroupRequest*
    _internal_mutable_delete_relationship_group_request();

   public:
    // .turms.client.model.proto.DeleteRelationshipRequest delete_relationship_request = 205;
    bool has_delete_relationship_request() const;

   private:
    bool _internal_has_delete_relationship_request() const;

   public:
    void clear_delete_relationship_request();
    const ::turms::client::model::proto::DeleteRelationshipRequest& delete_relationship_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteRelationshipRequest*
    release_delete_relationship_request();
    ::turms::client::model::proto::DeleteRelationshipRequest* mutable_delete_relationship_request();
    void set_allocated_delete_relationship_request(
        ::turms::client::model::proto::DeleteRelationshipRequest* value);
    void unsafe_arena_set_allocated_delete_relationship_request(
        ::turms::client::model::proto::DeleteRelationshipRequest* value);
    ::turms::client::model::proto::DeleteRelationshipRequest*
    unsafe_arena_release_delete_relationship_request();

   private:
    const ::turms::client::model::proto::DeleteRelationshipRequest&
    _internal_delete_relationship_request() const;
    ::turms::client::model::proto::DeleteRelationshipRequest*
    _internal_mutable_delete_relationship_request();

   public:
    // .turms.client.model.proto.QueryFriendRequestsRequest query_friend_requests_request = 206;
    bool has_query_friend_requests_request() const;

   private:
    bool _internal_has_query_friend_requests_request() const;

   public:
    void clear_query_friend_requests_request();
    const ::turms::client::model::proto::QueryFriendRequestsRequest& query_friend_requests_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryFriendRequestsRequest*
    release_query_friend_requests_request();
    ::turms::client::model::proto::QueryFriendRequestsRequest*
    mutable_query_friend_requests_request();
    void set_allocated_query_friend_requests_request(
        ::turms::client::model::proto::QueryFriendRequestsRequest* value);
    void unsafe_arena_set_allocated_query_friend_requests_request(
        ::turms::client::model::proto::QueryFriendRequestsRequest* value);
    ::turms::client::model::proto::QueryFriendRequestsRequest*
    unsafe_arena_release_query_friend_requests_request();

   private:
    const ::turms::client::model::proto::QueryFriendRequestsRequest&
    _internal_query_friend_requests_request() const;
    ::turms::client::model::proto::QueryFriendRequestsRequest*
    _internal_mutable_query_friend_requests_request();

   public:
    // .turms.client.model.proto.QueryRelatedUserIdsRequest query_related_user_ids_request = 207;
    bool has_query_related_user_ids_request() const;

   private:
    bool _internal_has_query_related_user_ids_request() const;

   public:
    void clear_query_related_user_ids_request();
    const ::turms::client::model::proto::QueryRelatedUserIdsRequest&
    query_related_user_ids_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryRelatedUserIdsRequest*
    release_query_related_user_ids_request();
    ::turms::client::model::proto::QueryRelatedUserIdsRequest*
    mutable_query_related_user_ids_request();
    void set_allocated_query_related_user_ids_request(
        ::turms::client::model::proto::QueryRelatedUserIdsRequest* value);
    void unsafe_arena_set_allocated_query_related_user_ids_request(
        ::turms::client::model::proto::QueryRelatedUserIdsRequest* value);
    ::turms::client::model::proto::QueryRelatedUserIdsRequest*
    unsafe_arena_release_query_related_user_ids_request();

   private:
    const ::turms::client::model::proto::QueryRelatedUserIdsRequest&
    _internal_query_related_user_ids_request() const;
    ::turms::client::model::proto::QueryRelatedUserIdsRequest*
    _internal_mutable_query_related_user_ids_request();

   public:
    // .turms.client.model.proto.QueryRelationshipGroupsRequest query_relationship_groups_request =
    // 208;
    bool has_query_relationship_groups_request() const;

   private:
    bool _internal_has_query_relationship_groups_request() const;

   public:
    void clear_query_relationship_groups_request();
    const ::turms::client::model::proto::QueryRelationshipGroupsRequest&
    query_relationship_groups_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryRelationshipGroupsRequest*
    release_query_relationship_groups_request();
    ::turms::client::model::proto::QueryRelationshipGroupsRequest*
    mutable_query_relationship_groups_request();
    void set_allocated_query_relationship_groups_request(
        ::turms::client::model::proto::QueryRelationshipGroupsRequest* value);
    void unsafe_arena_set_allocated_query_relationship_groups_request(
        ::turms::client::model::proto::QueryRelationshipGroupsRequest* value);
    ::turms::client::model::proto::QueryRelationshipGroupsRequest*
    unsafe_arena_release_query_relationship_groups_request();

   private:
    const ::turms::client::model::proto::QueryRelationshipGroupsRequest&
    _internal_query_relationship_groups_request() const;
    ::turms::client::model::proto::QueryRelationshipGroupsRequest*
    _internal_mutable_query_relationship_groups_request();

   public:
    // .turms.client.model.proto.QueryRelationshipsRequest query_relationships_request = 209;
    bool has_query_relationships_request() const;

   private:
    bool _internal_has_query_relationships_request() const;

   public:
    void clear_query_relationships_request();
    const ::turms::client::model::proto::QueryRelationshipsRequest& query_relationships_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryRelationshipsRequest*
    release_query_relationships_request();
    ::turms::client::model::proto::QueryRelationshipsRequest* mutable_query_relationships_request();
    void set_allocated_query_relationships_request(
        ::turms::client::model::proto::QueryRelationshipsRequest* value);
    void unsafe_arena_set_allocated_query_relationships_request(
        ::turms::client::model::proto::QueryRelationshipsRequest* value);
    ::turms::client::model::proto::QueryRelationshipsRequest*
    unsafe_arena_release_query_relationships_request();

   private:
    const ::turms::client::model::proto::QueryRelationshipsRequest&
    _internal_query_relationships_request() const;
    ::turms::client::model::proto::QueryRelationshipsRequest*
    _internal_mutable_query_relationships_request();

   public:
    // .turms.client.model.proto.UpdateFriendRequestRequest update_friend_request_request = 210;
    bool has_update_friend_request_request() const;

   private:
    bool _internal_has_update_friend_request_request() const;

   public:
    void clear_update_friend_request_request();
    const ::turms::client::model::proto::UpdateFriendRequestRequest& update_friend_request_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateFriendRequestRequest*
    release_update_friend_request_request();
    ::turms::client::model::proto::UpdateFriendRequestRequest*
    mutable_update_friend_request_request();
    void set_allocated_update_friend_request_request(
        ::turms::client::model::proto::UpdateFriendRequestRequest* value);
    void unsafe_arena_set_allocated_update_friend_request_request(
        ::turms::client::model::proto::UpdateFriendRequestRequest* value);
    ::turms::client::model::proto::UpdateFriendRequestRequest*
    unsafe_arena_release_update_friend_request_request();

   private:
    const ::turms::client::model::proto::UpdateFriendRequestRequest&
    _internal_update_friend_request_request() const;
    ::turms::client::model::proto::UpdateFriendRequestRequest*
    _internal_mutable_update_friend_request_request();

   public:
    // .turms.client.model.proto.UpdateRelationshipGroupRequest update_relationship_group_request =
    // 211;
    bool has_update_relationship_group_request() const;

   private:
    bool _internal_has_update_relationship_group_request() const;

   public:
    void clear_update_relationship_group_request();
    const ::turms::client::model::proto::UpdateRelationshipGroupRequest&
    update_relationship_group_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateRelationshipGroupRequest*
    release_update_relationship_group_request();
    ::turms::client::model::proto::UpdateRelationshipGroupRequest*
    mutable_update_relationship_group_request();
    void set_allocated_update_relationship_group_request(
        ::turms::client::model::proto::UpdateRelationshipGroupRequest* value);
    void unsafe_arena_set_allocated_update_relationship_group_request(
        ::turms::client::model::proto::UpdateRelationshipGroupRequest* value);
    ::turms::client::model::proto::UpdateRelationshipGroupRequest*
    unsafe_arena_release_update_relationship_group_request();

   private:
    const ::turms::client::model::proto::UpdateRelationshipGroupRequest&
    _internal_update_relationship_group_request() const;
    ::turms::client::model::proto::UpdateRelationshipGroupRequest*
    _internal_mutable_update_relationship_group_request();

   public:
    // .turms.client.model.proto.UpdateRelationshipRequest update_relationship_request = 212;
    bool has_update_relationship_request() const;

   private:
    bool _internal_has_update_relationship_request() const;

   public:
    void clear_update_relationship_request();
    const ::turms::client::model::proto::UpdateRelationshipRequest& update_relationship_request()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateRelationshipRequest*
    release_update_relationship_request();
    ::turms::client::model::proto::UpdateRelationshipRequest* mutable_update_relationship_request();
    void set_allocated_update_relationship_request(
        ::turms::client::model::proto::UpdateRelationshipRequest* value);
    void unsafe_arena_set_allocated_update_relationship_request(
        ::turms::client::model::proto::UpdateRelationshipRequest* value);
    ::turms::client::model::proto::UpdateRelationshipRequest*
    unsafe_arena_release_update_relationship_request();

   private:
    const ::turms::client::model::proto::UpdateRelationshipRequest&
    _internal_update_relationship_request() const;
    ::turms::client::model::proto::UpdateRelationshipRequest*
    _internal_mutable_update_relationship_request();

   public:
    // .turms.client.model.proto.CreateGroupRequest create_group_request = 300;
    bool has_create_group_request() const;

   private:
    bool _internal_has_create_group_request() const;

   public:
    void clear_create_group_request();
    const ::turms::client::model::proto::CreateGroupRequest& create_group_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateGroupRequest*
    release_create_group_request();
    ::turms::client::model::proto::CreateGroupRequest* mutable_create_group_request();
    void set_allocated_create_group_request(
        ::turms::client::model::proto::CreateGroupRequest* value);
    void unsafe_arena_set_allocated_create_group_request(
        ::turms::client::model::proto::CreateGroupRequest* value);
    ::turms::client::model::proto::CreateGroupRequest* unsafe_arena_release_create_group_request();

   private:
    const ::turms::client::model::proto::CreateGroupRequest& _internal_create_group_request() const;
    ::turms::client::model::proto::CreateGroupRequest* _internal_mutable_create_group_request();

   public:
    // .turms.client.model.proto.DeleteGroupRequest delete_group_request = 301;
    bool has_delete_group_request() const;

   private:
    bool _internal_has_delete_group_request() const;

   public:
    void clear_delete_group_request();
    const ::turms::client::model::proto::DeleteGroupRequest& delete_group_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteGroupRequest*
    release_delete_group_request();
    ::turms::client::model::proto::DeleteGroupRequest* mutable_delete_group_request();
    void set_allocated_delete_group_request(
        ::turms::client::model::proto::DeleteGroupRequest* value);
    void unsafe_arena_set_allocated_delete_group_request(
        ::turms::client::model::proto::DeleteGroupRequest* value);
    ::turms::client::model::proto::DeleteGroupRequest* unsafe_arena_release_delete_group_request();

   private:
    const ::turms::client::model::proto::DeleteGroupRequest& _internal_delete_group_request() const;
    ::turms::client::model::proto::DeleteGroupRequest* _internal_mutable_delete_group_request();

   public:
    // .turms.client.model.proto.QueryGroupsRequest query_groups_request = 302;
    bool has_query_groups_request() const;

   private:
    bool _internal_has_query_groups_request() const;

   public:
    void clear_query_groups_request();
    const ::turms::client::model::proto::QueryGroupsRequest& query_groups_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryGroupsRequest*
    release_query_groups_request();
    ::turms::client::model::proto::QueryGroupsRequest* mutable_query_groups_request();
    void set_allocated_query_groups_request(
        ::turms::client::model::proto::QueryGroupsRequest* value);
    void unsafe_arena_set_allocated_query_groups_request(
        ::turms::client::model::proto::QueryGroupsRequest* value);
    ::turms::client::model::proto::QueryGroupsRequest* unsafe_arena_release_query_groups_request();

   private:
    const ::turms::client::model::proto::QueryGroupsRequest& _internal_query_groups_request() const;
    ::turms::client::model::proto::QueryGroupsRequest* _internal_mutable_query_groups_request();

   public:
    // .turms.client.model.proto.QueryJoinedGroupIdsRequest query_joined_group_ids_request = 303;
    bool has_query_joined_group_ids_request() const;

   private:
    bool _internal_has_query_joined_group_ids_request() const;

   public:
    void clear_query_joined_group_ids_request();
    const ::turms::client::model::proto::QueryJoinedGroupIdsRequest&
    query_joined_group_ids_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryJoinedGroupIdsRequest*
    release_query_joined_group_ids_request();
    ::turms::client::model::proto::QueryJoinedGroupIdsRequest*
    mutable_query_joined_group_ids_request();
    void set_allocated_query_joined_group_ids_request(
        ::turms::client::model::proto::QueryJoinedGroupIdsRequest* value);
    void unsafe_arena_set_allocated_query_joined_group_ids_request(
        ::turms::client::model::proto::QueryJoinedGroupIdsRequest* value);
    ::turms::client::model::proto::QueryJoinedGroupIdsRequest*
    unsafe_arena_release_query_joined_group_ids_request();

   private:
    const ::turms::client::model::proto::QueryJoinedGroupIdsRequest&
    _internal_query_joined_group_ids_request() const;
    ::turms::client::model::proto::QueryJoinedGroupIdsRequest*
    _internal_mutable_query_joined_group_ids_request();

   public:
    // .turms.client.model.proto.QueryJoinedGroupInfosRequest query_joined_group_infos_request =
    // 304;
    bool has_query_joined_group_infos_request() const;

   private:
    bool _internal_has_query_joined_group_infos_request() const;

   public:
    void clear_query_joined_group_infos_request();
    const ::turms::client::model::proto::QueryJoinedGroupInfosRequest&
    query_joined_group_infos_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryJoinedGroupInfosRequest*
    release_query_joined_group_infos_request();
    ::turms::client::model::proto::QueryJoinedGroupInfosRequest*
    mutable_query_joined_group_infos_request();
    void set_allocated_query_joined_group_infos_request(
        ::turms::client::model::proto::QueryJoinedGroupInfosRequest* value);
    void unsafe_arena_set_allocated_query_joined_group_infos_request(
        ::turms::client::model::proto::QueryJoinedGroupInfosRequest* value);
    ::turms::client::model::proto::QueryJoinedGroupInfosRequest*
    unsafe_arena_release_query_joined_group_infos_request();

   private:
    const ::turms::client::model::proto::QueryJoinedGroupInfosRequest&
    _internal_query_joined_group_infos_request() const;
    ::turms::client::model::proto::QueryJoinedGroupInfosRequest*
    _internal_mutable_query_joined_group_infos_request();

   public:
    // .turms.client.model.proto.UpdateGroupRequest update_group_request = 305;
    bool has_update_group_request() const;

   private:
    bool _internal_has_update_group_request() const;

   public:
    void clear_update_group_request();
    const ::turms::client::model::proto::UpdateGroupRequest& update_group_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateGroupRequest*
    release_update_group_request();
    ::turms::client::model::proto::UpdateGroupRequest* mutable_update_group_request();
    void set_allocated_update_group_request(
        ::turms::client::model::proto::UpdateGroupRequest* value);
    void unsafe_arena_set_allocated_update_group_request(
        ::turms::client::model::proto::UpdateGroupRequest* value);
    ::turms::client::model::proto::UpdateGroupRequest* unsafe_arena_release_update_group_request();

   private:
    const ::turms::client::model::proto::UpdateGroupRequest& _internal_update_group_request() const;
    ::turms::client::model::proto::UpdateGroupRequest* _internal_mutable_update_group_request();

   public:
    // .turms.client.model.proto.CreateGroupBlockedUserRequest create_group_blocked_user_request =
    // 400;
    bool has_create_group_blocked_user_request() const;

   private:
    bool _internal_has_create_group_blocked_user_request() const;

   public:
    void clear_create_group_blocked_user_request();
    const ::turms::client::model::proto::CreateGroupBlockedUserRequest&
    create_group_blocked_user_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateGroupBlockedUserRequest*
    release_create_group_blocked_user_request();
    ::turms::client::model::proto::CreateGroupBlockedUserRequest*
    mutable_create_group_blocked_user_request();
    void set_allocated_create_group_blocked_user_request(
        ::turms::client::model::proto::CreateGroupBlockedUserRequest* value);
    void unsafe_arena_set_allocated_create_group_blocked_user_request(
        ::turms::client::model::proto::CreateGroupBlockedUserRequest* value);
    ::turms::client::model::proto::CreateGroupBlockedUserRequest*
    unsafe_arena_release_create_group_blocked_user_request();

   private:
    const ::turms::client::model::proto::CreateGroupBlockedUserRequest&
    _internal_create_group_blocked_user_request() const;
    ::turms::client::model::proto::CreateGroupBlockedUserRequest*
    _internal_mutable_create_group_blocked_user_request();

   public:
    // .turms.client.model.proto.DeleteGroupBlockedUserRequest delete_group_blocked_user_request =
    // 401;
    bool has_delete_group_blocked_user_request() const;

   private:
    bool _internal_has_delete_group_blocked_user_request() const;

   public:
    void clear_delete_group_blocked_user_request();
    const ::turms::client::model::proto::DeleteGroupBlockedUserRequest&
    delete_group_blocked_user_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
    release_delete_group_blocked_user_request();
    ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
    mutable_delete_group_blocked_user_request();
    void set_allocated_delete_group_blocked_user_request(
        ::turms::client::model::proto::DeleteGroupBlockedUserRequest* value);
    void unsafe_arena_set_allocated_delete_group_blocked_user_request(
        ::turms::client::model::proto::DeleteGroupBlockedUserRequest* value);
    ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
    unsafe_arena_release_delete_group_blocked_user_request();

   private:
    const ::turms::client::model::proto::DeleteGroupBlockedUserRequest&
    _internal_delete_group_blocked_user_request() const;
    ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
    _internal_mutable_delete_group_blocked_user_request();

   public:
    // .turms.client.model.proto.QueryGroupBlockedUserIdsRequest
    // query_group_blocked_user_ids_request = 402;
    bool has_query_group_blocked_user_ids_request() const;

   private:
    bool _internal_has_query_group_blocked_user_ids_request() const;

   public:
    void clear_query_group_blocked_user_ids_request();
    const ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest&
    query_group_blocked_user_ids_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
    release_query_group_blocked_user_ids_request();
    ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
    mutable_query_group_blocked_user_ids_request();
    void set_allocated_query_group_blocked_user_ids_request(
        ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest* value);
    void unsafe_arena_set_allocated_query_group_blocked_user_ids_request(
        ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest* value);
    ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
    unsafe_arena_release_query_group_blocked_user_ids_request();

   private:
    const ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest&
    _internal_query_group_blocked_user_ids_request() const;
    ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
    _internal_mutable_query_group_blocked_user_ids_request();

   public:
    // .turms.client.model.proto.QueryGroupBlockedUserInfosRequest
    // query_group_blocked_user_infos_request = 403;
    bool has_query_group_blocked_user_infos_request() const;

   private:
    bool _internal_has_query_group_blocked_user_infos_request() const;

   public:
    void clear_query_group_blocked_user_infos_request();
    const ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest&
    query_group_blocked_user_infos_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
    release_query_group_blocked_user_infos_request();
    ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
    mutable_query_group_blocked_user_infos_request();
    void set_allocated_query_group_blocked_user_infos_request(
        ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest* value);
    void unsafe_arena_set_allocated_query_group_blocked_user_infos_request(
        ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest* value);
    ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
    unsafe_arena_release_query_group_blocked_user_infos_request();

   private:
    const ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest&
    _internal_query_group_blocked_user_infos_request() const;
    ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
    _internal_mutable_query_group_blocked_user_infos_request();

   public:
    // .turms.client.model.proto.CheckGroupJoinQuestionsAnswersRequest
    // check_group_join_questions_answers_request = 500;
    bool has_check_group_join_questions_answers_request() const;

   private:
    bool _internal_has_check_group_join_questions_answers_request() const;

   public:
    void clear_check_group_join_questions_answers_request();
    const ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest&
    check_group_join_questions_answers_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
    release_check_group_join_questions_answers_request();
    ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
    mutable_check_group_join_questions_answers_request();
    void set_allocated_check_group_join_questions_answers_request(
        ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest* value);
    void unsafe_arena_set_allocated_check_group_join_questions_answers_request(
        ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest* value);
    ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
    unsafe_arena_release_check_group_join_questions_answers_request();

   private:
    const ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest&
    _internal_check_group_join_questions_answers_request() const;
    ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
    _internal_mutable_check_group_join_questions_answers_request();

   public:
    // .turms.client.model.proto.CreateGroupInvitationRequest create_group_invitation_request = 501;
    bool has_create_group_invitation_request() const;

   private:
    bool _internal_has_create_group_invitation_request() const;

   public:
    void clear_create_group_invitation_request();
    const ::turms::client::model::proto::CreateGroupInvitationRequest&
    create_group_invitation_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateGroupInvitationRequest*
    release_create_group_invitation_request();
    ::turms::client::model::proto::CreateGroupInvitationRequest*
    mutable_create_group_invitation_request();
    void set_allocated_create_group_invitation_request(
        ::turms::client::model::proto::CreateGroupInvitationRequest* value);
    void unsafe_arena_set_allocated_create_group_invitation_request(
        ::turms::client::model::proto::CreateGroupInvitationRequest* value);
    ::turms::client::model::proto::CreateGroupInvitationRequest*
    unsafe_arena_release_create_group_invitation_request();

   private:
    const ::turms::client::model::proto::CreateGroupInvitationRequest&
    _internal_create_group_invitation_request() const;
    ::turms::client::model::proto::CreateGroupInvitationRequest*
    _internal_mutable_create_group_invitation_request();

   public:
    // .turms.client.model.proto.CreateGroupJoinRequestRequest create_group_join_request_request =
    // 502;
    bool has_create_group_join_request_request() const;

   private:
    bool _internal_has_create_group_join_request_request() const;

   public:
    void clear_create_group_join_request_request();
    const ::turms::client::model::proto::CreateGroupJoinRequestRequest&
    create_group_join_request_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateGroupJoinRequestRequest*
    release_create_group_join_request_request();
    ::turms::client::model::proto::CreateGroupJoinRequestRequest*
    mutable_create_group_join_request_request();
    void set_allocated_create_group_join_request_request(
        ::turms::client::model::proto::CreateGroupJoinRequestRequest* value);
    void unsafe_arena_set_allocated_create_group_join_request_request(
        ::turms::client::model::proto::CreateGroupJoinRequestRequest* value);
    ::turms::client::model::proto::CreateGroupJoinRequestRequest*
    unsafe_arena_release_create_group_join_request_request();

   private:
    const ::turms::client::model::proto::CreateGroupJoinRequestRequest&
    _internal_create_group_join_request_request() const;
    ::turms::client::model::proto::CreateGroupJoinRequestRequest*
    _internal_mutable_create_group_join_request_request();

   public:
    // .turms.client.model.proto.CreateGroupJoinQuestionsRequest create_group_join_questions_request
    // = 503;
    bool has_create_group_join_questions_request() const;

   private:
    bool _internal_has_create_group_join_questions_request() const;

   public:
    void clear_create_group_join_questions_request();
    const ::turms::client::model::proto::CreateGroupJoinQuestionsRequest&
    create_group_join_questions_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
    release_create_group_join_questions_request();
    ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
    mutable_create_group_join_questions_request();
    void set_allocated_create_group_join_questions_request(
        ::turms::client::model::proto::CreateGroupJoinQuestionsRequest* value);
    void unsafe_arena_set_allocated_create_group_join_questions_request(
        ::turms::client::model::proto::CreateGroupJoinQuestionsRequest* value);
    ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
    unsafe_arena_release_create_group_join_questions_request();

   private:
    const ::turms::client::model::proto::CreateGroupJoinQuestionsRequest&
    _internal_create_group_join_questions_request() const;
    ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
    _internal_mutable_create_group_join_questions_request();

   public:
    // .turms.client.model.proto.DeleteGroupInvitationRequest delete_group_invitation_request = 504;
    bool has_delete_group_invitation_request() const;

   private:
    bool _internal_has_delete_group_invitation_request() const;

   public:
    void clear_delete_group_invitation_request();
    const ::turms::client::model::proto::DeleteGroupInvitationRequest&
    delete_group_invitation_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteGroupInvitationRequest*
    release_delete_group_invitation_request();
    ::turms::client::model::proto::DeleteGroupInvitationRequest*
    mutable_delete_group_invitation_request();
    void set_allocated_delete_group_invitation_request(
        ::turms::client::model::proto::DeleteGroupInvitationRequest* value);
    void unsafe_arena_set_allocated_delete_group_invitation_request(
        ::turms::client::model::proto::DeleteGroupInvitationRequest* value);
    ::turms::client::model::proto::DeleteGroupInvitationRequest*
    unsafe_arena_release_delete_group_invitation_request();

   private:
    const ::turms::client::model::proto::DeleteGroupInvitationRequest&
    _internal_delete_group_invitation_request() const;
    ::turms::client::model::proto::DeleteGroupInvitationRequest*
    _internal_mutable_delete_group_invitation_request();

   public:
    // .turms.client.model.proto.DeleteGroupJoinRequestRequest delete_group_join_request_request =
    // 505;
    bool has_delete_group_join_request_request() const;

   private:
    bool _internal_has_delete_group_join_request_request() const;

   public:
    void clear_delete_group_join_request_request();
    const ::turms::client::model::proto::DeleteGroupJoinRequestRequest&
    delete_group_join_request_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
    release_delete_group_join_request_request();
    ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
    mutable_delete_group_join_request_request();
    void set_allocated_delete_group_join_request_request(
        ::turms::client::model::proto::DeleteGroupJoinRequestRequest* value);
    void unsafe_arena_set_allocated_delete_group_join_request_request(
        ::turms::client::model::proto::DeleteGroupJoinRequestRequest* value);
    ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
    unsafe_arena_release_delete_group_join_request_request();

   private:
    const ::turms::client::model::proto::DeleteGroupJoinRequestRequest&
    _internal_delete_group_join_request_request() const;
    ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
    _internal_mutable_delete_group_join_request_request();

   public:
    // .turms.client.model.proto.DeleteGroupJoinQuestionsRequest delete_group_join_questions_request
    // = 506;
    bool has_delete_group_join_questions_request() const;

   private:
    bool _internal_has_delete_group_join_questions_request() const;

   public:
    void clear_delete_group_join_questions_request();
    const ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest&
    delete_group_join_questions_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
    release_delete_group_join_questions_request();
    ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
    mutable_delete_group_join_questions_request();
    void set_allocated_delete_group_join_questions_request(
        ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest* value);
    void unsafe_arena_set_allocated_delete_group_join_questions_request(
        ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest* value);
    ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
    unsafe_arena_release_delete_group_join_questions_request();

   private:
    const ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest&
    _internal_delete_group_join_questions_request() const;
    ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
    _internal_mutable_delete_group_join_questions_request();

   public:
    // .turms.client.model.proto.QueryGroupInvitationsRequest query_group_invitations_request = 507;
    bool has_query_group_invitations_request() const;

   private:
    bool _internal_has_query_group_invitations_request() const;

   public:
    void clear_query_group_invitations_request();
    const ::turms::client::model::proto::QueryGroupInvitationsRequest&
    query_group_invitations_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryGroupInvitationsRequest*
    release_query_group_invitations_request();
    ::turms::client::model::proto::QueryGroupInvitationsRequest*
    mutable_query_group_invitations_request();
    void set_allocated_query_group_invitations_request(
        ::turms::client::model::proto::QueryGroupInvitationsRequest* value);
    void unsafe_arena_set_allocated_query_group_invitations_request(
        ::turms::client::model::proto::QueryGroupInvitationsRequest* value);
    ::turms::client::model::proto::QueryGroupInvitationsRequest*
    unsafe_arena_release_query_group_invitations_request();

   private:
    const ::turms::client::model::proto::QueryGroupInvitationsRequest&
    _internal_query_group_invitations_request() const;
    ::turms::client::model::proto::QueryGroupInvitationsRequest*
    _internal_mutable_query_group_invitations_request();

   public:
    // .turms.client.model.proto.QueryGroupJoinRequestsRequest query_group_join_requests_request =
    // 508;
    bool has_query_group_join_requests_request() const;

   private:
    bool _internal_has_query_group_join_requests_request() const;

   public:
    void clear_query_group_join_requests_request();
    const ::turms::client::model::proto::QueryGroupJoinRequestsRequest&
    query_group_join_requests_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
    release_query_group_join_requests_request();
    ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
    mutable_query_group_join_requests_request();
    void set_allocated_query_group_join_requests_request(
        ::turms::client::model::proto::QueryGroupJoinRequestsRequest* value);
    void unsafe_arena_set_allocated_query_group_join_requests_request(
        ::turms::client::model::proto::QueryGroupJoinRequestsRequest* value);
    ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
    unsafe_arena_release_query_group_join_requests_request();

   private:
    const ::turms::client::model::proto::QueryGroupJoinRequestsRequest&
    _internal_query_group_join_requests_request() const;
    ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
    _internal_mutable_query_group_join_requests_request();

   public:
    // .turms.client.model.proto.QueryGroupJoinQuestionsRequest query_group_join_questions_request =
    // 509;
    bool has_query_group_join_questions_request() const;

   private:
    bool _internal_has_query_group_join_questions_request() const;

   public:
    void clear_query_group_join_questions_request();
    const ::turms::client::model::proto::QueryGroupJoinQuestionsRequest&
    query_group_join_questions_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
    release_query_group_join_questions_request();
    ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
    mutable_query_group_join_questions_request();
    void set_allocated_query_group_join_questions_request(
        ::turms::client::model::proto::QueryGroupJoinQuestionsRequest* value);
    void unsafe_arena_set_allocated_query_group_join_questions_request(
        ::turms::client::model::proto::QueryGroupJoinQuestionsRequest* value);
    ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
    unsafe_arena_release_query_group_join_questions_request();

   private:
    const ::turms::client::model::proto::QueryGroupJoinQuestionsRequest&
    _internal_query_group_join_questions_request() const;
    ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
    _internal_mutable_query_group_join_questions_request();

   public:
    // .turms.client.model.proto.UpdateGroupInvitationRequest update_group_invitation_request = 510;
    bool has_update_group_invitation_request() const;

   private:
    bool _internal_has_update_group_invitation_request() const;

   public:
    void clear_update_group_invitation_request();
    const ::turms::client::model::proto::UpdateGroupInvitationRequest&
    update_group_invitation_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateGroupInvitationRequest*
    release_update_group_invitation_request();
    ::turms::client::model::proto::UpdateGroupInvitationRequest*
    mutable_update_group_invitation_request();
    void set_allocated_update_group_invitation_request(
        ::turms::client::model::proto::UpdateGroupInvitationRequest* value);
    void unsafe_arena_set_allocated_update_group_invitation_request(
        ::turms::client::model::proto::UpdateGroupInvitationRequest* value);
    ::turms::client::model::proto::UpdateGroupInvitationRequest*
    unsafe_arena_release_update_group_invitation_request();

   private:
    const ::turms::client::model::proto::UpdateGroupInvitationRequest&
    _internal_update_group_invitation_request() const;
    ::turms::client::model::proto::UpdateGroupInvitationRequest*
    _internal_mutable_update_group_invitation_request();

   public:
    // .turms.client.model.proto.UpdateGroupJoinQuestionRequest update_group_join_question_request =
    // 511;
    bool has_update_group_join_question_request() const;

   private:
    bool _internal_has_update_group_join_question_request() const;

   public:
    void clear_update_group_join_question_request();
    const ::turms::client::model::proto::UpdateGroupJoinQuestionRequest&
    update_group_join_question_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
    release_update_group_join_question_request();
    ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
    mutable_update_group_join_question_request();
    void set_allocated_update_group_join_question_request(
        ::turms::client::model::proto::UpdateGroupJoinQuestionRequest* value);
    void unsafe_arena_set_allocated_update_group_join_question_request(
        ::turms::client::model::proto::UpdateGroupJoinQuestionRequest* value);
    ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
    unsafe_arena_release_update_group_join_question_request();

   private:
    const ::turms::client::model::proto::UpdateGroupJoinQuestionRequest&
    _internal_update_group_join_question_request() const;
    ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
    _internal_mutable_update_group_join_question_request();

   public:
    // .turms.client.model.proto.UpdateGroupJoinRequestRequest update_group_join_request_request =
    // 512;
    bool has_update_group_join_request_request() const;

   private:
    bool _internal_has_update_group_join_request_request() const;

   public:
    void clear_update_group_join_request_request();
    const ::turms::client::model::proto::UpdateGroupJoinRequestRequest&
    update_group_join_request_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
    release_update_group_join_request_request();
    ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
    mutable_update_group_join_request_request();
    void set_allocated_update_group_join_request_request(
        ::turms::client::model::proto::UpdateGroupJoinRequestRequest* value);
    void unsafe_arena_set_allocated_update_group_join_request_request(
        ::turms::client::model::proto::UpdateGroupJoinRequestRequest* value);
    ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
    unsafe_arena_release_update_group_join_request_request();

   private:
    const ::turms::client::model::proto::UpdateGroupJoinRequestRequest&
    _internal_update_group_join_request_request() const;
    ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
    _internal_mutable_update_group_join_request_request();

   public:
    // .turms.client.model.proto.CreateMeetingRequest create_meeting_request = 900;
    bool has_create_meeting_request() const;

   private:
    bool _internal_has_create_meeting_request() const;

   public:
    void clear_create_meeting_request();
    const ::turms::client::model::proto::CreateMeetingRequest& create_meeting_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateMeetingRequest*
    release_create_meeting_request();
    ::turms::client::model::proto::CreateMeetingRequest* mutable_create_meeting_request();
    void set_allocated_create_meeting_request(
        ::turms::client::model::proto::CreateMeetingRequest* value);
    void unsafe_arena_set_allocated_create_meeting_request(
        ::turms::client::model::proto::CreateMeetingRequest* value);
    ::turms::client::model::proto::CreateMeetingRequest*
    unsafe_arena_release_create_meeting_request();

   private:
    const ::turms::client::model::proto::CreateMeetingRequest& _internal_create_meeting_request()
        const;
    ::turms::client::model::proto::CreateMeetingRequest* _internal_mutable_create_meeting_request();

   public:
    // .turms.client.model.proto.DeleteMeetingRequest delete_meeting_request = 901;
    bool has_delete_meeting_request() const;

   private:
    bool _internal_has_delete_meeting_request() const;

   public:
    void clear_delete_meeting_request();
    const ::turms::client::model::proto::DeleteMeetingRequest& delete_meeting_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteMeetingRequest*
    release_delete_meeting_request();
    ::turms::client::model::proto::DeleteMeetingRequest* mutable_delete_meeting_request();
    void set_allocated_delete_meeting_request(
        ::turms::client::model::proto::DeleteMeetingRequest* value);
    void unsafe_arena_set_allocated_delete_meeting_request(
        ::turms::client::model::proto::DeleteMeetingRequest* value);
    ::turms::client::model::proto::DeleteMeetingRequest*
    unsafe_arena_release_delete_meeting_request();

   private:
    const ::turms::client::model::proto::DeleteMeetingRequest& _internal_delete_meeting_request()
        const;
    ::turms::client::model::proto::DeleteMeetingRequest* _internal_mutable_delete_meeting_request();

   public:
    // .turms.client.model.proto.QueryMeetingsRequest query_meetings_request = 902;
    bool has_query_meetings_request() const;

   private:
    bool _internal_has_query_meetings_request() const;

   public:
    void clear_query_meetings_request();
    const ::turms::client::model::proto::QueryMeetingsRequest& query_meetings_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryMeetingsRequest*
    release_query_meetings_request();
    ::turms::client::model::proto::QueryMeetingsRequest* mutable_query_meetings_request();
    void set_allocated_query_meetings_request(
        ::turms::client::model::proto::QueryMeetingsRequest* value);
    void unsafe_arena_set_allocated_query_meetings_request(
        ::turms::client::model::proto::QueryMeetingsRequest* value);
    ::turms::client::model::proto::QueryMeetingsRequest*
    unsafe_arena_release_query_meetings_request();

   private:
    const ::turms::client::model::proto::QueryMeetingsRequest& _internal_query_meetings_request()
        const;
    ::turms::client::model::proto::QueryMeetingsRequest* _internal_mutable_query_meetings_request();

   public:
    // .turms.client.model.proto.UpdateMeetingRequest update_meeting_request = 903;
    bool has_update_meeting_request() const;

   private:
    bool _internal_has_update_meeting_request() const;

   public:
    void clear_update_meeting_request();
    const ::turms::client::model::proto::UpdateMeetingRequest& update_meeting_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateMeetingRequest*
    release_update_meeting_request();
    ::turms::client::model::proto::UpdateMeetingRequest* mutable_update_meeting_request();
    void set_allocated_update_meeting_request(
        ::turms::client::model::proto::UpdateMeetingRequest* value);
    void unsafe_arena_set_allocated_update_meeting_request(
        ::turms::client::model::proto::UpdateMeetingRequest* value);
    ::turms::client::model::proto::UpdateMeetingRequest*
    unsafe_arena_release_update_meeting_request();

   private:
    const ::turms::client::model::proto::UpdateMeetingRequest& _internal_update_meeting_request()
        const;
    ::turms::client::model::proto::UpdateMeetingRequest* _internal_mutable_update_meeting_request();

   public:
    // .turms.client.model.proto.UpdateMeetingInvitationRequest update_meeting_invitation_request =
    // 904;
    bool has_update_meeting_invitation_request() const;

   private:
    bool _internal_has_update_meeting_invitation_request() const;

   public:
    void clear_update_meeting_invitation_request();
    const ::turms::client::model::proto::UpdateMeetingInvitationRequest&
    update_meeting_invitation_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateMeetingInvitationRequest*
    release_update_meeting_invitation_request();
    ::turms::client::model::proto::UpdateMeetingInvitationRequest*
    mutable_update_meeting_invitation_request();
    void set_allocated_update_meeting_invitation_request(
        ::turms::client::model::proto::UpdateMeetingInvitationRequest* value);
    void unsafe_arena_set_allocated_update_meeting_invitation_request(
        ::turms::client::model::proto::UpdateMeetingInvitationRequest* value);
    ::turms::client::model::proto::UpdateMeetingInvitationRequest*
    unsafe_arena_release_update_meeting_invitation_request();

   private:
    const ::turms::client::model::proto::UpdateMeetingInvitationRequest&
    _internal_update_meeting_invitation_request() const;
    ::turms::client::model::proto::UpdateMeetingInvitationRequest*
    _internal_mutable_update_meeting_invitation_request();

   public:
    // .turms.client.model.proto.DeleteResourceRequest delete_resource_request = 1000;
    bool has_delete_resource_request() const;

   private:
    bool _internal_has_delete_resource_request() const;

   public:
    void clear_delete_resource_request();
    const ::turms::client::model::proto::DeleteResourceRequest& delete_resource_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteResourceRequest*
    release_delete_resource_request();
    ::turms::client::model::proto::DeleteResourceRequest* mutable_delete_resource_request();
    void set_allocated_delete_resource_request(
        ::turms::client::model::proto::DeleteResourceRequest* value);
    void unsafe_arena_set_allocated_delete_resource_request(
        ::turms::client::model::proto::DeleteResourceRequest* value);
    ::turms::client::model::proto::DeleteResourceRequest*
    unsafe_arena_release_delete_resource_request();

   private:
    const ::turms::client::model::proto::DeleteResourceRequest& _internal_delete_resource_request()
        const;
    ::turms::client::model::proto::DeleteResourceRequest*
    _internal_mutable_delete_resource_request();

   public:
    // .turms.client.model.proto.QueryResourceDownloadInfoRequest
    // query_resource_download_info_request = 1001;
    bool has_query_resource_download_info_request() const;

   private:
    bool _internal_has_query_resource_download_info_request() const;

   public:
    void clear_query_resource_download_info_request();
    const ::turms::client::model::proto::QueryResourceDownloadInfoRequest&
    query_resource_download_info_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
    release_query_resource_download_info_request();
    ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
    mutable_query_resource_download_info_request();
    void set_allocated_query_resource_download_info_request(
        ::turms::client::model::proto::QueryResourceDownloadInfoRequest* value);
    void unsafe_arena_set_allocated_query_resource_download_info_request(
        ::turms::client::model::proto::QueryResourceDownloadInfoRequest* value);
    ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
    unsafe_arena_release_query_resource_download_info_request();

   private:
    const ::turms::client::model::proto::QueryResourceDownloadInfoRequest&
    _internal_query_resource_download_info_request() const;
    ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
    _internal_mutable_query_resource_download_info_request();

   public:
    // .turms.client.model.proto.QueryResourceUploadInfoRequest query_resource_upload_info_request =
    // 1002;
    bool has_query_resource_upload_info_request() const;

   private:
    bool _internal_has_query_resource_upload_info_request() const;

   public:
    void clear_query_resource_upload_info_request();
    const ::turms::client::model::proto::QueryResourceUploadInfoRequest&
    query_resource_upload_info_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryResourceUploadInfoRequest*
    release_query_resource_upload_info_request();
    ::turms::client::model::proto::QueryResourceUploadInfoRequest*
    mutable_query_resource_upload_info_request();
    void set_allocated_query_resource_upload_info_request(
        ::turms::client::model::proto::QueryResourceUploadInfoRequest* value);
    void unsafe_arena_set_allocated_query_resource_upload_info_request(
        ::turms::client::model::proto::QueryResourceUploadInfoRequest* value);
    ::turms::client::model::proto::QueryResourceUploadInfoRequest*
    unsafe_arena_release_query_resource_upload_info_request();

   private:
    const ::turms::client::model::proto::QueryResourceUploadInfoRequest&
    _internal_query_resource_upload_info_request() const;
    ::turms::client::model::proto::QueryResourceUploadInfoRequest*
    _internal_mutable_query_resource_upload_info_request();

   public:
    // .turms.client.model.proto.QueryMessageAttachmentInfosRequest
    // query_message_attachment_infos_request = 1003;
    bool has_query_message_attachment_infos_request() const;

   private:
    bool _internal_has_query_message_attachment_infos_request() const;

   public:
    void clear_query_message_attachment_infos_request();
    const ::turms::client::model::proto::QueryMessageAttachmentInfosRequest&
    query_message_attachment_infos_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
    release_query_message_attachment_infos_request();
    ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
    mutable_query_message_attachment_infos_request();
    void set_allocated_query_message_attachment_infos_request(
        ::turms::client::model::proto::QueryMessageAttachmentInfosRequest* value);
    void unsafe_arena_set_allocated_query_message_attachment_infos_request(
        ::turms::client::model::proto::QueryMessageAttachmentInfosRequest* value);
    ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
    unsafe_arena_release_query_message_attachment_infos_request();

   private:
    const ::turms::client::model::proto::QueryMessageAttachmentInfosRequest&
    _internal_query_message_attachment_infos_request() const;
    ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
    _internal_mutable_query_message_attachment_infos_request();

   public:
    // .turms.client.model.proto.UpdateMessageAttachmentInfoRequest
    // update_message_attachment_info_request = 1004;
    bool has_update_message_attachment_info_request() const;

   private:
    bool _internal_has_update_message_attachment_info_request() const;

   public:
    void clear_update_message_attachment_info_request();
    const ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest&
    update_message_attachment_info_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
    release_update_message_attachment_info_request();
    ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
    mutable_update_message_attachment_info_request();
    void set_allocated_update_message_attachment_info_request(
        ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest* value);
    void unsafe_arena_set_allocated_update_message_attachment_info_request(
        ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest* value);
    ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
    unsafe_arena_release_update_message_attachment_info_request();

   private:
    const ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest&
    _internal_update_message_attachment_info_request() const;
    ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
    _internal_mutable_update_message_attachment_info_request();

   public:
    // .turms.client.model.proto.DeleteConversationSettingsRequest
    // delete_conversation_settings_request = 1100;
    bool has_delete_conversation_settings_request() const;

   private:
    bool _internal_has_delete_conversation_settings_request() const;

   public:
    void clear_delete_conversation_settings_request();
    const ::turms::client::model::proto::DeleteConversationSettingsRequest&
    delete_conversation_settings_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteConversationSettingsRequest*
    release_delete_conversation_settings_request();
    ::turms::client::model::proto::DeleteConversationSettingsRequest*
    mutable_delete_conversation_settings_request();
    void set_allocated_delete_conversation_settings_request(
        ::turms::client::model::proto::DeleteConversationSettingsRequest* value);
    void unsafe_arena_set_allocated_delete_conversation_settings_request(
        ::turms::client::model::proto::DeleteConversationSettingsRequest* value);
    ::turms::client::model::proto::DeleteConversationSettingsRequest*
    unsafe_arena_release_delete_conversation_settings_request();

   private:
    const ::turms::client::model::proto::DeleteConversationSettingsRequest&
    _internal_delete_conversation_settings_request() const;
    ::turms::client::model::proto::DeleteConversationSettingsRequest*
    _internal_mutable_delete_conversation_settings_request();

   public:
    // .turms.client.model.proto.QueryConversationSettingsRequest
    // query_conversation_settings_request = 1101;
    bool has_query_conversation_settings_request() const;

   private:
    bool _internal_has_query_conversation_settings_request() const;

   public:
    void clear_query_conversation_settings_request();
    const ::turms::client::model::proto::QueryConversationSettingsRequest&
    query_conversation_settings_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::QueryConversationSettingsRequest*
    release_query_conversation_settings_request();
    ::turms::client::model::proto::QueryConversationSettingsRequest*
    mutable_query_conversation_settings_request();
    void set_allocated_query_conversation_settings_request(
        ::turms::client::model::proto::QueryConversationSettingsRequest* value);
    void unsafe_arena_set_allocated_query_conversation_settings_request(
        ::turms::client::model::proto::QueryConversationSettingsRequest* value);
    ::turms::client::model::proto::QueryConversationSettingsRequest*
    unsafe_arena_release_query_conversation_settings_request();

   private:
    const ::turms::client::model::proto::QueryConversationSettingsRequest&
    _internal_query_conversation_settings_request() const;
    ::turms::client::model::proto::QueryConversationSettingsRequest*
    _internal_mutable_query_conversation_settings_request();

   public:
    // .turms.client.model.proto.UpdateConversationSettingsRequest
    // update_conversation_settings_request = 1102;
    bool has_update_conversation_settings_request() const;

   private:
    bool _internal_has_update_conversation_settings_request() const;

   public:
    void clear_update_conversation_settings_request();
    const ::turms::client::model::proto::UpdateConversationSettingsRequest&
    update_conversation_settings_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UpdateConversationSettingsRequest*
    release_update_conversation_settings_request();
    ::turms::client::model::proto::UpdateConversationSettingsRequest*
    mutable_update_conversation_settings_request();
    void set_allocated_update_conversation_settings_request(
        ::turms::client::model::proto::UpdateConversationSettingsRequest* value);
    void unsafe_arena_set_allocated_update_conversation_settings_request(
        ::turms::client::model::proto::UpdateConversationSettingsRequest* value);
    ::turms::client::model::proto::UpdateConversationSettingsRequest*
    unsafe_arena_release_update_conversation_settings_request();

   private:
    const ::turms::client::model::proto::UpdateConversationSettingsRequest&
    _internal_update_conversation_settings_request() const;
    ::turms::client::model::proto::UpdateConversationSettingsRequest*
    _internal_mutable_update_conversation_settings_request();

   public:
    // .turms.client.model.proto.CreateMessageReactionsRequest create_message_reactions_request =
    // 1200;
    bool has_create_message_reactions_request() const;

   private:
    bool _internal_has_create_message_reactions_request() const;

   public:
    void clear_create_message_reactions_request();
    const ::turms::client::model::proto::CreateMessageReactionsRequest&
    create_message_reactions_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::CreateMessageReactionsRequest*
    release_create_message_reactions_request();
    ::turms::client::model::proto::CreateMessageReactionsRequest*
    mutable_create_message_reactions_request();
    void set_allocated_create_message_reactions_request(
        ::turms::client::model::proto::CreateMessageReactionsRequest* value);
    void unsafe_arena_set_allocated_create_message_reactions_request(
        ::turms::client::model::proto::CreateMessageReactionsRequest* value);
    ::turms::client::model::proto::CreateMessageReactionsRequest*
    unsafe_arena_release_create_message_reactions_request();

   private:
    const ::turms::client::model::proto::CreateMessageReactionsRequest&
    _internal_create_message_reactions_request() const;
    ::turms::client::model::proto::CreateMessageReactionsRequest*
    _internal_mutable_create_message_reactions_request();

   public:
    // .turms.client.model.proto.DeleteMessageReactionsRequest delete_message_reactions_request =
    // 1201;
    bool has_delete_message_reactions_request() const;

   private:
    bool _internal_has_delete_message_reactions_request() const;

   public:
    void clear_delete_message_reactions_request();
    const ::turms::client::model::proto::DeleteMessageReactionsRequest&
    delete_message_reactions_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::DeleteMessageReactionsRequest*
    release_delete_message_reactions_request();
    ::turms::client::model::proto::DeleteMessageReactionsRequest*
    mutable_delete_message_reactions_request();
    void set_allocated_delete_message_reactions_request(
        ::turms::client::model::proto::DeleteMessageReactionsRequest* value);
    void unsafe_arena_set_allocated_delete_message_reactions_request(
        ::turms::client::model::proto::DeleteMessageReactionsRequest* value);
    ::turms::client::model::proto::DeleteMessageReactionsRequest*
    unsafe_arena_release_delete_message_reactions_request();

   private:
    const ::turms::client::model::proto::DeleteMessageReactionsRequest&
    _internal_delete_message_reactions_request() const;
    ::turms::client::model::proto::DeleteMessageReactionsRequest*
    _internal_mutable_delete_message_reactions_request();

   public:
    void clear_kind();
    KindCase kind_case() const;
    // @@protoc_insertion_point(class_scope:turms.client.model.proto.TurmsRequest)
   private:
    class _Internal;
    void set_has_create_session_request();
    void set_has_delete_session_request();
    void set_has_query_conversations_request();
    void set_has_update_conversation_request();
    void set_has_update_typing_status_request();
    void set_has_create_message_request();
    void set_has_query_messages_request();
    void set_has_update_message_request();
    void set_has_create_group_members_request();
    void set_has_delete_group_members_request();
    void set_has_query_group_members_request();
    void set_has_update_group_member_request();
    void set_has_query_user_profiles_request();
    void set_has_query_nearby_users_request();
    void set_has_query_user_online_statuses_request();
    void set_has_update_user_location_request();
    void set_has_update_user_online_status_request();
    void set_has_update_user_request();
    void set_has_update_user_settings_request();
    void set_has_delete_user_settings_request();
    void set_has_query_user_settings_request();
    void set_has_create_friend_request_request();
    void set_has_create_relationship_group_request();
    void set_has_create_relationship_request();
    void set_has_delete_friend_request_request();
    void set_has_delete_relationship_group_request();
    void set_has_delete_relationship_request();
    void set_has_query_friend_requests_request();
    void set_has_query_related_user_ids_request();
    void set_has_query_relationship_groups_request();
    void set_has_query_relationships_request();
    void set_has_update_friend_request_request();
    void set_has_update_relationship_group_request();
    void set_has_update_relationship_request();
    void set_has_create_group_request();
    void set_has_delete_group_request();
    void set_has_query_groups_request();
    void set_has_query_joined_group_ids_request();
    void set_has_query_joined_group_infos_request();
    void set_has_update_group_request();
    void set_has_create_group_blocked_user_request();
    void set_has_delete_group_blocked_user_request();
    void set_has_query_group_blocked_user_ids_request();
    void set_has_query_group_blocked_user_infos_request();
    void set_has_check_group_join_questions_answers_request();
    void set_has_create_group_invitation_request();
    void set_has_create_group_join_request_request();
    void set_has_create_group_join_questions_request();
    void set_has_delete_group_invitation_request();
    void set_has_delete_group_join_request_request();
    void set_has_delete_group_join_questions_request();
    void set_has_query_group_invitations_request();
    void set_has_query_group_join_requests_request();
    void set_has_query_group_join_questions_request();
    void set_has_update_group_invitation_request();
    void set_has_update_group_join_question_request();
    void set_has_update_group_join_request_request();
    void set_has_create_meeting_request();
    void set_has_delete_meeting_request();
    void set_has_query_meetings_request();
    void set_has_update_meeting_request();
    void set_has_update_meeting_invitation_request();
    void set_has_delete_resource_request();
    void set_has_query_resource_download_info_request();
    void set_has_query_resource_upload_info_request();
    void set_has_query_message_attachment_infos_request();
    void set_has_update_message_attachment_info_request();
    void set_has_delete_conversation_settings_request();
    void set_has_query_conversation_settings_request();
    void set_has_update_conversation_settings_request();
    void set_has_create_message_reactions_request();
    void set_has_delete_message_reactions_request();
    inline bool has_kind() const;
    inline void clear_has_kind();
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 74, 73, 0, 47> _table_;

    static constexpr const void* _raw_default_instance_ = &_TurmsRequest_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
        inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena,
                              const Impl_& from,
                              const TurmsRequest& from_msg);
        ::google::protobuf::internal::HasBits<1> _has_bits_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>
            custom_attributes_;
        ::int64_t request_id_;
        union KindUnion {
            constexpr KindUnion()
                : _constinit_{} {
            }
            ::google::protobuf::internal::ConstantInitialized _constinit_;
            ::turms::client::model::proto::CreateSessionRequest* create_session_request_;
            ::turms::client::model::proto::DeleteSessionRequest* delete_session_request_;
            ::turms::client::model::proto::QueryConversationsRequest* query_conversations_request_;
            ::turms::client::model::proto::UpdateConversationRequest* update_conversation_request_;
            ::turms::client::model::proto::UpdateTypingStatusRequest* update_typing_status_request_;
            ::turms::client::model::proto::CreateMessageRequest* create_message_request_;
            ::turms::client::model::proto::QueryMessagesRequest* query_messages_request_;
            ::turms::client::model::proto::UpdateMessageRequest* update_message_request_;
            ::turms::client::model::proto::CreateGroupMembersRequest* create_group_members_request_;
            ::turms::client::model::proto::DeleteGroupMembersRequest* delete_group_members_request_;
            ::turms::client::model::proto::QueryGroupMembersRequest* query_group_members_request_;
            ::turms::client::model::proto::UpdateGroupMemberRequest* update_group_member_request_;
            ::turms::client::model::proto::QueryUserProfilesRequest* query_user_profiles_request_;
            ::turms::client::model::proto::QueryNearbyUsersRequest* query_nearby_users_request_;
            ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
                query_user_online_statuses_request_;
            ::turms::client::model::proto::UpdateUserLocationRequest* update_user_location_request_;
            ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
                update_user_online_status_request_;
            ::turms::client::model::proto::UpdateUserRequest* update_user_request_;
            ::turms::client::model::proto::UpdateUserSettingsRequest* update_user_settings_request_;
            ::turms::client::model::proto::DeleteUserSettingsRequest* delete_user_settings_request_;
            ::turms::client::model::proto::QueryUserSettingsRequest* query_user_settings_request_;
            ::turms::client::model::proto::CreateFriendRequestRequest*
                create_friend_request_request_;
            ::turms::client::model::proto::CreateRelationshipGroupRequest*
                create_relationship_group_request_;
            ::turms::client::model::proto::CreateRelationshipRequest* create_relationship_request_;
            ::turms::client::model::proto::DeleteFriendRequestRequest*
                delete_friend_request_request_;
            ::turms::client::model::proto::DeleteRelationshipGroupRequest*
                delete_relationship_group_request_;
            ::turms::client::model::proto::DeleteRelationshipRequest* delete_relationship_request_;
            ::turms::client::model::proto::QueryFriendRequestsRequest*
                query_friend_requests_request_;
            ::turms::client::model::proto::QueryRelatedUserIdsRequest*
                query_related_user_ids_request_;
            ::turms::client::model::proto::QueryRelationshipGroupsRequest*
                query_relationship_groups_request_;
            ::turms::client::model::proto::QueryRelationshipsRequest* query_relationships_request_;
            ::turms::client::model::proto::UpdateFriendRequestRequest*
                update_friend_request_request_;
            ::turms::client::model::proto::UpdateRelationshipGroupRequest*
                update_relationship_group_request_;
            ::turms::client::model::proto::UpdateRelationshipRequest* update_relationship_request_;
            ::turms::client::model::proto::CreateGroupRequest* create_group_request_;
            ::turms::client::model::proto::DeleteGroupRequest* delete_group_request_;
            ::turms::client::model::proto::QueryGroupsRequest* query_groups_request_;
            ::turms::client::model::proto::QueryJoinedGroupIdsRequest*
                query_joined_group_ids_request_;
            ::turms::client::model::proto::QueryJoinedGroupInfosRequest*
                query_joined_group_infos_request_;
            ::turms::client::model::proto::UpdateGroupRequest* update_group_request_;
            ::turms::client::model::proto::CreateGroupBlockedUserRequest*
                create_group_blocked_user_request_;
            ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
                delete_group_blocked_user_request_;
            ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
                query_group_blocked_user_ids_request_;
            ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
                query_group_blocked_user_infos_request_;
            ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
                check_group_join_questions_answers_request_;
            ::turms::client::model::proto::CreateGroupInvitationRequest*
                create_group_invitation_request_;
            ::turms::client::model::proto::CreateGroupJoinRequestRequest*
                create_group_join_request_request_;
            ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
                create_group_join_questions_request_;
            ::turms::client::model::proto::DeleteGroupInvitationRequest*
                delete_group_invitation_request_;
            ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
                delete_group_join_request_request_;
            ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
                delete_group_join_questions_request_;
            ::turms::client::model::proto::QueryGroupInvitationsRequest*
                query_group_invitations_request_;
            ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
                query_group_join_requests_request_;
            ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
                query_group_join_questions_request_;
            ::turms::client::model::proto::UpdateGroupInvitationRequest*
                update_group_invitation_request_;
            ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
                update_group_join_question_request_;
            ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
                update_group_join_request_request_;
            ::turms::client::model::proto::CreateMeetingRequest* create_meeting_request_;
            ::turms::client::model::proto::DeleteMeetingRequest* delete_meeting_request_;
            ::turms::client::model::proto::QueryMeetingsRequest* query_meetings_request_;
            ::turms::client::model::proto::UpdateMeetingRequest* update_meeting_request_;
            ::turms::client::model::proto::UpdateMeetingInvitationRequest*
                update_meeting_invitation_request_;
            ::turms::client::model::proto::DeleteResourceRequest* delete_resource_request_;
            ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
                query_resource_download_info_request_;
            ::turms::client::model::proto::QueryResourceUploadInfoRequest*
                query_resource_upload_info_request_;
            ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
                query_message_attachment_infos_request_;
            ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
                update_message_attachment_info_request_;
            ::turms::client::model::proto::DeleteConversationSettingsRequest*
                delete_conversation_settings_request_;
            ::turms::client::model::proto::QueryConversationSettingsRequest*
                query_conversation_settings_request_;
            ::turms::client::model::proto::UpdateConversationSettingsRequest*
                update_conversation_settings_request_;
            ::turms::client::model::proto::CreateMessageReactionsRequest*
                create_message_reactions_request_;
            ::turms::client::model::proto::DeleteMessageReactionsRequest*
                delete_message_reactions_request_;
        } kind_;
        ::uint32_t _oneof_case_[1];
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_request_2fturms_5frequest_2eproto;
};

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TurmsRequest

// optional int64 request_id = 1;
inline bool TurmsRequest::has_request_id() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    return value;
}
inline void TurmsRequest::clear_request_id() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.request_id_ = ::int64_t{0};
    _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t TurmsRequest::request_id() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.request_id)
    return _internal_request_id();
}
inline void TurmsRequest::set_request_id(::int64_t value) {
    _internal_set_request_id(value);
    _impl_._has_bits_[0] |= 0x00000001u;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.TurmsRequest.request_id)
}
inline ::int64_t TurmsRequest::_internal_request_id() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.request_id_;
}
inline void TurmsRequest::_internal_set_request_id(::int64_t value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.request_id_ = value;
}

// repeated .turms.client.model.proto.Value custom_attributes = 2;
inline int TurmsRequest::_internal_custom_attributes_size() const {
    return _internal_custom_attributes().size();
}
inline int TurmsRequest::custom_attributes_size() const {
    return _internal_custom_attributes_size();
}
inline ::turms::client::model::proto::Value* TurmsRequest::mutable_custom_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.custom_attributes)
    return _internal_mutable_custom_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
TurmsRequest::mutable_custom_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_mutable_list:turms.client.model.proto.TurmsRequest.custom_attributes)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _internal_mutable_custom_attributes();
}
inline const ::turms::client::model::proto::Value& TurmsRequest::custom_attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.custom_attributes)
    return _internal_custom_attributes().Get(index);
}
inline ::turms::client::model::proto::Value* TurmsRequest::add_custom_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    ::turms::client::model::proto::Value* _add = _internal_mutable_custom_attributes()->Add();
    // @@protoc_insertion_point(field_add:turms.client.model.proto.TurmsRequest.custom_attributes)
    return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
TurmsRequest::custom_attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_list:turms.client.model.proto.TurmsRequest.custom_attributes)
    return _internal_custom_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
TurmsRequest::_internal_custom_attributes() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.custom_attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
TurmsRequest::_internal_mutable_custom_attributes() {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return &_impl_.custom_attributes_;
}

// .turms.client.model.proto.CreateSessionRequest create_session_request = 3;
inline bool TurmsRequest::has_create_session_request() const {
    return kind_case() == kCreateSessionRequest;
}
inline bool TurmsRequest::_internal_has_create_session_request() const {
    return kind_case() == kCreateSessionRequest;
}
inline void TurmsRequest::set_has_create_session_request() {
    _impl_._oneof_case_[0] = kCreateSessionRequest;
}
inline ::turms::client::model::proto::CreateSessionRequest*
TurmsRequest::release_create_session_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_session_request)
    if (kind_case() == kCreateSessionRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_session_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_session_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateSessionRequest&
TurmsRequest::_internal_create_session_request() const {
    return kind_case() == kCreateSessionRequest
               ? *_impl_.kind_.create_session_request_
               : reinterpret_cast<::turms::client::model::proto::CreateSessionRequest&>(
                     ::turms::client::model::proto::_CreateSessionRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateSessionRequest&
TurmsRequest::create_session_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_session_request)
    return _internal_create_session_request();
}
inline ::turms::client::model::proto::CreateSessionRequest*
TurmsRequest::unsafe_arena_release_create_session_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_session_request)
    if (kind_case() == kCreateSessionRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_session_request_;
        _impl_.kind_.create_session_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_session_request(
    ::turms::client::model::proto::CreateSessionRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_session_request();
        _impl_.kind_.create_session_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_session_request)
}
inline ::turms::client::model::proto::CreateSessionRequest*
TurmsRequest::_internal_mutable_create_session_request() {
    if (kind_case() != kCreateSessionRequest) {
        clear_kind();
        set_has_create_session_request();
        _impl_.kind_.create_session_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::CreateSessionRequest>(GetArena());
    }
    return _impl_.kind_.create_session_request_;
}
inline ::turms::client::model::proto::CreateSessionRequest*
TurmsRequest::mutable_create_session_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateSessionRequest* _msg =
        _internal_mutable_create_session_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_session_request)
    return _msg;
}

// .turms.client.model.proto.DeleteSessionRequest delete_session_request = 4;
inline bool TurmsRequest::has_delete_session_request() const {
    return kind_case() == kDeleteSessionRequest;
}
inline bool TurmsRequest::_internal_has_delete_session_request() const {
    return kind_case() == kDeleteSessionRequest;
}
inline void TurmsRequest::set_has_delete_session_request() {
    _impl_._oneof_case_[0] = kDeleteSessionRequest;
}
inline ::turms::client::model::proto::DeleteSessionRequest*
TurmsRequest::release_delete_session_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_session_request)
    if (kind_case() == kDeleteSessionRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_session_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_session_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteSessionRequest&
TurmsRequest::_internal_delete_session_request() const {
    return kind_case() == kDeleteSessionRequest
               ? *_impl_.kind_.delete_session_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteSessionRequest&>(
                     ::turms::client::model::proto::_DeleteSessionRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteSessionRequest&
TurmsRequest::delete_session_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_session_request)
    return _internal_delete_session_request();
}
inline ::turms::client::model::proto::DeleteSessionRequest*
TurmsRequest::unsafe_arena_release_delete_session_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_session_request)
    if (kind_case() == kDeleteSessionRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_session_request_;
        _impl_.kind_.delete_session_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_session_request(
    ::turms::client::model::proto::DeleteSessionRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_session_request();
        _impl_.kind_.delete_session_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_session_request)
}
inline ::turms::client::model::proto::DeleteSessionRequest*
TurmsRequest::_internal_mutable_delete_session_request() {
    if (kind_case() != kDeleteSessionRequest) {
        clear_kind();
        set_has_delete_session_request();
        _impl_.kind_.delete_session_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::DeleteSessionRequest>(GetArena());
    }
    return _impl_.kind_.delete_session_request_;
}
inline ::turms::client::model::proto::DeleteSessionRequest*
TurmsRequest::mutable_delete_session_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteSessionRequest* _msg =
        _internal_mutable_delete_session_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_session_request)
    return _msg;
}

// .turms.client.model.proto.QueryConversationsRequest query_conversations_request = 5;
inline bool TurmsRequest::has_query_conversations_request() const {
    return kind_case() == kQueryConversationsRequest;
}
inline bool TurmsRequest::_internal_has_query_conversations_request() const {
    return kind_case() == kQueryConversationsRequest;
}
inline void TurmsRequest::set_has_query_conversations_request() {
    _impl_._oneof_case_[0] = kQueryConversationsRequest;
}
inline ::turms::client::model::proto::QueryConversationsRequest*
TurmsRequest::release_query_conversations_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_conversations_request)
    if (kind_case() == kQueryConversationsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_conversations_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_conversations_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryConversationsRequest&
TurmsRequest::_internal_query_conversations_request() const {
    return kind_case() == kQueryConversationsRequest
               ? *_impl_.kind_.query_conversations_request_
               : reinterpret_cast<::turms::client::model::proto::QueryConversationsRequest&>(
                     ::turms::client::model::proto::_QueryConversationsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryConversationsRequest&
TurmsRequest::query_conversations_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_conversations_request)
    return _internal_query_conversations_request();
}
inline ::turms::client::model::proto::QueryConversationsRequest*
TurmsRequest::unsafe_arena_release_query_conversations_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_conversations_request)
    if (kind_case() == kQueryConversationsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_conversations_request_;
        _impl_.kind_.query_conversations_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_conversations_request(
    ::turms::client::model::proto::QueryConversationsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_conversations_request();
        _impl_.kind_.query_conversations_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_conversations_request)
}
inline ::turms::client::model::proto::QueryConversationsRequest*
TurmsRequest::_internal_mutable_query_conversations_request() {
    if (kind_case() != kQueryConversationsRequest) {
        clear_kind();
        set_has_query_conversations_request();
        _impl_.kind_.query_conversations_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryConversationsRequest>(GetArena());
    }
    return _impl_.kind_.query_conversations_request_;
}
inline ::turms::client::model::proto::QueryConversationsRequest*
TurmsRequest::mutable_query_conversations_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryConversationsRequest* _msg =
        _internal_mutable_query_conversations_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_conversations_request)
    return _msg;
}

// .turms.client.model.proto.UpdateConversationRequest update_conversation_request = 6;
inline bool TurmsRequest::has_update_conversation_request() const {
    return kind_case() == kUpdateConversationRequest;
}
inline bool TurmsRequest::_internal_has_update_conversation_request() const {
    return kind_case() == kUpdateConversationRequest;
}
inline void TurmsRequest::set_has_update_conversation_request() {
    _impl_._oneof_case_[0] = kUpdateConversationRequest;
}
inline ::turms::client::model::proto::UpdateConversationRequest*
TurmsRequest::release_update_conversation_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_conversation_request)
    if (kind_case() == kUpdateConversationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_conversation_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_conversation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateConversationRequest&
TurmsRequest::_internal_update_conversation_request() const {
    return kind_case() == kUpdateConversationRequest
               ? *_impl_.kind_.update_conversation_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateConversationRequest&>(
                     ::turms::client::model::proto::_UpdateConversationRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateConversationRequest&
TurmsRequest::update_conversation_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_conversation_request)
    return _internal_update_conversation_request();
}
inline ::turms::client::model::proto::UpdateConversationRequest*
TurmsRequest::unsafe_arena_release_update_conversation_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_conversation_request)
    if (kind_case() == kUpdateConversationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_conversation_request_;
        _impl_.kind_.update_conversation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_conversation_request(
    ::turms::client::model::proto::UpdateConversationRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_conversation_request();
        _impl_.kind_.update_conversation_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_conversation_request)
}
inline ::turms::client::model::proto::UpdateConversationRequest*
TurmsRequest::_internal_mutable_update_conversation_request() {
    if (kind_case() != kUpdateConversationRequest) {
        clear_kind();
        set_has_update_conversation_request();
        _impl_.kind_.update_conversation_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateConversationRequest>(GetArena());
    }
    return _impl_.kind_.update_conversation_request_;
}
inline ::turms::client::model::proto::UpdateConversationRequest*
TurmsRequest::mutable_update_conversation_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateConversationRequest* _msg =
        _internal_mutable_update_conversation_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_conversation_request)
    return _msg;
}

// .turms.client.model.proto.UpdateTypingStatusRequest update_typing_status_request = 7;
inline bool TurmsRequest::has_update_typing_status_request() const {
    return kind_case() == kUpdateTypingStatusRequest;
}
inline bool TurmsRequest::_internal_has_update_typing_status_request() const {
    return kind_case() == kUpdateTypingStatusRequest;
}
inline void TurmsRequest::set_has_update_typing_status_request() {
    _impl_._oneof_case_[0] = kUpdateTypingStatusRequest;
}
inline ::turms::client::model::proto::UpdateTypingStatusRequest*
TurmsRequest::release_update_typing_status_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_typing_status_request)
    if (kind_case() == kUpdateTypingStatusRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_typing_status_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_typing_status_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateTypingStatusRequest&
TurmsRequest::_internal_update_typing_status_request() const {
    return kind_case() == kUpdateTypingStatusRequest
               ? *_impl_.kind_.update_typing_status_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateTypingStatusRequest&>(
                     ::turms::client::model::proto::_UpdateTypingStatusRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateTypingStatusRequest&
TurmsRequest::update_typing_status_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_typing_status_request)
    return _internal_update_typing_status_request();
}
inline ::turms::client::model::proto::UpdateTypingStatusRequest*
TurmsRequest::unsafe_arena_release_update_typing_status_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_typing_status_request)
    if (kind_case() == kUpdateTypingStatusRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_typing_status_request_;
        _impl_.kind_.update_typing_status_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_typing_status_request(
    ::turms::client::model::proto::UpdateTypingStatusRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_typing_status_request();
        _impl_.kind_.update_typing_status_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_typing_status_request)
}
inline ::turms::client::model::proto::UpdateTypingStatusRequest*
TurmsRequest::_internal_mutable_update_typing_status_request() {
    if (kind_case() != kUpdateTypingStatusRequest) {
        clear_kind();
        set_has_update_typing_status_request();
        _impl_.kind_.update_typing_status_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateTypingStatusRequest>(GetArena());
    }
    return _impl_.kind_.update_typing_status_request_;
}
inline ::turms::client::model::proto::UpdateTypingStatusRequest*
TurmsRequest::mutable_update_typing_status_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateTypingStatusRequest* _msg =
        _internal_mutable_update_typing_status_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_typing_status_request)
    return _msg;
}

// .turms.client.model.proto.CreateMessageRequest create_message_request = 8;
inline bool TurmsRequest::has_create_message_request() const {
    return kind_case() == kCreateMessageRequest;
}
inline bool TurmsRequest::_internal_has_create_message_request() const {
    return kind_case() == kCreateMessageRequest;
}
inline void TurmsRequest::set_has_create_message_request() {
    _impl_._oneof_case_[0] = kCreateMessageRequest;
}
inline ::turms::client::model::proto::CreateMessageRequest*
TurmsRequest::release_create_message_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_message_request)
    if (kind_case() == kCreateMessageRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_message_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_message_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateMessageRequest&
TurmsRequest::_internal_create_message_request() const {
    return kind_case() == kCreateMessageRequest
               ? *_impl_.kind_.create_message_request_
               : reinterpret_cast<::turms::client::model::proto::CreateMessageRequest&>(
                     ::turms::client::model::proto::_CreateMessageRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateMessageRequest&
TurmsRequest::create_message_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_message_request)
    return _internal_create_message_request();
}
inline ::turms::client::model::proto::CreateMessageRequest*
TurmsRequest::unsafe_arena_release_create_message_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_message_request)
    if (kind_case() == kCreateMessageRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_message_request_;
        _impl_.kind_.create_message_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_message_request(
    ::turms::client::model::proto::CreateMessageRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_message_request();
        _impl_.kind_.create_message_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_message_request)
}
inline ::turms::client::model::proto::CreateMessageRequest*
TurmsRequest::_internal_mutable_create_message_request() {
    if (kind_case() != kCreateMessageRequest) {
        clear_kind();
        set_has_create_message_request();
        _impl_.kind_.create_message_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::CreateMessageRequest>(GetArena());
    }
    return _impl_.kind_.create_message_request_;
}
inline ::turms::client::model::proto::CreateMessageRequest*
TurmsRequest::mutable_create_message_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateMessageRequest* _msg =
        _internal_mutable_create_message_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_message_request)
    return _msg;
}

// .turms.client.model.proto.QueryMessagesRequest query_messages_request = 9;
inline bool TurmsRequest::has_query_messages_request() const {
    return kind_case() == kQueryMessagesRequest;
}
inline bool TurmsRequest::_internal_has_query_messages_request() const {
    return kind_case() == kQueryMessagesRequest;
}
inline void TurmsRequest::set_has_query_messages_request() {
    _impl_._oneof_case_[0] = kQueryMessagesRequest;
}
inline ::turms::client::model::proto::QueryMessagesRequest*
TurmsRequest::release_query_messages_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_messages_request)
    if (kind_case() == kQueryMessagesRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_messages_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_messages_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryMessagesRequest&
TurmsRequest::_internal_query_messages_request() const {
    return kind_case() == kQueryMessagesRequest
               ? *_impl_.kind_.query_messages_request_
               : reinterpret_cast<::turms::client::model::proto::QueryMessagesRequest&>(
                     ::turms::client::model::proto::_QueryMessagesRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryMessagesRequest&
TurmsRequest::query_messages_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_messages_request)
    return _internal_query_messages_request();
}
inline ::turms::client::model::proto::QueryMessagesRequest*
TurmsRequest::unsafe_arena_release_query_messages_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_messages_request)
    if (kind_case() == kQueryMessagesRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_messages_request_;
        _impl_.kind_.query_messages_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_messages_request(
    ::turms::client::model::proto::QueryMessagesRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_messages_request();
        _impl_.kind_.query_messages_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_messages_request)
}
inline ::turms::client::model::proto::QueryMessagesRequest*
TurmsRequest::_internal_mutable_query_messages_request() {
    if (kind_case() != kQueryMessagesRequest) {
        clear_kind();
        set_has_query_messages_request();
        _impl_.kind_.query_messages_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::QueryMessagesRequest>(GetArena());
    }
    return _impl_.kind_.query_messages_request_;
}
inline ::turms::client::model::proto::QueryMessagesRequest*
TurmsRequest::mutable_query_messages_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryMessagesRequest* _msg =
        _internal_mutable_query_messages_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_messages_request)
    return _msg;
}

// .turms.client.model.proto.UpdateMessageRequest update_message_request = 10;
inline bool TurmsRequest::has_update_message_request() const {
    return kind_case() == kUpdateMessageRequest;
}
inline bool TurmsRequest::_internal_has_update_message_request() const {
    return kind_case() == kUpdateMessageRequest;
}
inline void TurmsRequest::set_has_update_message_request() {
    _impl_._oneof_case_[0] = kUpdateMessageRequest;
}
inline ::turms::client::model::proto::UpdateMessageRequest*
TurmsRequest::release_update_message_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_message_request)
    if (kind_case() == kUpdateMessageRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_message_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_message_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateMessageRequest&
TurmsRequest::_internal_update_message_request() const {
    return kind_case() == kUpdateMessageRequest
               ? *_impl_.kind_.update_message_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateMessageRequest&>(
                     ::turms::client::model::proto::_UpdateMessageRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateMessageRequest&
TurmsRequest::update_message_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_message_request)
    return _internal_update_message_request();
}
inline ::turms::client::model::proto::UpdateMessageRequest*
TurmsRequest::unsafe_arena_release_update_message_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_message_request)
    if (kind_case() == kUpdateMessageRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_message_request_;
        _impl_.kind_.update_message_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_message_request(
    ::turms::client::model::proto::UpdateMessageRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_message_request();
        _impl_.kind_.update_message_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_message_request)
}
inline ::turms::client::model::proto::UpdateMessageRequest*
TurmsRequest::_internal_mutable_update_message_request() {
    if (kind_case() != kUpdateMessageRequest) {
        clear_kind();
        set_has_update_message_request();
        _impl_.kind_.update_message_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::UpdateMessageRequest>(GetArena());
    }
    return _impl_.kind_.update_message_request_;
}
inline ::turms::client::model::proto::UpdateMessageRequest*
TurmsRequest::mutable_update_message_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateMessageRequest* _msg =
        _internal_mutable_update_message_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_message_request)
    return _msg;
}

// .turms.client.model.proto.CreateGroupMembersRequest create_group_members_request = 11;
inline bool TurmsRequest::has_create_group_members_request() const {
    return kind_case() == kCreateGroupMembersRequest;
}
inline bool TurmsRequest::_internal_has_create_group_members_request() const {
    return kind_case() == kCreateGroupMembersRequest;
}
inline void TurmsRequest::set_has_create_group_members_request() {
    _impl_._oneof_case_[0] = kCreateGroupMembersRequest;
}
inline ::turms::client::model::proto::CreateGroupMembersRequest*
TurmsRequest::release_create_group_members_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_group_members_request)
    if (kind_case() == kCreateGroupMembersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_members_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_group_members_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateGroupMembersRequest&
TurmsRequest::_internal_create_group_members_request() const {
    return kind_case() == kCreateGroupMembersRequest
               ? *_impl_.kind_.create_group_members_request_
               : reinterpret_cast<::turms::client::model::proto::CreateGroupMembersRequest&>(
                     ::turms::client::model::proto::_CreateGroupMembersRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateGroupMembersRequest&
TurmsRequest::create_group_members_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_group_members_request)
    return _internal_create_group_members_request();
}
inline ::turms::client::model::proto::CreateGroupMembersRequest*
TurmsRequest::unsafe_arena_release_create_group_members_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_group_members_request)
    if (kind_case() == kCreateGroupMembersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_members_request_;
        _impl_.kind_.create_group_members_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_group_members_request(
    ::turms::client::model::proto::CreateGroupMembersRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_group_members_request();
        _impl_.kind_.create_group_members_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_group_members_request)
}
inline ::turms::client::model::proto::CreateGroupMembersRequest*
TurmsRequest::_internal_mutable_create_group_members_request() {
    if (kind_case() != kCreateGroupMembersRequest) {
        clear_kind();
        set_has_create_group_members_request();
        _impl_.kind_.create_group_members_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CreateGroupMembersRequest>(GetArena());
    }
    return _impl_.kind_.create_group_members_request_;
}
inline ::turms::client::model::proto::CreateGroupMembersRequest*
TurmsRequest::mutable_create_group_members_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateGroupMembersRequest* _msg =
        _internal_mutable_create_group_members_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_group_members_request)
    return _msg;
}

// .turms.client.model.proto.DeleteGroupMembersRequest delete_group_members_request = 12;
inline bool TurmsRequest::has_delete_group_members_request() const {
    return kind_case() == kDeleteGroupMembersRequest;
}
inline bool TurmsRequest::_internal_has_delete_group_members_request() const {
    return kind_case() == kDeleteGroupMembersRequest;
}
inline void TurmsRequest::set_has_delete_group_members_request() {
    _impl_._oneof_case_[0] = kDeleteGroupMembersRequest;
}
inline ::turms::client::model::proto::DeleteGroupMembersRequest*
TurmsRequest::release_delete_group_members_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_group_members_request)
    if (kind_case() == kDeleteGroupMembersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_members_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_group_members_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteGroupMembersRequest&
TurmsRequest::_internal_delete_group_members_request() const {
    return kind_case() == kDeleteGroupMembersRequest
               ? *_impl_.kind_.delete_group_members_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteGroupMembersRequest&>(
                     ::turms::client::model::proto::_DeleteGroupMembersRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteGroupMembersRequest&
TurmsRequest::delete_group_members_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_group_members_request)
    return _internal_delete_group_members_request();
}
inline ::turms::client::model::proto::DeleteGroupMembersRequest*
TurmsRequest::unsafe_arena_release_delete_group_members_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_group_members_request)
    if (kind_case() == kDeleteGroupMembersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_members_request_;
        _impl_.kind_.delete_group_members_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_group_members_request(
    ::turms::client::model::proto::DeleteGroupMembersRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_group_members_request();
        _impl_.kind_.delete_group_members_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_members_request)
}
inline ::turms::client::model::proto::DeleteGroupMembersRequest*
TurmsRequest::_internal_mutable_delete_group_members_request() {
    if (kind_case() != kDeleteGroupMembersRequest) {
        clear_kind();
        set_has_delete_group_members_request();
        _impl_.kind_.delete_group_members_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteGroupMembersRequest>(GetArena());
    }
    return _impl_.kind_.delete_group_members_request_;
}
inline ::turms::client::model::proto::DeleteGroupMembersRequest*
TurmsRequest::mutable_delete_group_members_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteGroupMembersRequest* _msg =
        _internal_mutable_delete_group_members_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_group_members_request)
    return _msg;
}

// .turms.client.model.proto.QueryGroupMembersRequest query_group_members_request = 13;
inline bool TurmsRequest::has_query_group_members_request() const {
    return kind_case() == kQueryGroupMembersRequest;
}
inline bool TurmsRequest::_internal_has_query_group_members_request() const {
    return kind_case() == kQueryGroupMembersRequest;
}
inline void TurmsRequest::set_has_query_group_members_request() {
    _impl_._oneof_case_[0] = kQueryGroupMembersRequest;
}
inline ::turms::client::model::proto::QueryGroupMembersRequest*
TurmsRequest::release_query_group_members_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_group_members_request)
    if (kind_case() == kQueryGroupMembersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_members_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_group_members_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryGroupMembersRequest&
TurmsRequest::_internal_query_group_members_request() const {
    return kind_case() == kQueryGroupMembersRequest
               ? *_impl_.kind_.query_group_members_request_
               : reinterpret_cast<::turms::client::model::proto::QueryGroupMembersRequest&>(
                     ::turms::client::model::proto::_QueryGroupMembersRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryGroupMembersRequest&
TurmsRequest::query_group_members_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_group_members_request)
    return _internal_query_group_members_request();
}
inline ::turms::client::model::proto::QueryGroupMembersRequest*
TurmsRequest::unsafe_arena_release_query_group_members_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_group_members_request)
    if (kind_case() == kQueryGroupMembersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_members_request_;
        _impl_.kind_.query_group_members_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_group_members_request(
    ::turms::client::model::proto::QueryGroupMembersRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_group_members_request();
        _impl_.kind_.query_group_members_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_group_members_request)
}
inline ::turms::client::model::proto::QueryGroupMembersRequest*
TurmsRequest::_internal_mutable_query_group_members_request() {
    if (kind_case() != kQueryGroupMembersRequest) {
        clear_kind();
        set_has_query_group_members_request();
        _impl_.kind_.query_group_members_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryGroupMembersRequest>(GetArena());
    }
    return _impl_.kind_.query_group_members_request_;
}
inline ::turms::client::model::proto::QueryGroupMembersRequest*
TurmsRequest::mutable_query_group_members_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryGroupMembersRequest* _msg =
        _internal_mutable_query_group_members_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_group_members_request)
    return _msg;
}

// .turms.client.model.proto.UpdateGroupMemberRequest update_group_member_request = 14;
inline bool TurmsRequest::has_update_group_member_request() const {
    return kind_case() == kUpdateGroupMemberRequest;
}
inline bool TurmsRequest::_internal_has_update_group_member_request() const {
    return kind_case() == kUpdateGroupMemberRequest;
}
inline void TurmsRequest::set_has_update_group_member_request() {
    _impl_._oneof_case_[0] = kUpdateGroupMemberRequest;
}
inline ::turms::client::model::proto::UpdateGroupMemberRequest*
TurmsRequest::release_update_group_member_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_group_member_request)
    if (kind_case() == kUpdateGroupMemberRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_member_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_group_member_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateGroupMemberRequest&
TurmsRequest::_internal_update_group_member_request() const {
    return kind_case() == kUpdateGroupMemberRequest
               ? *_impl_.kind_.update_group_member_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateGroupMemberRequest&>(
                     ::turms::client::model::proto::_UpdateGroupMemberRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateGroupMemberRequest&
TurmsRequest::update_group_member_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_group_member_request)
    return _internal_update_group_member_request();
}
inline ::turms::client::model::proto::UpdateGroupMemberRequest*
TurmsRequest::unsafe_arena_release_update_group_member_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_group_member_request)
    if (kind_case() == kUpdateGroupMemberRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_member_request_;
        _impl_.kind_.update_group_member_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_group_member_request(
    ::turms::client::model::proto::UpdateGroupMemberRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_group_member_request();
        _impl_.kind_.update_group_member_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_group_member_request)
}
inline ::turms::client::model::proto::UpdateGroupMemberRequest*
TurmsRequest::_internal_mutable_update_group_member_request() {
    if (kind_case() != kUpdateGroupMemberRequest) {
        clear_kind();
        set_has_update_group_member_request();
        _impl_.kind_.update_group_member_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateGroupMemberRequest>(GetArena());
    }
    return _impl_.kind_.update_group_member_request_;
}
inline ::turms::client::model::proto::UpdateGroupMemberRequest*
TurmsRequest::mutable_update_group_member_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateGroupMemberRequest* _msg =
        _internal_mutable_update_group_member_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_group_member_request)
    return _msg;
}

// .turms.client.model.proto.QueryUserProfilesRequest query_user_profiles_request = 100;
inline bool TurmsRequest::has_query_user_profiles_request() const {
    return kind_case() == kQueryUserProfilesRequest;
}
inline bool TurmsRequest::_internal_has_query_user_profiles_request() const {
    return kind_case() == kQueryUserProfilesRequest;
}
inline void TurmsRequest::set_has_query_user_profiles_request() {
    _impl_._oneof_case_[0] = kQueryUserProfilesRequest;
}
inline ::turms::client::model::proto::QueryUserProfilesRequest*
TurmsRequest::release_query_user_profiles_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_user_profiles_request)
    if (kind_case() == kQueryUserProfilesRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_user_profiles_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_user_profiles_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryUserProfilesRequest&
TurmsRequest::_internal_query_user_profiles_request() const {
    return kind_case() == kQueryUserProfilesRequest
               ? *_impl_.kind_.query_user_profiles_request_
               : reinterpret_cast<::turms::client::model::proto::QueryUserProfilesRequest&>(
                     ::turms::client::model::proto::_QueryUserProfilesRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryUserProfilesRequest&
TurmsRequest::query_user_profiles_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_user_profiles_request)
    return _internal_query_user_profiles_request();
}
inline ::turms::client::model::proto::QueryUserProfilesRequest*
TurmsRequest::unsafe_arena_release_query_user_profiles_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_user_profiles_request)
    if (kind_case() == kQueryUserProfilesRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_user_profiles_request_;
        _impl_.kind_.query_user_profiles_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_user_profiles_request(
    ::turms::client::model::proto::QueryUserProfilesRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_user_profiles_request();
        _impl_.kind_.query_user_profiles_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_user_profiles_request)
}
inline ::turms::client::model::proto::QueryUserProfilesRequest*
TurmsRequest::_internal_mutable_query_user_profiles_request() {
    if (kind_case() != kQueryUserProfilesRequest) {
        clear_kind();
        set_has_query_user_profiles_request();
        _impl_.kind_.query_user_profiles_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryUserProfilesRequest>(GetArena());
    }
    return _impl_.kind_.query_user_profiles_request_;
}
inline ::turms::client::model::proto::QueryUserProfilesRequest*
TurmsRequest::mutable_query_user_profiles_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryUserProfilesRequest* _msg =
        _internal_mutable_query_user_profiles_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_user_profiles_request)
    return _msg;
}

// .turms.client.model.proto.QueryNearbyUsersRequest query_nearby_users_request = 101;
inline bool TurmsRequest::has_query_nearby_users_request() const {
    return kind_case() == kQueryNearbyUsersRequest;
}
inline bool TurmsRequest::_internal_has_query_nearby_users_request() const {
    return kind_case() == kQueryNearbyUsersRequest;
}
inline void TurmsRequest::set_has_query_nearby_users_request() {
    _impl_._oneof_case_[0] = kQueryNearbyUsersRequest;
}
inline ::turms::client::model::proto::QueryNearbyUsersRequest*
TurmsRequest::release_query_nearby_users_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_nearby_users_request)
    if (kind_case() == kQueryNearbyUsersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_nearby_users_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_nearby_users_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryNearbyUsersRequest&
TurmsRequest::_internal_query_nearby_users_request() const {
    return kind_case() == kQueryNearbyUsersRequest
               ? *_impl_.kind_.query_nearby_users_request_
               : reinterpret_cast<::turms::client::model::proto::QueryNearbyUsersRequest&>(
                     ::turms::client::model::proto::_QueryNearbyUsersRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryNearbyUsersRequest&
TurmsRequest::query_nearby_users_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_nearby_users_request)
    return _internal_query_nearby_users_request();
}
inline ::turms::client::model::proto::QueryNearbyUsersRequest*
TurmsRequest::unsafe_arena_release_query_nearby_users_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_nearby_users_request)
    if (kind_case() == kQueryNearbyUsersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_nearby_users_request_;
        _impl_.kind_.query_nearby_users_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_nearby_users_request(
    ::turms::client::model::proto::QueryNearbyUsersRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_nearby_users_request();
        _impl_.kind_.query_nearby_users_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_nearby_users_request)
}
inline ::turms::client::model::proto::QueryNearbyUsersRequest*
TurmsRequest::_internal_mutable_query_nearby_users_request() {
    if (kind_case() != kQueryNearbyUsersRequest) {
        clear_kind();
        set_has_query_nearby_users_request();
        _impl_.kind_.query_nearby_users_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryNearbyUsersRequest>(GetArena());
    }
    return _impl_.kind_.query_nearby_users_request_;
}
inline ::turms::client::model::proto::QueryNearbyUsersRequest*
TurmsRequest::mutable_query_nearby_users_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryNearbyUsersRequest* _msg =
        _internal_mutable_query_nearby_users_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_nearby_users_request)
    return _msg;
}

// .turms.client.model.proto.QueryUserOnlineStatusesRequest query_user_online_statuses_request =
// 102;
inline bool TurmsRequest::has_query_user_online_statuses_request() const {
    return kind_case() == kQueryUserOnlineStatusesRequest;
}
inline bool TurmsRequest::_internal_has_query_user_online_statuses_request() const {
    return kind_case() == kQueryUserOnlineStatusesRequest;
}
inline void TurmsRequest::set_has_query_user_online_statuses_request() {
    _impl_._oneof_case_[0] = kQueryUserOnlineStatusesRequest;
}
inline ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
TurmsRequest::release_query_user_online_statuses_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_user_online_statuses_request)
    if (kind_case() == kQueryUserOnlineStatusesRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_user_online_statuses_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_user_online_statuses_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryUserOnlineStatusesRequest&
TurmsRequest::_internal_query_user_online_statuses_request() const {
    return kind_case() == kQueryUserOnlineStatusesRequest
               ? *_impl_.kind_.query_user_online_statuses_request_
               : reinterpret_cast<::turms::client::model::proto::QueryUserOnlineStatusesRequest&>(
                     ::turms::client::model::proto::
                         _QueryUserOnlineStatusesRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryUserOnlineStatusesRequest&
TurmsRequest::query_user_online_statuses_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_user_online_statuses_request)
    return _internal_query_user_online_statuses_request();
}
inline ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
TurmsRequest::unsafe_arena_release_query_user_online_statuses_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_user_online_statuses_request)
    if (kind_case() == kQueryUserOnlineStatusesRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_user_online_statuses_request_;
        _impl_.kind_.query_user_online_statuses_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_user_online_statuses_request(
    ::turms::client::model::proto::QueryUserOnlineStatusesRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_user_online_statuses_request();
        _impl_.kind_.query_user_online_statuses_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_user_online_statuses_request)
}
inline ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
TurmsRequest::_internal_mutable_query_user_online_statuses_request() {
    if (kind_case() != kQueryUserOnlineStatusesRequest) {
        clear_kind();
        set_has_query_user_online_statuses_request();
        _impl_.kind_.query_user_online_statuses_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryUserOnlineStatusesRequest>(GetArena());
    }
    return _impl_.kind_.query_user_online_statuses_request_;
}
inline ::turms::client::model::proto::QueryUserOnlineStatusesRequest*
TurmsRequest::mutable_query_user_online_statuses_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryUserOnlineStatusesRequest* _msg =
        _internal_mutable_query_user_online_statuses_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_user_online_statuses_request)
    return _msg;
}

// .turms.client.model.proto.UpdateUserLocationRequest update_user_location_request = 103;
inline bool TurmsRequest::has_update_user_location_request() const {
    return kind_case() == kUpdateUserLocationRequest;
}
inline bool TurmsRequest::_internal_has_update_user_location_request() const {
    return kind_case() == kUpdateUserLocationRequest;
}
inline void TurmsRequest::set_has_update_user_location_request() {
    _impl_._oneof_case_[0] = kUpdateUserLocationRequest;
}
inline ::turms::client::model::proto::UpdateUserLocationRequest*
TurmsRequest::release_update_user_location_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_user_location_request)
    if (kind_case() == kUpdateUserLocationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_user_location_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_user_location_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateUserLocationRequest&
TurmsRequest::_internal_update_user_location_request() const {
    return kind_case() == kUpdateUserLocationRequest
               ? *_impl_.kind_.update_user_location_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateUserLocationRequest&>(
                     ::turms::client::model::proto::_UpdateUserLocationRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateUserLocationRequest&
TurmsRequest::update_user_location_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_user_location_request)
    return _internal_update_user_location_request();
}
inline ::turms::client::model::proto::UpdateUserLocationRequest*
TurmsRequest::unsafe_arena_release_update_user_location_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_user_location_request)
    if (kind_case() == kUpdateUserLocationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_user_location_request_;
        _impl_.kind_.update_user_location_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_user_location_request(
    ::turms::client::model::proto::UpdateUserLocationRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_user_location_request();
        _impl_.kind_.update_user_location_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_user_location_request)
}
inline ::turms::client::model::proto::UpdateUserLocationRequest*
TurmsRequest::_internal_mutable_update_user_location_request() {
    if (kind_case() != kUpdateUserLocationRequest) {
        clear_kind();
        set_has_update_user_location_request();
        _impl_.kind_.update_user_location_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateUserLocationRequest>(GetArena());
    }
    return _impl_.kind_.update_user_location_request_;
}
inline ::turms::client::model::proto::UpdateUserLocationRequest*
TurmsRequest::mutable_update_user_location_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateUserLocationRequest* _msg =
        _internal_mutable_update_user_location_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_user_location_request)
    return _msg;
}

// .turms.client.model.proto.UpdateUserOnlineStatusRequest update_user_online_status_request = 104;
inline bool TurmsRequest::has_update_user_online_status_request() const {
    return kind_case() == kUpdateUserOnlineStatusRequest;
}
inline bool TurmsRequest::_internal_has_update_user_online_status_request() const {
    return kind_case() == kUpdateUserOnlineStatusRequest;
}
inline void TurmsRequest::set_has_update_user_online_status_request() {
    _impl_._oneof_case_[0] = kUpdateUserOnlineStatusRequest;
}
inline ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
TurmsRequest::release_update_user_online_status_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_user_online_status_request)
    if (kind_case() == kUpdateUserOnlineStatusRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_user_online_status_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_user_online_status_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateUserOnlineStatusRequest&
TurmsRequest::_internal_update_user_online_status_request() const {
    return kind_case() == kUpdateUserOnlineStatusRequest
               ? *_impl_.kind_.update_user_online_status_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateUserOnlineStatusRequest&>(
                     ::turms::client::model::proto::
                         _UpdateUserOnlineStatusRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateUserOnlineStatusRequest&
TurmsRequest::update_user_online_status_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_user_online_status_request)
    return _internal_update_user_online_status_request();
}
inline ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
TurmsRequest::unsafe_arena_release_update_user_online_status_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_user_online_status_request)
    if (kind_case() == kUpdateUserOnlineStatusRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_user_online_status_request_;
        _impl_.kind_.update_user_online_status_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_user_online_status_request(
    ::turms::client::model::proto::UpdateUserOnlineStatusRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_user_online_status_request();
        _impl_.kind_.update_user_online_status_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_user_online_status_request)
}
inline ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
TurmsRequest::_internal_mutable_update_user_online_status_request() {
    if (kind_case() != kUpdateUserOnlineStatusRequest) {
        clear_kind();
        set_has_update_user_online_status_request();
        _impl_.kind_.update_user_online_status_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateUserOnlineStatusRequest>(GetArena());
    }
    return _impl_.kind_.update_user_online_status_request_;
}
inline ::turms::client::model::proto::UpdateUserOnlineStatusRequest*
TurmsRequest::mutable_update_user_online_status_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateUserOnlineStatusRequest* _msg =
        _internal_mutable_update_user_online_status_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_user_online_status_request)
    return _msg;
}

// .turms.client.model.proto.UpdateUserRequest update_user_request = 105;
inline bool TurmsRequest::has_update_user_request() const {
    return kind_case() == kUpdateUserRequest;
}
inline bool TurmsRequest::_internal_has_update_user_request() const {
    return kind_case() == kUpdateUserRequest;
}
inline void TurmsRequest::set_has_update_user_request() {
    _impl_._oneof_case_[0] = kUpdateUserRequest;
}
inline ::turms::client::model::proto::UpdateUserRequest*
TurmsRequest::release_update_user_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_user_request)
    if (kind_case() == kUpdateUserRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_user_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_user_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateUserRequest&
TurmsRequest::_internal_update_user_request() const {
    return kind_case() == kUpdateUserRequest
               ? *_impl_.kind_.update_user_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateUserRequest&>(
                     ::turms::client::model::proto::_UpdateUserRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateUserRequest& TurmsRequest::update_user_request()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_user_request)
    return _internal_update_user_request();
}
inline ::turms::client::model::proto::UpdateUserRequest*
TurmsRequest::unsafe_arena_release_update_user_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_user_request)
    if (kind_case() == kUpdateUserRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_user_request_;
        _impl_.kind_.update_user_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_user_request(
    ::turms::client::model::proto::UpdateUserRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_user_request();
        _impl_.kind_.update_user_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_user_request)
}
inline ::turms::client::model::proto::UpdateUserRequest*
TurmsRequest::_internal_mutable_update_user_request() {
    if (kind_case() != kUpdateUserRequest) {
        clear_kind();
        set_has_update_user_request();
        _impl_.kind_.update_user_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::UpdateUserRequest>(GetArena());
    }
    return _impl_.kind_.update_user_request_;
}
inline ::turms::client::model::proto::UpdateUserRequest* TurmsRequest::mutable_update_user_request()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateUserRequest* _msg =
        _internal_mutable_update_user_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_user_request)
    return _msg;
}

// .turms.client.model.proto.UpdateUserSettingsRequest update_user_settings_request = 106;
inline bool TurmsRequest::has_update_user_settings_request() const {
    return kind_case() == kUpdateUserSettingsRequest;
}
inline bool TurmsRequest::_internal_has_update_user_settings_request() const {
    return kind_case() == kUpdateUserSettingsRequest;
}
inline void TurmsRequest::set_has_update_user_settings_request() {
    _impl_._oneof_case_[0] = kUpdateUserSettingsRequest;
}
inline ::turms::client::model::proto::UpdateUserSettingsRequest*
TurmsRequest::release_update_user_settings_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_user_settings_request)
    if (kind_case() == kUpdateUserSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_user_settings_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_user_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateUserSettingsRequest&
TurmsRequest::_internal_update_user_settings_request() const {
    return kind_case() == kUpdateUserSettingsRequest
               ? *_impl_.kind_.update_user_settings_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateUserSettingsRequest&>(
                     ::turms::client::model::proto::_UpdateUserSettingsRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateUserSettingsRequest&
TurmsRequest::update_user_settings_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_user_settings_request)
    return _internal_update_user_settings_request();
}
inline ::turms::client::model::proto::UpdateUserSettingsRequest*
TurmsRequest::unsafe_arena_release_update_user_settings_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_user_settings_request)
    if (kind_case() == kUpdateUserSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_user_settings_request_;
        _impl_.kind_.update_user_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_user_settings_request(
    ::turms::client::model::proto::UpdateUserSettingsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_user_settings_request();
        _impl_.kind_.update_user_settings_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_user_settings_request)
}
inline ::turms::client::model::proto::UpdateUserSettingsRequest*
TurmsRequest::_internal_mutable_update_user_settings_request() {
    if (kind_case() != kUpdateUserSettingsRequest) {
        clear_kind();
        set_has_update_user_settings_request();
        _impl_.kind_.update_user_settings_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateUserSettingsRequest>(GetArena());
    }
    return _impl_.kind_.update_user_settings_request_;
}
inline ::turms::client::model::proto::UpdateUserSettingsRequest*
TurmsRequest::mutable_update_user_settings_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateUserSettingsRequest* _msg =
        _internal_mutable_update_user_settings_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_user_settings_request)
    return _msg;
}

// .turms.client.model.proto.DeleteUserSettingsRequest delete_user_settings_request = 107;
inline bool TurmsRequest::has_delete_user_settings_request() const {
    return kind_case() == kDeleteUserSettingsRequest;
}
inline bool TurmsRequest::_internal_has_delete_user_settings_request() const {
    return kind_case() == kDeleteUserSettingsRequest;
}
inline void TurmsRequest::set_has_delete_user_settings_request() {
    _impl_._oneof_case_[0] = kDeleteUserSettingsRequest;
}
inline ::turms::client::model::proto::DeleteUserSettingsRequest*
TurmsRequest::release_delete_user_settings_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_user_settings_request)
    if (kind_case() == kDeleteUserSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_user_settings_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_user_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteUserSettingsRequest&
TurmsRequest::_internal_delete_user_settings_request() const {
    return kind_case() == kDeleteUserSettingsRequest
               ? *_impl_.kind_.delete_user_settings_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteUserSettingsRequest&>(
                     ::turms::client::model::proto::_DeleteUserSettingsRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteUserSettingsRequest&
TurmsRequest::delete_user_settings_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_user_settings_request)
    return _internal_delete_user_settings_request();
}
inline ::turms::client::model::proto::DeleteUserSettingsRequest*
TurmsRequest::unsafe_arena_release_delete_user_settings_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_user_settings_request)
    if (kind_case() == kDeleteUserSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_user_settings_request_;
        _impl_.kind_.delete_user_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_user_settings_request(
    ::turms::client::model::proto::DeleteUserSettingsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_user_settings_request();
        _impl_.kind_.delete_user_settings_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_user_settings_request)
}
inline ::turms::client::model::proto::DeleteUserSettingsRequest*
TurmsRequest::_internal_mutable_delete_user_settings_request() {
    if (kind_case() != kDeleteUserSettingsRequest) {
        clear_kind();
        set_has_delete_user_settings_request();
        _impl_.kind_.delete_user_settings_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteUserSettingsRequest>(GetArena());
    }
    return _impl_.kind_.delete_user_settings_request_;
}
inline ::turms::client::model::proto::DeleteUserSettingsRequest*
TurmsRequest::mutable_delete_user_settings_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteUserSettingsRequest* _msg =
        _internal_mutable_delete_user_settings_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_user_settings_request)
    return _msg;
}

// .turms.client.model.proto.QueryUserSettingsRequest query_user_settings_request = 108;
inline bool TurmsRequest::has_query_user_settings_request() const {
    return kind_case() == kQueryUserSettingsRequest;
}
inline bool TurmsRequest::_internal_has_query_user_settings_request() const {
    return kind_case() == kQueryUserSettingsRequest;
}
inline void TurmsRequest::set_has_query_user_settings_request() {
    _impl_._oneof_case_[0] = kQueryUserSettingsRequest;
}
inline ::turms::client::model::proto::QueryUserSettingsRequest*
TurmsRequest::release_query_user_settings_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_user_settings_request)
    if (kind_case() == kQueryUserSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_user_settings_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_user_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryUserSettingsRequest&
TurmsRequest::_internal_query_user_settings_request() const {
    return kind_case() == kQueryUserSettingsRequest
               ? *_impl_.kind_.query_user_settings_request_
               : reinterpret_cast<::turms::client::model::proto::QueryUserSettingsRequest&>(
                     ::turms::client::model::proto::_QueryUserSettingsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryUserSettingsRequest&
TurmsRequest::query_user_settings_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_user_settings_request)
    return _internal_query_user_settings_request();
}
inline ::turms::client::model::proto::QueryUserSettingsRequest*
TurmsRequest::unsafe_arena_release_query_user_settings_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_user_settings_request)
    if (kind_case() == kQueryUserSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_user_settings_request_;
        _impl_.kind_.query_user_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_user_settings_request(
    ::turms::client::model::proto::QueryUserSettingsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_user_settings_request();
        _impl_.kind_.query_user_settings_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_user_settings_request)
}
inline ::turms::client::model::proto::QueryUserSettingsRequest*
TurmsRequest::_internal_mutable_query_user_settings_request() {
    if (kind_case() != kQueryUserSettingsRequest) {
        clear_kind();
        set_has_query_user_settings_request();
        _impl_.kind_.query_user_settings_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryUserSettingsRequest>(GetArena());
    }
    return _impl_.kind_.query_user_settings_request_;
}
inline ::turms::client::model::proto::QueryUserSettingsRequest*
TurmsRequest::mutable_query_user_settings_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryUserSettingsRequest* _msg =
        _internal_mutable_query_user_settings_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_user_settings_request)
    return _msg;
}

// .turms.client.model.proto.CreateFriendRequestRequest create_friend_request_request = 200;
inline bool TurmsRequest::has_create_friend_request_request() const {
    return kind_case() == kCreateFriendRequestRequest;
}
inline bool TurmsRequest::_internal_has_create_friend_request_request() const {
    return kind_case() == kCreateFriendRequestRequest;
}
inline void TurmsRequest::set_has_create_friend_request_request() {
    _impl_._oneof_case_[0] = kCreateFriendRequestRequest;
}
inline ::turms::client::model::proto::CreateFriendRequestRequest*
TurmsRequest::release_create_friend_request_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_friend_request_request)
    if (kind_case() == kCreateFriendRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_friend_request_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_friend_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateFriendRequestRequest&
TurmsRequest::_internal_create_friend_request_request() const {
    return kind_case() == kCreateFriendRequestRequest
               ? *_impl_.kind_.create_friend_request_request_
               : reinterpret_cast<::turms::client::model::proto::CreateFriendRequestRequest&>(
                     ::turms::client::model::proto::_CreateFriendRequestRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateFriendRequestRequest&
TurmsRequest::create_friend_request_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_friend_request_request)
    return _internal_create_friend_request_request();
}
inline ::turms::client::model::proto::CreateFriendRequestRequest*
TurmsRequest::unsafe_arena_release_create_friend_request_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_friend_request_request)
    if (kind_case() == kCreateFriendRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_friend_request_request_;
        _impl_.kind_.create_friend_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_friend_request_request(
    ::turms::client::model::proto::CreateFriendRequestRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_friend_request_request();
        _impl_.kind_.create_friend_request_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_friend_request_request)
}
inline ::turms::client::model::proto::CreateFriendRequestRequest*
TurmsRequest::_internal_mutable_create_friend_request_request() {
    if (kind_case() != kCreateFriendRequestRequest) {
        clear_kind();
        set_has_create_friend_request_request();
        _impl_.kind_.create_friend_request_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CreateFriendRequestRequest>(GetArena());
    }
    return _impl_.kind_.create_friend_request_request_;
}
inline ::turms::client::model::proto::CreateFriendRequestRequest*
TurmsRequest::mutable_create_friend_request_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateFriendRequestRequest* _msg =
        _internal_mutable_create_friend_request_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_friend_request_request)
    return _msg;
}

// .turms.client.model.proto.CreateRelationshipGroupRequest create_relationship_group_request = 201;
inline bool TurmsRequest::has_create_relationship_group_request() const {
    return kind_case() == kCreateRelationshipGroupRequest;
}
inline bool TurmsRequest::_internal_has_create_relationship_group_request() const {
    return kind_case() == kCreateRelationshipGroupRequest;
}
inline void TurmsRequest::set_has_create_relationship_group_request() {
    _impl_._oneof_case_[0] = kCreateRelationshipGroupRequest;
}
inline ::turms::client::model::proto::CreateRelationshipGroupRequest*
TurmsRequest::release_create_relationship_group_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_relationship_group_request)
    if (kind_case() == kCreateRelationshipGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_relationship_group_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_relationship_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateRelationshipGroupRequest&
TurmsRequest::_internal_create_relationship_group_request() const {
    return kind_case() == kCreateRelationshipGroupRequest
               ? *_impl_.kind_.create_relationship_group_request_
               : reinterpret_cast<::turms::client::model::proto::CreateRelationshipGroupRequest&>(
                     ::turms::client::model::proto::
                         _CreateRelationshipGroupRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateRelationshipGroupRequest&
TurmsRequest::create_relationship_group_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_relationship_group_request)
    return _internal_create_relationship_group_request();
}
inline ::turms::client::model::proto::CreateRelationshipGroupRequest*
TurmsRequest::unsafe_arena_release_create_relationship_group_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_relationship_group_request)
    if (kind_case() == kCreateRelationshipGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_relationship_group_request_;
        _impl_.kind_.create_relationship_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_relationship_group_request(
    ::turms::client::model::proto::CreateRelationshipGroupRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_relationship_group_request();
        _impl_.kind_.create_relationship_group_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_relationship_group_request)
}
inline ::turms::client::model::proto::CreateRelationshipGroupRequest*
TurmsRequest::_internal_mutable_create_relationship_group_request() {
    if (kind_case() != kCreateRelationshipGroupRequest) {
        clear_kind();
        set_has_create_relationship_group_request();
        _impl_.kind_.create_relationship_group_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CreateRelationshipGroupRequest>(GetArena());
    }
    return _impl_.kind_.create_relationship_group_request_;
}
inline ::turms::client::model::proto::CreateRelationshipGroupRequest*
TurmsRequest::mutable_create_relationship_group_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateRelationshipGroupRequest* _msg =
        _internal_mutable_create_relationship_group_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_relationship_group_request)
    return _msg;
}

// .turms.client.model.proto.CreateRelationshipRequest create_relationship_request = 202;
inline bool TurmsRequest::has_create_relationship_request() const {
    return kind_case() == kCreateRelationshipRequest;
}
inline bool TurmsRequest::_internal_has_create_relationship_request() const {
    return kind_case() == kCreateRelationshipRequest;
}
inline void TurmsRequest::set_has_create_relationship_request() {
    _impl_._oneof_case_[0] = kCreateRelationshipRequest;
}
inline ::turms::client::model::proto::CreateRelationshipRequest*
TurmsRequest::release_create_relationship_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_relationship_request)
    if (kind_case() == kCreateRelationshipRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_relationship_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_relationship_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateRelationshipRequest&
TurmsRequest::_internal_create_relationship_request() const {
    return kind_case() == kCreateRelationshipRequest
               ? *_impl_.kind_.create_relationship_request_
               : reinterpret_cast<::turms::client::model::proto::CreateRelationshipRequest&>(
                     ::turms::client::model::proto::_CreateRelationshipRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateRelationshipRequest&
TurmsRequest::create_relationship_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_relationship_request)
    return _internal_create_relationship_request();
}
inline ::turms::client::model::proto::CreateRelationshipRequest*
TurmsRequest::unsafe_arena_release_create_relationship_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_relationship_request)
    if (kind_case() == kCreateRelationshipRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_relationship_request_;
        _impl_.kind_.create_relationship_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_relationship_request(
    ::turms::client::model::proto::CreateRelationshipRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_relationship_request();
        _impl_.kind_.create_relationship_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_relationship_request)
}
inline ::turms::client::model::proto::CreateRelationshipRequest*
TurmsRequest::_internal_mutable_create_relationship_request() {
    if (kind_case() != kCreateRelationshipRequest) {
        clear_kind();
        set_has_create_relationship_request();
        _impl_.kind_.create_relationship_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CreateRelationshipRequest>(GetArena());
    }
    return _impl_.kind_.create_relationship_request_;
}
inline ::turms::client::model::proto::CreateRelationshipRequest*
TurmsRequest::mutable_create_relationship_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateRelationshipRequest* _msg =
        _internal_mutable_create_relationship_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_relationship_request)
    return _msg;
}

// .turms.client.model.proto.DeleteFriendRequestRequest delete_friend_request_request = 203;
inline bool TurmsRequest::has_delete_friend_request_request() const {
    return kind_case() == kDeleteFriendRequestRequest;
}
inline bool TurmsRequest::_internal_has_delete_friend_request_request() const {
    return kind_case() == kDeleteFriendRequestRequest;
}
inline void TurmsRequest::set_has_delete_friend_request_request() {
    _impl_._oneof_case_[0] = kDeleteFriendRequestRequest;
}
inline ::turms::client::model::proto::DeleteFriendRequestRequest*
TurmsRequest::release_delete_friend_request_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_friend_request_request)
    if (kind_case() == kDeleteFriendRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_friend_request_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_friend_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteFriendRequestRequest&
TurmsRequest::_internal_delete_friend_request_request() const {
    return kind_case() == kDeleteFriendRequestRequest
               ? *_impl_.kind_.delete_friend_request_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteFriendRequestRequest&>(
                     ::turms::client::model::proto::_DeleteFriendRequestRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteFriendRequestRequest&
TurmsRequest::delete_friend_request_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_friend_request_request)
    return _internal_delete_friend_request_request();
}
inline ::turms::client::model::proto::DeleteFriendRequestRequest*
TurmsRequest::unsafe_arena_release_delete_friend_request_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_friend_request_request)
    if (kind_case() == kDeleteFriendRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_friend_request_request_;
        _impl_.kind_.delete_friend_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_friend_request_request(
    ::turms::client::model::proto::DeleteFriendRequestRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_friend_request_request();
        _impl_.kind_.delete_friend_request_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_friend_request_request)
}
inline ::turms::client::model::proto::DeleteFriendRequestRequest*
TurmsRequest::_internal_mutable_delete_friend_request_request() {
    if (kind_case() != kDeleteFriendRequestRequest) {
        clear_kind();
        set_has_delete_friend_request_request();
        _impl_.kind_.delete_friend_request_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteFriendRequestRequest>(GetArena());
    }
    return _impl_.kind_.delete_friend_request_request_;
}
inline ::turms::client::model::proto::DeleteFriendRequestRequest*
TurmsRequest::mutable_delete_friend_request_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteFriendRequestRequest* _msg =
        _internal_mutable_delete_friend_request_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_friend_request_request)
    return _msg;
}

// .turms.client.model.proto.DeleteRelationshipGroupRequest delete_relationship_group_request = 204;
inline bool TurmsRequest::has_delete_relationship_group_request() const {
    return kind_case() == kDeleteRelationshipGroupRequest;
}
inline bool TurmsRequest::_internal_has_delete_relationship_group_request() const {
    return kind_case() == kDeleteRelationshipGroupRequest;
}
inline void TurmsRequest::set_has_delete_relationship_group_request() {
    _impl_._oneof_case_[0] = kDeleteRelationshipGroupRequest;
}
inline ::turms::client::model::proto::DeleteRelationshipGroupRequest*
TurmsRequest::release_delete_relationship_group_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_relationship_group_request)
    if (kind_case() == kDeleteRelationshipGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_relationship_group_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_relationship_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteRelationshipGroupRequest&
TurmsRequest::_internal_delete_relationship_group_request() const {
    return kind_case() == kDeleteRelationshipGroupRequest
               ? *_impl_.kind_.delete_relationship_group_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteRelationshipGroupRequest&>(
                     ::turms::client::model::proto::
                         _DeleteRelationshipGroupRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteRelationshipGroupRequest&
TurmsRequest::delete_relationship_group_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_relationship_group_request)
    return _internal_delete_relationship_group_request();
}
inline ::turms::client::model::proto::DeleteRelationshipGroupRequest*
TurmsRequest::unsafe_arena_release_delete_relationship_group_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_relationship_group_request)
    if (kind_case() == kDeleteRelationshipGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_relationship_group_request_;
        _impl_.kind_.delete_relationship_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_relationship_group_request(
    ::turms::client::model::proto::DeleteRelationshipGroupRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_relationship_group_request();
        _impl_.kind_.delete_relationship_group_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_relationship_group_request)
}
inline ::turms::client::model::proto::DeleteRelationshipGroupRequest*
TurmsRequest::_internal_mutable_delete_relationship_group_request() {
    if (kind_case() != kDeleteRelationshipGroupRequest) {
        clear_kind();
        set_has_delete_relationship_group_request();
        _impl_.kind_.delete_relationship_group_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteRelationshipGroupRequest>(GetArena());
    }
    return _impl_.kind_.delete_relationship_group_request_;
}
inline ::turms::client::model::proto::DeleteRelationshipGroupRequest*
TurmsRequest::mutable_delete_relationship_group_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteRelationshipGroupRequest* _msg =
        _internal_mutable_delete_relationship_group_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_relationship_group_request)
    return _msg;
}

// .turms.client.model.proto.DeleteRelationshipRequest delete_relationship_request = 205;
inline bool TurmsRequest::has_delete_relationship_request() const {
    return kind_case() == kDeleteRelationshipRequest;
}
inline bool TurmsRequest::_internal_has_delete_relationship_request() const {
    return kind_case() == kDeleteRelationshipRequest;
}
inline void TurmsRequest::set_has_delete_relationship_request() {
    _impl_._oneof_case_[0] = kDeleteRelationshipRequest;
}
inline ::turms::client::model::proto::DeleteRelationshipRequest*
TurmsRequest::release_delete_relationship_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_relationship_request)
    if (kind_case() == kDeleteRelationshipRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_relationship_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_relationship_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteRelationshipRequest&
TurmsRequest::_internal_delete_relationship_request() const {
    return kind_case() == kDeleteRelationshipRequest
               ? *_impl_.kind_.delete_relationship_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteRelationshipRequest&>(
                     ::turms::client::model::proto::_DeleteRelationshipRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteRelationshipRequest&
TurmsRequest::delete_relationship_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_relationship_request)
    return _internal_delete_relationship_request();
}
inline ::turms::client::model::proto::DeleteRelationshipRequest*
TurmsRequest::unsafe_arena_release_delete_relationship_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_relationship_request)
    if (kind_case() == kDeleteRelationshipRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_relationship_request_;
        _impl_.kind_.delete_relationship_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_relationship_request(
    ::turms::client::model::proto::DeleteRelationshipRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_relationship_request();
        _impl_.kind_.delete_relationship_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_relationship_request)
}
inline ::turms::client::model::proto::DeleteRelationshipRequest*
TurmsRequest::_internal_mutable_delete_relationship_request() {
    if (kind_case() != kDeleteRelationshipRequest) {
        clear_kind();
        set_has_delete_relationship_request();
        _impl_.kind_.delete_relationship_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteRelationshipRequest>(GetArena());
    }
    return _impl_.kind_.delete_relationship_request_;
}
inline ::turms::client::model::proto::DeleteRelationshipRequest*
TurmsRequest::mutable_delete_relationship_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteRelationshipRequest* _msg =
        _internal_mutable_delete_relationship_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_relationship_request)
    return _msg;
}

// .turms.client.model.proto.QueryFriendRequestsRequest query_friend_requests_request = 206;
inline bool TurmsRequest::has_query_friend_requests_request() const {
    return kind_case() == kQueryFriendRequestsRequest;
}
inline bool TurmsRequest::_internal_has_query_friend_requests_request() const {
    return kind_case() == kQueryFriendRequestsRequest;
}
inline void TurmsRequest::set_has_query_friend_requests_request() {
    _impl_._oneof_case_[0] = kQueryFriendRequestsRequest;
}
inline ::turms::client::model::proto::QueryFriendRequestsRequest*
TurmsRequest::release_query_friend_requests_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_friend_requests_request)
    if (kind_case() == kQueryFriendRequestsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_friend_requests_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_friend_requests_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryFriendRequestsRequest&
TurmsRequest::_internal_query_friend_requests_request() const {
    return kind_case() == kQueryFriendRequestsRequest
               ? *_impl_.kind_.query_friend_requests_request_
               : reinterpret_cast<::turms::client::model::proto::QueryFriendRequestsRequest&>(
                     ::turms::client::model::proto::_QueryFriendRequestsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryFriendRequestsRequest&
TurmsRequest::query_friend_requests_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_friend_requests_request)
    return _internal_query_friend_requests_request();
}
inline ::turms::client::model::proto::QueryFriendRequestsRequest*
TurmsRequest::unsafe_arena_release_query_friend_requests_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_friend_requests_request)
    if (kind_case() == kQueryFriendRequestsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_friend_requests_request_;
        _impl_.kind_.query_friend_requests_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_friend_requests_request(
    ::turms::client::model::proto::QueryFriendRequestsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_friend_requests_request();
        _impl_.kind_.query_friend_requests_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_friend_requests_request)
}
inline ::turms::client::model::proto::QueryFriendRequestsRequest*
TurmsRequest::_internal_mutable_query_friend_requests_request() {
    if (kind_case() != kQueryFriendRequestsRequest) {
        clear_kind();
        set_has_query_friend_requests_request();
        _impl_.kind_.query_friend_requests_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryFriendRequestsRequest>(GetArena());
    }
    return _impl_.kind_.query_friend_requests_request_;
}
inline ::turms::client::model::proto::QueryFriendRequestsRequest*
TurmsRequest::mutable_query_friend_requests_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryFriendRequestsRequest* _msg =
        _internal_mutable_query_friend_requests_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_friend_requests_request)
    return _msg;
}

// .turms.client.model.proto.QueryRelatedUserIdsRequest query_related_user_ids_request = 207;
inline bool TurmsRequest::has_query_related_user_ids_request() const {
    return kind_case() == kQueryRelatedUserIdsRequest;
}
inline bool TurmsRequest::_internal_has_query_related_user_ids_request() const {
    return kind_case() == kQueryRelatedUserIdsRequest;
}
inline void TurmsRequest::set_has_query_related_user_ids_request() {
    _impl_._oneof_case_[0] = kQueryRelatedUserIdsRequest;
}
inline ::turms::client::model::proto::QueryRelatedUserIdsRequest*
TurmsRequest::release_query_related_user_ids_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_related_user_ids_request)
    if (kind_case() == kQueryRelatedUserIdsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_related_user_ids_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_related_user_ids_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryRelatedUserIdsRequest&
TurmsRequest::_internal_query_related_user_ids_request() const {
    return kind_case() == kQueryRelatedUserIdsRequest
               ? *_impl_.kind_.query_related_user_ids_request_
               : reinterpret_cast<::turms::client::model::proto::QueryRelatedUserIdsRequest&>(
                     ::turms::client::model::proto::_QueryRelatedUserIdsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryRelatedUserIdsRequest&
TurmsRequest::query_related_user_ids_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_related_user_ids_request)
    return _internal_query_related_user_ids_request();
}
inline ::turms::client::model::proto::QueryRelatedUserIdsRequest*
TurmsRequest::unsafe_arena_release_query_related_user_ids_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_related_user_ids_request)
    if (kind_case() == kQueryRelatedUserIdsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_related_user_ids_request_;
        _impl_.kind_.query_related_user_ids_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_related_user_ids_request(
    ::turms::client::model::proto::QueryRelatedUserIdsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_related_user_ids_request();
        _impl_.kind_.query_related_user_ids_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_related_user_ids_request)
}
inline ::turms::client::model::proto::QueryRelatedUserIdsRequest*
TurmsRequest::_internal_mutable_query_related_user_ids_request() {
    if (kind_case() != kQueryRelatedUserIdsRequest) {
        clear_kind();
        set_has_query_related_user_ids_request();
        _impl_.kind_.query_related_user_ids_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryRelatedUserIdsRequest>(GetArena());
    }
    return _impl_.kind_.query_related_user_ids_request_;
}
inline ::turms::client::model::proto::QueryRelatedUserIdsRequest*
TurmsRequest::mutable_query_related_user_ids_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryRelatedUserIdsRequest* _msg =
        _internal_mutable_query_related_user_ids_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_related_user_ids_request)
    return _msg;
}

// .turms.client.model.proto.QueryRelationshipGroupsRequest query_relationship_groups_request = 208;
inline bool TurmsRequest::has_query_relationship_groups_request() const {
    return kind_case() == kQueryRelationshipGroupsRequest;
}
inline bool TurmsRequest::_internal_has_query_relationship_groups_request() const {
    return kind_case() == kQueryRelationshipGroupsRequest;
}
inline void TurmsRequest::set_has_query_relationship_groups_request() {
    _impl_._oneof_case_[0] = kQueryRelationshipGroupsRequest;
}
inline ::turms::client::model::proto::QueryRelationshipGroupsRequest*
TurmsRequest::release_query_relationship_groups_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_relationship_groups_request)
    if (kind_case() == kQueryRelationshipGroupsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_relationship_groups_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_relationship_groups_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryRelationshipGroupsRequest&
TurmsRequest::_internal_query_relationship_groups_request() const {
    return kind_case() == kQueryRelationshipGroupsRequest
               ? *_impl_.kind_.query_relationship_groups_request_
               : reinterpret_cast<::turms::client::model::proto::QueryRelationshipGroupsRequest&>(
                     ::turms::client::model::proto::
                         _QueryRelationshipGroupsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryRelationshipGroupsRequest&
TurmsRequest::query_relationship_groups_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_relationship_groups_request)
    return _internal_query_relationship_groups_request();
}
inline ::turms::client::model::proto::QueryRelationshipGroupsRequest*
TurmsRequest::unsafe_arena_release_query_relationship_groups_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_relationship_groups_request)
    if (kind_case() == kQueryRelationshipGroupsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_relationship_groups_request_;
        _impl_.kind_.query_relationship_groups_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_relationship_groups_request(
    ::turms::client::model::proto::QueryRelationshipGroupsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_relationship_groups_request();
        _impl_.kind_.query_relationship_groups_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_relationship_groups_request)
}
inline ::turms::client::model::proto::QueryRelationshipGroupsRequest*
TurmsRequest::_internal_mutable_query_relationship_groups_request() {
    if (kind_case() != kQueryRelationshipGroupsRequest) {
        clear_kind();
        set_has_query_relationship_groups_request();
        _impl_.kind_.query_relationship_groups_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryRelationshipGroupsRequest>(GetArena());
    }
    return _impl_.kind_.query_relationship_groups_request_;
}
inline ::turms::client::model::proto::QueryRelationshipGroupsRequest*
TurmsRequest::mutable_query_relationship_groups_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryRelationshipGroupsRequest* _msg =
        _internal_mutable_query_relationship_groups_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_relationship_groups_request)
    return _msg;
}

// .turms.client.model.proto.QueryRelationshipsRequest query_relationships_request = 209;
inline bool TurmsRequest::has_query_relationships_request() const {
    return kind_case() == kQueryRelationshipsRequest;
}
inline bool TurmsRequest::_internal_has_query_relationships_request() const {
    return kind_case() == kQueryRelationshipsRequest;
}
inline void TurmsRequest::set_has_query_relationships_request() {
    _impl_._oneof_case_[0] = kQueryRelationshipsRequest;
}
inline ::turms::client::model::proto::QueryRelationshipsRequest*
TurmsRequest::release_query_relationships_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_relationships_request)
    if (kind_case() == kQueryRelationshipsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_relationships_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_relationships_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryRelationshipsRequest&
TurmsRequest::_internal_query_relationships_request() const {
    return kind_case() == kQueryRelationshipsRequest
               ? *_impl_.kind_.query_relationships_request_
               : reinterpret_cast<::turms::client::model::proto::QueryRelationshipsRequest&>(
                     ::turms::client::model::proto::_QueryRelationshipsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryRelationshipsRequest&
TurmsRequest::query_relationships_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_relationships_request)
    return _internal_query_relationships_request();
}
inline ::turms::client::model::proto::QueryRelationshipsRequest*
TurmsRequest::unsafe_arena_release_query_relationships_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_relationships_request)
    if (kind_case() == kQueryRelationshipsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_relationships_request_;
        _impl_.kind_.query_relationships_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_relationships_request(
    ::turms::client::model::proto::QueryRelationshipsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_relationships_request();
        _impl_.kind_.query_relationships_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_relationships_request)
}
inline ::turms::client::model::proto::QueryRelationshipsRequest*
TurmsRequest::_internal_mutable_query_relationships_request() {
    if (kind_case() != kQueryRelationshipsRequest) {
        clear_kind();
        set_has_query_relationships_request();
        _impl_.kind_.query_relationships_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryRelationshipsRequest>(GetArena());
    }
    return _impl_.kind_.query_relationships_request_;
}
inline ::turms::client::model::proto::QueryRelationshipsRequest*
TurmsRequest::mutable_query_relationships_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryRelationshipsRequest* _msg =
        _internal_mutable_query_relationships_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_relationships_request)
    return _msg;
}

// .turms.client.model.proto.UpdateFriendRequestRequest update_friend_request_request = 210;
inline bool TurmsRequest::has_update_friend_request_request() const {
    return kind_case() == kUpdateFriendRequestRequest;
}
inline bool TurmsRequest::_internal_has_update_friend_request_request() const {
    return kind_case() == kUpdateFriendRequestRequest;
}
inline void TurmsRequest::set_has_update_friend_request_request() {
    _impl_._oneof_case_[0] = kUpdateFriendRequestRequest;
}
inline ::turms::client::model::proto::UpdateFriendRequestRequest*
TurmsRequest::release_update_friend_request_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_friend_request_request)
    if (kind_case() == kUpdateFriendRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_friend_request_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_friend_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateFriendRequestRequest&
TurmsRequest::_internal_update_friend_request_request() const {
    return kind_case() == kUpdateFriendRequestRequest
               ? *_impl_.kind_.update_friend_request_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateFriendRequestRequest&>(
                     ::turms::client::model::proto::_UpdateFriendRequestRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateFriendRequestRequest&
TurmsRequest::update_friend_request_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_friend_request_request)
    return _internal_update_friend_request_request();
}
inline ::turms::client::model::proto::UpdateFriendRequestRequest*
TurmsRequest::unsafe_arena_release_update_friend_request_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_friend_request_request)
    if (kind_case() == kUpdateFriendRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_friend_request_request_;
        _impl_.kind_.update_friend_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_friend_request_request(
    ::turms::client::model::proto::UpdateFriendRequestRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_friend_request_request();
        _impl_.kind_.update_friend_request_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_friend_request_request)
}
inline ::turms::client::model::proto::UpdateFriendRequestRequest*
TurmsRequest::_internal_mutable_update_friend_request_request() {
    if (kind_case() != kUpdateFriendRequestRequest) {
        clear_kind();
        set_has_update_friend_request_request();
        _impl_.kind_.update_friend_request_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateFriendRequestRequest>(GetArena());
    }
    return _impl_.kind_.update_friend_request_request_;
}
inline ::turms::client::model::proto::UpdateFriendRequestRequest*
TurmsRequest::mutable_update_friend_request_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateFriendRequestRequest* _msg =
        _internal_mutable_update_friend_request_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_friend_request_request)
    return _msg;
}

// .turms.client.model.proto.UpdateRelationshipGroupRequest update_relationship_group_request = 211;
inline bool TurmsRequest::has_update_relationship_group_request() const {
    return kind_case() == kUpdateRelationshipGroupRequest;
}
inline bool TurmsRequest::_internal_has_update_relationship_group_request() const {
    return kind_case() == kUpdateRelationshipGroupRequest;
}
inline void TurmsRequest::set_has_update_relationship_group_request() {
    _impl_._oneof_case_[0] = kUpdateRelationshipGroupRequest;
}
inline ::turms::client::model::proto::UpdateRelationshipGroupRequest*
TurmsRequest::release_update_relationship_group_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_relationship_group_request)
    if (kind_case() == kUpdateRelationshipGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_relationship_group_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_relationship_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateRelationshipGroupRequest&
TurmsRequest::_internal_update_relationship_group_request() const {
    return kind_case() == kUpdateRelationshipGroupRequest
               ? *_impl_.kind_.update_relationship_group_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateRelationshipGroupRequest&>(
                     ::turms::client::model::proto::
                         _UpdateRelationshipGroupRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateRelationshipGroupRequest&
TurmsRequest::update_relationship_group_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_relationship_group_request)
    return _internal_update_relationship_group_request();
}
inline ::turms::client::model::proto::UpdateRelationshipGroupRequest*
TurmsRequest::unsafe_arena_release_update_relationship_group_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_relationship_group_request)
    if (kind_case() == kUpdateRelationshipGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_relationship_group_request_;
        _impl_.kind_.update_relationship_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_relationship_group_request(
    ::turms::client::model::proto::UpdateRelationshipGroupRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_relationship_group_request();
        _impl_.kind_.update_relationship_group_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_relationship_group_request)
}
inline ::turms::client::model::proto::UpdateRelationshipGroupRequest*
TurmsRequest::_internal_mutable_update_relationship_group_request() {
    if (kind_case() != kUpdateRelationshipGroupRequest) {
        clear_kind();
        set_has_update_relationship_group_request();
        _impl_.kind_.update_relationship_group_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateRelationshipGroupRequest>(GetArena());
    }
    return _impl_.kind_.update_relationship_group_request_;
}
inline ::turms::client::model::proto::UpdateRelationshipGroupRequest*
TurmsRequest::mutable_update_relationship_group_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateRelationshipGroupRequest* _msg =
        _internal_mutable_update_relationship_group_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_relationship_group_request)
    return _msg;
}

// .turms.client.model.proto.UpdateRelationshipRequest update_relationship_request = 212;
inline bool TurmsRequest::has_update_relationship_request() const {
    return kind_case() == kUpdateRelationshipRequest;
}
inline bool TurmsRequest::_internal_has_update_relationship_request() const {
    return kind_case() == kUpdateRelationshipRequest;
}
inline void TurmsRequest::set_has_update_relationship_request() {
    _impl_._oneof_case_[0] = kUpdateRelationshipRequest;
}
inline ::turms::client::model::proto::UpdateRelationshipRequest*
TurmsRequest::release_update_relationship_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_relationship_request)
    if (kind_case() == kUpdateRelationshipRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_relationship_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_relationship_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateRelationshipRequest&
TurmsRequest::_internal_update_relationship_request() const {
    return kind_case() == kUpdateRelationshipRequest
               ? *_impl_.kind_.update_relationship_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateRelationshipRequest&>(
                     ::turms::client::model::proto::_UpdateRelationshipRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateRelationshipRequest&
TurmsRequest::update_relationship_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_relationship_request)
    return _internal_update_relationship_request();
}
inline ::turms::client::model::proto::UpdateRelationshipRequest*
TurmsRequest::unsafe_arena_release_update_relationship_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_relationship_request)
    if (kind_case() == kUpdateRelationshipRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_relationship_request_;
        _impl_.kind_.update_relationship_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_relationship_request(
    ::turms::client::model::proto::UpdateRelationshipRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_relationship_request();
        _impl_.kind_.update_relationship_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_relationship_request)
}
inline ::turms::client::model::proto::UpdateRelationshipRequest*
TurmsRequest::_internal_mutable_update_relationship_request() {
    if (kind_case() != kUpdateRelationshipRequest) {
        clear_kind();
        set_has_update_relationship_request();
        _impl_.kind_.update_relationship_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateRelationshipRequest>(GetArena());
    }
    return _impl_.kind_.update_relationship_request_;
}
inline ::turms::client::model::proto::UpdateRelationshipRequest*
TurmsRequest::mutable_update_relationship_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateRelationshipRequest* _msg =
        _internal_mutable_update_relationship_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_relationship_request)
    return _msg;
}

// .turms.client.model.proto.CreateGroupRequest create_group_request = 300;
inline bool TurmsRequest::has_create_group_request() const {
    return kind_case() == kCreateGroupRequest;
}
inline bool TurmsRequest::_internal_has_create_group_request() const {
    return kind_case() == kCreateGroupRequest;
}
inline void TurmsRequest::set_has_create_group_request() {
    _impl_._oneof_case_[0] = kCreateGroupRequest;
}
inline ::turms::client::model::proto::CreateGroupRequest*
TurmsRequest::release_create_group_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_group_request)
    if (kind_case() == kCreateGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateGroupRequest&
TurmsRequest::_internal_create_group_request() const {
    return kind_case() == kCreateGroupRequest
               ? *_impl_.kind_.create_group_request_
               : reinterpret_cast<::turms::client::model::proto::CreateGroupRequest&>(
                     ::turms::client::model::proto::_CreateGroupRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateGroupRequest& TurmsRequest::create_group_request()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_group_request)
    return _internal_create_group_request();
}
inline ::turms::client::model::proto::CreateGroupRequest*
TurmsRequest::unsafe_arena_release_create_group_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_group_request)
    if (kind_case() == kCreateGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_request_;
        _impl_.kind_.create_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_group_request(
    ::turms::client::model::proto::CreateGroupRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_group_request();
        _impl_.kind_.create_group_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_group_request)
}
inline ::turms::client::model::proto::CreateGroupRequest*
TurmsRequest::_internal_mutable_create_group_request() {
    if (kind_case() != kCreateGroupRequest) {
        clear_kind();
        set_has_create_group_request();
        _impl_.kind_.create_group_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::CreateGroupRequest>(GetArena());
    }
    return _impl_.kind_.create_group_request_;
}
inline ::turms::client::model::proto::CreateGroupRequest*
TurmsRequest::mutable_create_group_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateGroupRequest* _msg =
        _internal_mutable_create_group_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_group_request)
    return _msg;
}

// .turms.client.model.proto.DeleteGroupRequest delete_group_request = 301;
inline bool TurmsRequest::has_delete_group_request() const {
    return kind_case() == kDeleteGroupRequest;
}
inline bool TurmsRequest::_internal_has_delete_group_request() const {
    return kind_case() == kDeleteGroupRequest;
}
inline void TurmsRequest::set_has_delete_group_request() {
    _impl_._oneof_case_[0] = kDeleteGroupRequest;
}
inline ::turms::client::model::proto::DeleteGroupRequest*
TurmsRequest::release_delete_group_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_group_request)
    if (kind_case() == kDeleteGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteGroupRequest&
TurmsRequest::_internal_delete_group_request() const {
    return kind_case() == kDeleteGroupRequest
               ? *_impl_.kind_.delete_group_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteGroupRequest&>(
                     ::turms::client::model::proto::_DeleteGroupRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteGroupRequest& TurmsRequest::delete_group_request()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_group_request)
    return _internal_delete_group_request();
}
inline ::turms::client::model::proto::DeleteGroupRequest*
TurmsRequest::unsafe_arena_release_delete_group_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_group_request)
    if (kind_case() == kDeleteGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_request_;
        _impl_.kind_.delete_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_group_request(
    ::turms::client::model::proto::DeleteGroupRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_group_request();
        _impl_.kind_.delete_group_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_request)
}
inline ::turms::client::model::proto::DeleteGroupRequest*
TurmsRequest::_internal_mutable_delete_group_request() {
    if (kind_case() != kDeleteGroupRequest) {
        clear_kind();
        set_has_delete_group_request();
        _impl_.kind_.delete_group_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::DeleteGroupRequest>(GetArena());
    }
    return _impl_.kind_.delete_group_request_;
}
inline ::turms::client::model::proto::DeleteGroupRequest*
TurmsRequest::mutable_delete_group_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteGroupRequest* _msg =
        _internal_mutable_delete_group_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_group_request)
    return _msg;
}

// .turms.client.model.proto.QueryGroupsRequest query_groups_request = 302;
inline bool TurmsRequest::has_query_groups_request() const {
    return kind_case() == kQueryGroupsRequest;
}
inline bool TurmsRequest::_internal_has_query_groups_request() const {
    return kind_case() == kQueryGroupsRequest;
}
inline void TurmsRequest::set_has_query_groups_request() {
    _impl_._oneof_case_[0] = kQueryGroupsRequest;
}
inline ::turms::client::model::proto::QueryGroupsRequest*
TurmsRequest::release_query_groups_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_groups_request)
    if (kind_case() == kQueryGroupsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_groups_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_groups_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryGroupsRequest&
TurmsRequest::_internal_query_groups_request() const {
    return kind_case() == kQueryGroupsRequest
               ? *_impl_.kind_.query_groups_request_
               : reinterpret_cast<::turms::client::model::proto::QueryGroupsRequest&>(
                     ::turms::client::model::proto::_QueryGroupsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryGroupsRequest& TurmsRequest::query_groups_request()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_groups_request)
    return _internal_query_groups_request();
}
inline ::turms::client::model::proto::QueryGroupsRequest*
TurmsRequest::unsafe_arena_release_query_groups_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_groups_request)
    if (kind_case() == kQueryGroupsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_groups_request_;
        _impl_.kind_.query_groups_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_groups_request(
    ::turms::client::model::proto::QueryGroupsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_groups_request();
        _impl_.kind_.query_groups_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_groups_request)
}
inline ::turms::client::model::proto::QueryGroupsRequest*
TurmsRequest::_internal_mutable_query_groups_request() {
    if (kind_case() != kQueryGroupsRequest) {
        clear_kind();
        set_has_query_groups_request();
        _impl_.kind_.query_groups_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::QueryGroupsRequest>(GetArena());
    }
    return _impl_.kind_.query_groups_request_;
}
inline ::turms::client::model::proto::QueryGroupsRequest*
TurmsRequest::mutable_query_groups_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryGroupsRequest* _msg =
        _internal_mutable_query_groups_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_groups_request)
    return _msg;
}

// .turms.client.model.proto.QueryJoinedGroupIdsRequest query_joined_group_ids_request = 303;
inline bool TurmsRequest::has_query_joined_group_ids_request() const {
    return kind_case() == kQueryJoinedGroupIdsRequest;
}
inline bool TurmsRequest::_internal_has_query_joined_group_ids_request() const {
    return kind_case() == kQueryJoinedGroupIdsRequest;
}
inline void TurmsRequest::set_has_query_joined_group_ids_request() {
    _impl_._oneof_case_[0] = kQueryJoinedGroupIdsRequest;
}
inline ::turms::client::model::proto::QueryJoinedGroupIdsRequest*
TurmsRequest::release_query_joined_group_ids_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_joined_group_ids_request)
    if (kind_case() == kQueryJoinedGroupIdsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_joined_group_ids_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_joined_group_ids_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryJoinedGroupIdsRequest&
TurmsRequest::_internal_query_joined_group_ids_request() const {
    return kind_case() == kQueryJoinedGroupIdsRequest
               ? *_impl_.kind_.query_joined_group_ids_request_
               : reinterpret_cast<::turms::client::model::proto::QueryJoinedGroupIdsRequest&>(
                     ::turms::client::model::proto::_QueryJoinedGroupIdsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryJoinedGroupIdsRequest&
TurmsRequest::query_joined_group_ids_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_joined_group_ids_request)
    return _internal_query_joined_group_ids_request();
}
inline ::turms::client::model::proto::QueryJoinedGroupIdsRequest*
TurmsRequest::unsafe_arena_release_query_joined_group_ids_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_joined_group_ids_request)
    if (kind_case() == kQueryJoinedGroupIdsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_joined_group_ids_request_;
        _impl_.kind_.query_joined_group_ids_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_joined_group_ids_request(
    ::turms::client::model::proto::QueryJoinedGroupIdsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_joined_group_ids_request();
        _impl_.kind_.query_joined_group_ids_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_joined_group_ids_request)
}
inline ::turms::client::model::proto::QueryJoinedGroupIdsRequest*
TurmsRequest::_internal_mutable_query_joined_group_ids_request() {
    if (kind_case() != kQueryJoinedGroupIdsRequest) {
        clear_kind();
        set_has_query_joined_group_ids_request();
        _impl_.kind_.query_joined_group_ids_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryJoinedGroupIdsRequest>(GetArena());
    }
    return _impl_.kind_.query_joined_group_ids_request_;
}
inline ::turms::client::model::proto::QueryJoinedGroupIdsRequest*
TurmsRequest::mutable_query_joined_group_ids_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryJoinedGroupIdsRequest* _msg =
        _internal_mutable_query_joined_group_ids_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_joined_group_ids_request)
    return _msg;
}

// .turms.client.model.proto.QueryJoinedGroupInfosRequest query_joined_group_infos_request = 304;
inline bool TurmsRequest::has_query_joined_group_infos_request() const {
    return kind_case() == kQueryJoinedGroupInfosRequest;
}
inline bool TurmsRequest::_internal_has_query_joined_group_infos_request() const {
    return kind_case() == kQueryJoinedGroupInfosRequest;
}
inline void TurmsRequest::set_has_query_joined_group_infos_request() {
    _impl_._oneof_case_[0] = kQueryJoinedGroupInfosRequest;
}
inline ::turms::client::model::proto::QueryJoinedGroupInfosRequest*
TurmsRequest::release_query_joined_group_infos_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_joined_group_infos_request)
    if (kind_case() == kQueryJoinedGroupInfosRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_joined_group_infos_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_joined_group_infos_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryJoinedGroupInfosRequest&
TurmsRequest::_internal_query_joined_group_infos_request() const {
    return kind_case() == kQueryJoinedGroupInfosRequest
               ? *_impl_.kind_.query_joined_group_infos_request_
               : reinterpret_cast<::turms::client::model::proto::QueryJoinedGroupInfosRequest&>(
                     ::turms::client::model::proto::
                         _QueryJoinedGroupInfosRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryJoinedGroupInfosRequest&
TurmsRequest::query_joined_group_infos_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_joined_group_infos_request)
    return _internal_query_joined_group_infos_request();
}
inline ::turms::client::model::proto::QueryJoinedGroupInfosRequest*
TurmsRequest::unsafe_arena_release_query_joined_group_infos_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_joined_group_infos_request)
    if (kind_case() == kQueryJoinedGroupInfosRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_joined_group_infos_request_;
        _impl_.kind_.query_joined_group_infos_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_joined_group_infos_request(
    ::turms::client::model::proto::QueryJoinedGroupInfosRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_joined_group_infos_request();
        _impl_.kind_.query_joined_group_infos_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_joined_group_infos_request)
}
inline ::turms::client::model::proto::QueryJoinedGroupInfosRequest*
TurmsRequest::_internal_mutable_query_joined_group_infos_request() {
    if (kind_case() != kQueryJoinedGroupInfosRequest) {
        clear_kind();
        set_has_query_joined_group_infos_request();
        _impl_.kind_.query_joined_group_infos_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryJoinedGroupInfosRequest>(GetArena());
    }
    return _impl_.kind_.query_joined_group_infos_request_;
}
inline ::turms::client::model::proto::QueryJoinedGroupInfosRequest*
TurmsRequest::mutable_query_joined_group_infos_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryJoinedGroupInfosRequest* _msg =
        _internal_mutable_query_joined_group_infos_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_joined_group_infos_request)
    return _msg;
}

// .turms.client.model.proto.UpdateGroupRequest update_group_request = 305;
inline bool TurmsRequest::has_update_group_request() const {
    return kind_case() == kUpdateGroupRequest;
}
inline bool TurmsRequest::_internal_has_update_group_request() const {
    return kind_case() == kUpdateGroupRequest;
}
inline void TurmsRequest::set_has_update_group_request() {
    _impl_._oneof_case_[0] = kUpdateGroupRequest;
}
inline ::turms::client::model::proto::UpdateGroupRequest*
TurmsRequest::release_update_group_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_group_request)
    if (kind_case() == kUpdateGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateGroupRequest&
TurmsRequest::_internal_update_group_request() const {
    return kind_case() == kUpdateGroupRequest
               ? *_impl_.kind_.update_group_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateGroupRequest&>(
                     ::turms::client::model::proto::_UpdateGroupRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateGroupRequest& TurmsRequest::update_group_request()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_group_request)
    return _internal_update_group_request();
}
inline ::turms::client::model::proto::UpdateGroupRequest*
TurmsRequest::unsafe_arena_release_update_group_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_group_request)
    if (kind_case() == kUpdateGroupRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_request_;
        _impl_.kind_.update_group_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_group_request(
    ::turms::client::model::proto::UpdateGroupRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_group_request();
        _impl_.kind_.update_group_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_group_request)
}
inline ::turms::client::model::proto::UpdateGroupRequest*
TurmsRequest::_internal_mutable_update_group_request() {
    if (kind_case() != kUpdateGroupRequest) {
        clear_kind();
        set_has_update_group_request();
        _impl_.kind_.update_group_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::UpdateGroupRequest>(GetArena());
    }
    return _impl_.kind_.update_group_request_;
}
inline ::turms::client::model::proto::UpdateGroupRequest*
TurmsRequest::mutable_update_group_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateGroupRequest* _msg =
        _internal_mutable_update_group_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_group_request)
    return _msg;
}

// .turms.client.model.proto.CreateGroupBlockedUserRequest create_group_blocked_user_request = 400;
inline bool TurmsRequest::has_create_group_blocked_user_request() const {
    return kind_case() == kCreateGroupBlockedUserRequest;
}
inline bool TurmsRequest::_internal_has_create_group_blocked_user_request() const {
    return kind_case() == kCreateGroupBlockedUserRequest;
}
inline void TurmsRequest::set_has_create_group_blocked_user_request() {
    _impl_._oneof_case_[0] = kCreateGroupBlockedUserRequest;
}
inline ::turms::client::model::proto::CreateGroupBlockedUserRequest*
TurmsRequest::release_create_group_blocked_user_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_group_blocked_user_request)
    if (kind_case() == kCreateGroupBlockedUserRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_blocked_user_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_group_blocked_user_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateGroupBlockedUserRequest&
TurmsRequest::_internal_create_group_blocked_user_request() const {
    return kind_case() == kCreateGroupBlockedUserRequest
               ? *_impl_.kind_.create_group_blocked_user_request_
               : reinterpret_cast<::turms::client::model::proto::CreateGroupBlockedUserRequest&>(
                     ::turms::client::model::proto::
                         _CreateGroupBlockedUserRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateGroupBlockedUserRequest&
TurmsRequest::create_group_blocked_user_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_group_blocked_user_request)
    return _internal_create_group_blocked_user_request();
}
inline ::turms::client::model::proto::CreateGroupBlockedUserRequest*
TurmsRequest::unsafe_arena_release_create_group_blocked_user_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_group_blocked_user_request)
    if (kind_case() == kCreateGroupBlockedUserRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_blocked_user_request_;
        _impl_.kind_.create_group_blocked_user_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_group_blocked_user_request(
    ::turms::client::model::proto::CreateGroupBlockedUserRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_group_blocked_user_request();
        _impl_.kind_.create_group_blocked_user_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_group_blocked_user_request)
}
inline ::turms::client::model::proto::CreateGroupBlockedUserRequest*
TurmsRequest::_internal_mutable_create_group_blocked_user_request() {
    if (kind_case() != kCreateGroupBlockedUserRequest) {
        clear_kind();
        set_has_create_group_blocked_user_request();
        _impl_.kind_.create_group_blocked_user_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CreateGroupBlockedUserRequest>(GetArena());
    }
    return _impl_.kind_.create_group_blocked_user_request_;
}
inline ::turms::client::model::proto::CreateGroupBlockedUserRequest*
TurmsRequest::mutable_create_group_blocked_user_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateGroupBlockedUserRequest* _msg =
        _internal_mutable_create_group_blocked_user_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_group_blocked_user_request)
    return _msg;
}

// .turms.client.model.proto.DeleteGroupBlockedUserRequest delete_group_blocked_user_request = 401;
inline bool TurmsRequest::has_delete_group_blocked_user_request() const {
    return kind_case() == kDeleteGroupBlockedUserRequest;
}
inline bool TurmsRequest::_internal_has_delete_group_blocked_user_request() const {
    return kind_case() == kDeleteGroupBlockedUserRequest;
}
inline void TurmsRequest::set_has_delete_group_blocked_user_request() {
    _impl_._oneof_case_[0] = kDeleteGroupBlockedUserRequest;
}
inline ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
TurmsRequest::release_delete_group_blocked_user_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_group_blocked_user_request)
    if (kind_case() == kDeleteGroupBlockedUserRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_blocked_user_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_group_blocked_user_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteGroupBlockedUserRequest&
TurmsRequest::_internal_delete_group_blocked_user_request() const {
    return kind_case() == kDeleteGroupBlockedUserRequest
               ? *_impl_.kind_.delete_group_blocked_user_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteGroupBlockedUserRequest&>(
                     ::turms::client::model::proto::
                         _DeleteGroupBlockedUserRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteGroupBlockedUserRequest&
TurmsRequest::delete_group_blocked_user_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_group_blocked_user_request)
    return _internal_delete_group_blocked_user_request();
}
inline ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
TurmsRequest::unsafe_arena_release_delete_group_blocked_user_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_group_blocked_user_request)
    if (kind_case() == kDeleteGroupBlockedUserRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_blocked_user_request_;
        _impl_.kind_.delete_group_blocked_user_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_group_blocked_user_request(
    ::turms::client::model::proto::DeleteGroupBlockedUserRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_group_blocked_user_request();
        _impl_.kind_.delete_group_blocked_user_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_blocked_user_request)
}
inline ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
TurmsRequest::_internal_mutable_delete_group_blocked_user_request() {
    if (kind_case() != kDeleteGroupBlockedUserRequest) {
        clear_kind();
        set_has_delete_group_blocked_user_request();
        _impl_.kind_.delete_group_blocked_user_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteGroupBlockedUserRequest>(GetArena());
    }
    return _impl_.kind_.delete_group_blocked_user_request_;
}
inline ::turms::client::model::proto::DeleteGroupBlockedUserRequest*
TurmsRequest::mutable_delete_group_blocked_user_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteGroupBlockedUserRequest* _msg =
        _internal_mutable_delete_group_blocked_user_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_group_blocked_user_request)
    return _msg;
}

// .turms.client.model.proto.QueryGroupBlockedUserIdsRequest query_group_blocked_user_ids_request =
// 402;
inline bool TurmsRequest::has_query_group_blocked_user_ids_request() const {
    return kind_case() == kQueryGroupBlockedUserIdsRequest;
}
inline bool TurmsRequest::_internal_has_query_group_blocked_user_ids_request() const {
    return kind_case() == kQueryGroupBlockedUserIdsRequest;
}
inline void TurmsRequest::set_has_query_group_blocked_user_ids_request() {
    _impl_._oneof_case_[0] = kQueryGroupBlockedUserIdsRequest;
}
inline ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
TurmsRequest::release_query_group_blocked_user_ids_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_group_blocked_user_ids_request)
    if (kind_case() == kQueryGroupBlockedUserIdsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_blocked_user_ids_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_group_blocked_user_ids_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest&
TurmsRequest::_internal_query_group_blocked_user_ids_request() const {
    return kind_case() == kQueryGroupBlockedUserIdsRequest
               ? *_impl_.kind_.query_group_blocked_user_ids_request_
               : reinterpret_cast<::turms::client::model::proto::QueryGroupBlockedUserIdsRequest&>(
                     ::turms::client::model::proto::
                         _QueryGroupBlockedUserIdsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest&
TurmsRequest::query_group_blocked_user_ids_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_group_blocked_user_ids_request)
    return _internal_query_group_blocked_user_ids_request();
}
inline ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
TurmsRequest::unsafe_arena_release_query_group_blocked_user_ids_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_group_blocked_user_ids_request)
    if (kind_case() == kQueryGroupBlockedUserIdsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_blocked_user_ids_request_;
        _impl_.kind_.query_group_blocked_user_ids_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_group_blocked_user_ids_request(
    ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_group_blocked_user_ids_request();
        _impl_.kind_.query_group_blocked_user_ids_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_group_blocked_user_ids_request)
}
inline ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
TurmsRequest::_internal_mutable_query_group_blocked_user_ids_request() {
    if (kind_case() != kQueryGroupBlockedUserIdsRequest) {
        clear_kind();
        set_has_query_group_blocked_user_ids_request();
        _impl_.kind_.query_group_blocked_user_ids_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest>(GetArena());
    }
    return _impl_.kind_.query_group_blocked_user_ids_request_;
}
inline ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest*
TurmsRequest::mutable_query_group_blocked_user_ids_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryGroupBlockedUserIdsRequest* _msg =
        _internal_mutable_query_group_blocked_user_ids_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_group_blocked_user_ids_request)
    return _msg;
}

// .turms.client.model.proto.QueryGroupBlockedUserInfosRequest
// query_group_blocked_user_infos_request = 403;
inline bool TurmsRequest::has_query_group_blocked_user_infos_request() const {
    return kind_case() == kQueryGroupBlockedUserInfosRequest;
}
inline bool TurmsRequest::_internal_has_query_group_blocked_user_infos_request() const {
    return kind_case() == kQueryGroupBlockedUserInfosRequest;
}
inline void TurmsRequest::set_has_query_group_blocked_user_infos_request() {
    _impl_._oneof_case_[0] = kQueryGroupBlockedUserInfosRequest;
}
inline ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
TurmsRequest::release_query_group_blocked_user_infos_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_group_blocked_user_infos_request)
    if (kind_case() == kQueryGroupBlockedUserInfosRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_blocked_user_infos_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_group_blocked_user_infos_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest&
TurmsRequest::_internal_query_group_blocked_user_infos_request() const {
    return kind_case() == kQueryGroupBlockedUserInfosRequest
               ? *_impl_.kind_.query_group_blocked_user_infos_request_
               : reinterpret_cast<
                     ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest&>(
                     ::turms::client::model::proto::
                         _QueryGroupBlockedUserInfosRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest&
TurmsRequest::query_group_blocked_user_infos_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_group_blocked_user_infos_request)
    return _internal_query_group_blocked_user_infos_request();
}
inline ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
TurmsRequest::unsafe_arena_release_query_group_blocked_user_infos_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_group_blocked_user_infos_request)
    if (kind_case() == kQueryGroupBlockedUserInfosRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_blocked_user_infos_request_;
        _impl_.kind_.query_group_blocked_user_infos_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_group_blocked_user_infos_request(
    ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_group_blocked_user_infos_request();
        _impl_.kind_.query_group_blocked_user_infos_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_group_blocked_user_infos_request)
}
inline ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
TurmsRequest::_internal_mutable_query_group_blocked_user_infos_request() {
    if (kind_case() != kQueryGroupBlockedUserInfosRequest) {
        clear_kind();
        set_has_query_group_blocked_user_infos_request();
        _impl_.kind_.query_group_blocked_user_infos_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest>(GetArena());
    }
    return _impl_.kind_.query_group_blocked_user_infos_request_;
}
inline ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest*
TurmsRequest::mutable_query_group_blocked_user_infos_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryGroupBlockedUserInfosRequest* _msg =
        _internal_mutable_query_group_blocked_user_infos_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_group_blocked_user_infos_request)
    return _msg;
}

// .turms.client.model.proto.CheckGroupJoinQuestionsAnswersRequest
// check_group_join_questions_answers_request = 500;
inline bool TurmsRequest::has_check_group_join_questions_answers_request() const {
    return kind_case() == kCheckGroupJoinQuestionsAnswersRequest;
}
inline bool TurmsRequest::_internal_has_check_group_join_questions_answers_request() const {
    return kind_case() == kCheckGroupJoinQuestionsAnswersRequest;
}
inline void TurmsRequest::set_has_check_group_join_questions_answers_request() {
    _impl_._oneof_case_[0] = kCheckGroupJoinQuestionsAnswersRequest;
}
inline ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
TurmsRequest::release_check_group_join_questions_answers_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.check_group_join_questions_answers_request)
    if (kind_case() == kCheckGroupJoinQuestionsAnswersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.check_group_join_questions_answers_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.check_group_join_questions_answers_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest&
TurmsRequest::_internal_check_group_join_questions_answers_request() const {
    return kind_case() == kCheckGroupJoinQuestionsAnswersRequest
               ? *_impl_.kind_.check_group_join_questions_answers_request_
               : reinterpret_cast<
                     ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest&>(
                     ::turms::client::model::proto::
                         _CheckGroupJoinQuestionsAnswersRequest_default_instance_);
}
inline const ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest&
TurmsRequest::check_group_join_questions_answers_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.check_group_join_questions_answers_request)
    return _internal_check_group_join_questions_answers_request();
}
inline ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
TurmsRequest::unsafe_arena_release_check_group_join_questions_answers_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.check_group_join_questions_answers_request)
    if (kind_case() == kCheckGroupJoinQuestionsAnswersRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.check_group_join_questions_answers_request_;
        _impl_.kind_.check_group_join_questions_answers_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_check_group_join_questions_answers_request(
    ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_check_group_join_questions_answers_request();
        _impl_.kind_.check_group_join_questions_answers_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.check_group_join_questions_answers_request)
}
inline ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
TurmsRequest::_internal_mutable_check_group_join_questions_answers_request() {
    if (kind_case() != kCheckGroupJoinQuestionsAnswersRequest) {
        clear_kind();
        set_has_check_group_join_questions_answers_request();
        _impl_.kind_.check_group_join_questions_answers_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest>(GetArena());
    }
    return _impl_.kind_.check_group_join_questions_answers_request_;
}
inline ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest*
TurmsRequest::mutable_check_group_join_questions_answers_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CheckGroupJoinQuestionsAnswersRequest* _msg =
        _internal_mutable_check_group_join_questions_answers_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.check_group_join_questions_answers_request)
    return _msg;
}

// .turms.client.model.proto.CreateGroupInvitationRequest create_group_invitation_request = 501;
inline bool TurmsRequest::has_create_group_invitation_request() const {
    return kind_case() == kCreateGroupInvitationRequest;
}
inline bool TurmsRequest::_internal_has_create_group_invitation_request() const {
    return kind_case() == kCreateGroupInvitationRequest;
}
inline void TurmsRequest::set_has_create_group_invitation_request() {
    _impl_._oneof_case_[0] = kCreateGroupInvitationRequest;
}
inline ::turms::client::model::proto::CreateGroupInvitationRequest*
TurmsRequest::release_create_group_invitation_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_group_invitation_request)
    if (kind_case() == kCreateGroupInvitationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_invitation_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_group_invitation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateGroupInvitationRequest&
TurmsRequest::_internal_create_group_invitation_request() const {
    return kind_case() == kCreateGroupInvitationRequest
               ? *_impl_.kind_.create_group_invitation_request_
               : reinterpret_cast<::turms::client::model::proto::CreateGroupInvitationRequest&>(
                     ::turms::client::model::proto::
                         _CreateGroupInvitationRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateGroupInvitationRequest&
TurmsRequest::create_group_invitation_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_group_invitation_request)
    return _internal_create_group_invitation_request();
}
inline ::turms::client::model::proto::CreateGroupInvitationRequest*
TurmsRequest::unsafe_arena_release_create_group_invitation_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_group_invitation_request)
    if (kind_case() == kCreateGroupInvitationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_invitation_request_;
        _impl_.kind_.create_group_invitation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_group_invitation_request(
    ::turms::client::model::proto::CreateGroupInvitationRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_group_invitation_request();
        _impl_.kind_.create_group_invitation_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_group_invitation_request)
}
inline ::turms::client::model::proto::CreateGroupInvitationRequest*
TurmsRequest::_internal_mutable_create_group_invitation_request() {
    if (kind_case() != kCreateGroupInvitationRequest) {
        clear_kind();
        set_has_create_group_invitation_request();
        _impl_.kind_.create_group_invitation_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CreateGroupInvitationRequest>(GetArena());
    }
    return _impl_.kind_.create_group_invitation_request_;
}
inline ::turms::client::model::proto::CreateGroupInvitationRequest*
TurmsRequest::mutable_create_group_invitation_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateGroupInvitationRequest* _msg =
        _internal_mutable_create_group_invitation_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_group_invitation_request)
    return _msg;
}

// .turms.client.model.proto.CreateGroupJoinRequestRequest create_group_join_request_request = 502;
inline bool TurmsRequest::has_create_group_join_request_request() const {
    return kind_case() == kCreateGroupJoinRequestRequest;
}
inline bool TurmsRequest::_internal_has_create_group_join_request_request() const {
    return kind_case() == kCreateGroupJoinRequestRequest;
}
inline void TurmsRequest::set_has_create_group_join_request_request() {
    _impl_._oneof_case_[0] = kCreateGroupJoinRequestRequest;
}
inline ::turms::client::model::proto::CreateGroupJoinRequestRequest*
TurmsRequest::release_create_group_join_request_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_group_join_request_request)
    if (kind_case() == kCreateGroupJoinRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_join_request_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_group_join_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateGroupJoinRequestRequest&
TurmsRequest::_internal_create_group_join_request_request() const {
    return kind_case() == kCreateGroupJoinRequestRequest
               ? *_impl_.kind_.create_group_join_request_request_
               : reinterpret_cast<::turms::client::model::proto::CreateGroupJoinRequestRequest&>(
                     ::turms::client::model::proto::
                         _CreateGroupJoinRequestRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateGroupJoinRequestRequest&
TurmsRequest::create_group_join_request_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_group_join_request_request)
    return _internal_create_group_join_request_request();
}
inline ::turms::client::model::proto::CreateGroupJoinRequestRequest*
TurmsRequest::unsafe_arena_release_create_group_join_request_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_group_join_request_request)
    if (kind_case() == kCreateGroupJoinRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_join_request_request_;
        _impl_.kind_.create_group_join_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_group_join_request_request(
    ::turms::client::model::proto::CreateGroupJoinRequestRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_group_join_request_request();
        _impl_.kind_.create_group_join_request_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_group_join_request_request)
}
inline ::turms::client::model::proto::CreateGroupJoinRequestRequest*
TurmsRequest::_internal_mutable_create_group_join_request_request() {
    if (kind_case() != kCreateGroupJoinRequestRequest) {
        clear_kind();
        set_has_create_group_join_request_request();
        _impl_.kind_.create_group_join_request_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CreateGroupJoinRequestRequest>(GetArena());
    }
    return _impl_.kind_.create_group_join_request_request_;
}
inline ::turms::client::model::proto::CreateGroupJoinRequestRequest*
TurmsRequest::mutable_create_group_join_request_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateGroupJoinRequestRequest* _msg =
        _internal_mutable_create_group_join_request_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_group_join_request_request)
    return _msg;
}

// .turms.client.model.proto.CreateGroupJoinQuestionsRequest create_group_join_questions_request =
// 503;
inline bool TurmsRequest::has_create_group_join_questions_request() const {
    return kind_case() == kCreateGroupJoinQuestionsRequest;
}
inline bool TurmsRequest::_internal_has_create_group_join_questions_request() const {
    return kind_case() == kCreateGroupJoinQuestionsRequest;
}
inline void TurmsRequest::set_has_create_group_join_questions_request() {
    _impl_._oneof_case_[0] = kCreateGroupJoinQuestionsRequest;
}
inline ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
TurmsRequest::release_create_group_join_questions_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_group_join_questions_request)
    if (kind_case() == kCreateGroupJoinQuestionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_join_questions_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_group_join_questions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateGroupJoinQuestionsRequest&
TurmsRequest::_internal_create_group_join_questions_request() const {
    return kind_case() == kCreateGroupJoinQuestionsRequest
               ? *_impl_.kind_.create_group_join_questions_request_
               : reinterpret_cast<::turms::client::model::proto::CreateGroupJoinQuestionsRequest&>(
                     ::turms::client::model::proto::
                         _CreateGroupJoinQuestionsRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateGroupJoinQuestionsRequest&
TurmsRequest::create_group_join_questions_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_group_join_questions_request)
    return _internal_create_group_join_questions_request();
}
inline ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
TurmsRequest::unsafe_arena_release_create_group_join_questions_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_group_join_questions_request)
    if (kind_case() == kCreateGroupJoinQuestionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_group_join_questions_request_;
        _impl_.kind_.create_group_join_questions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_group_join_questions_request(
    ::turms::client::model::proto::CreateGroupJoinQuestionsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_group_join_questions_request();
        _impl_.kind_.create_group_join_questions_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_group_join_questions_request)
}
inline ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
TurmsRequest::_internal_mutable_create_group_join_questions_request() {
    if (kind_case() != kCreateGroupJoinQuestionsRequest) {
        clear_kind();
        set_has_create_group_join_questions_request();
        _impl_.kind_.create_group_join_questions_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CreateGroupJoinQuestionsRequest>(GetArena());
    }
    return _impl_.kind_.create_group_join_questions_request_;
}
inline ::turms::client::model::proto::CreateGroupJoinQuestionsRequest*
TurmsRequest::mutable_create_group_join_questions_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateGroupJoinQuestionsRequest* _msg =
        _internal_mutable_create_group_join_questions_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_group_join_questions_request)
    return _msg;
}

// .turms.client.model.proto.DeleteGroupInvitationRequest delete_group_invitation_request = 504;
inline bool TurmsRequest::has_delete_group_invitation_request() const {
    return kind_case() == kDeleteGroupInvitationRequest;
}
inline bool TurmsRequest::_internal_has_delete_group_invitation_request() const {
    return kind_case() == kDeleteGroupInvitationRequest;
}
inline void TurmsRequest::set_has_delete_group_invitation_request() {
    _impl_._oneof_case_[0] = kDeleteGroupInvitationRequest;
}
inline ::turms::client::model::proto::DeleteGroupInvitationRequest*
TurmsRequest::release_delete_group_invitation_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_group_invitation_request)
    if (kind_case() == kDeleteGroupInvitationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_invitation_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_group_invitation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteGroupInvitationRequest&
TurmsRequest::_internal_delete_group_invitation_request() const {
    return kind_case() == kDeleteGroupInvitationRequest
               ? *_impl_.kind_.delete_group_invitation_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteGroupInvitationRequest&>(
                     ::turms::client::model::proto::
                         _DeleteGroupInvitationRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteGroupInvitationRequest&
TurmsRequest::delete_group_invitation_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_group_invitation_request)
    return _internal_delete_group_invitation_request();
}
inline ::turms::client::model::proto::DeleteGroupInvitationRequest*
TurmsRequest::unsafe_arena_release_delete_group_invitation_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_group_invitation_request)
    if (kind_case() == kDeleteGroupInvitationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_invitation_request_;
        _impl_.kind_.delete_group_invitation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_group_invitation_request(
    ::turms::client::model::proto::DeleteGroupInvitationRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_group_invitation_request();
        _impl_.kind_.delete_group_invitation_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_invitation_request)
}
inline ::turms::client::model::proto::DeleteGroupInvitationRequest*
TurmsRequest::_internal_mutable_delete_group_invitation_request() {
    if (kind_case() != kDeleteGroupInvitationRequest) {
        clear_kind();
        set_has_delete_group_invitation_request();
        _impl_.kind_.delete_group_invitation_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteGroupInvitationRequest>(GetArena());
    }
    return _impl_.kind_.delete_group_invitation_request_;
}
inline ::turms::client::model::proto::DeleteGroupInvitationRequest*
TurmsRequest::mutable_delete_group_invitation_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteGroupInvitationRequest* _msg =
        _internal_mutable_delete_group_invitation_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_group_invitation_request)
    return _msg;
}

// .turms.client.model.proto.DeleteGroupJoinRequestRequest delete_group_join_request_request = 505;
inline bool TurmsRequest::has_delete_group_join_request_request() const {
    return kind_case() == kDeleteGroupJoinRequestRequest;
}
inline bool TurmsRequest::_internal_has_delete_group_join_request_request() const {
    return kind_case() == kDeleteGroupJoinRequestRequest;
}
inline void TurmsRequest::set_has_delete_group_join_request_request() {
    _impl_._oneof_case_[0] = kDeleteGroupJoinRequestRequest;
}
inline ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
TurmsRequest::release_delete_group_join_request_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_group_join_request_request)
    if (kind_case() == kDeleteGroupJoinRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_join_request_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_group_join_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteGroupJoinRequestRequest&
TurmsRequest::_internal_delete_group_join_request_request() const {
    return kind_case() == kDeleteGroupJoinRequestRequest
               ? *_impl_.kind_.delete_group_join_request_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteGroupJoinRequestRequest&>(
                     ::turms::client::model::proto::
                         _DeleteGroupJoinRequestRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteGroupJoinRequestRequest&
TurmsRequest::delete_group_join_request_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_group_join_request_request)
    return _internal_delete_group_join_request_request();
}
inline ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
TurmsRequest::unsafe_arena_release_delete_group_join_request_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_group_join_request_request)
    if (kind_case() == kDeleteGroupJoinRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_join_request_request_;
        _impl_.kind_.delete_group_join_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_group_join_request_request(
    ::turms::client::model::proto::DeleteGroupJoinRequestRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_group_join_request_request();
        _impl_.kind_.delete_group_join_request_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_join_request_request)
}
inline ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
TurmsRequest::_internal_mutable_delete_group_join_request_request() {
    if (kind_case() != kDeleteGroupJoinRequestRequest) {
        clear_kind();
        set_has_delete_group_join_request_request();
        _impl_.kind_.delete_group_join_request_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteGroupJoinRequestRequest>(GetArena());
    }
    return _impl_.kind_.delete_group_join_request_request_;
}
inline ::turms::client::model::proto::DeleteGroupJoinRequestRequest*
TurmsRequest::mutable_delete_group_join_request_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteGroupJoinRequestRequest* _msg =
        _internal_mutable_delete_group_join_request_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_group_join_request_request)
    return _msg;
}

// .turms.client.model.proto.DeleteGroupJoinQuestionsRequest delete_group_join_questions_request =
// 506;
inline bool TurmsRequest::has_delete_group_join_questions_request() const {
    return kind_case() == kDeleteGroupJoinQuestionsRequest;
}
inline bool TurmsRequest::_internal_has_delete_group_join_questions_request() const {
    return kind_case() == kDeleteGroupJoinQuestionsRequest;
}
inline void TurmsRequest::set_has_delete_group_join_questions_request() {
    _impl_._oneof_case_[0] = kDeleteGroupJoinQuestionsRequest;
}
inline ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
TurmsRequest::release_delete_group_join_questions_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_group_join_questions_request)
    if (kind_case() == kDeleteGroupJoinQuestionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_join_questions_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_group_join_questions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest&
TurmsRequest::_internal_delete_group_join_questions_request() const {
    return kind_case() == kDeleteGroupJoinQuestionsRequest
               ? *_impl_.kind_.delete_group_join_questions_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteGroupJoinQuestionsRequest&>(
                     ::turms::client::model::proto::
                         _DeleteGroupJoinQuestionsRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest&
TurmsRequest::delete_group_join_questions_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_group_join_questions_request)
    return _internal_delete_group_join_questions_request();
}
inline ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
TurmsRequest::unsafe_arena_release_delete_group_join_questions_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_group_join_questions_request)
    if (kind_case() == kDeleteGroupJoinQuestionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_group_join_questions_request_;
        _impl_.kind_.delete_group_join_questions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_group_join_questions_request(
    ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_group_join_questions_request();
        _impl_.kind_.delete_group_join_questions_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_group_join_questions_request)
}
inline ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
TurmsRequest::_internal_mutable_delete_group_join_questions_request() {
    if (kind_case() != kDeleteGroupJoinQuestionsRequest) {
        clear_kind();
        set_has_delete_group_join_questions_request();
        _impl_.kind_.delete_group_join_questions_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest>(GetArena());
    }
    return _impl_.kind_.delete_group_join_questions_request_;
}
inline ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest*
TurmsRequest::mutable_delete_group_join_questions_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteGroupJoinQuestionsRequest* _msg =
        _internal_mutable_delete_group_join_questions_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_group_join_questions_request)
    return _msg;
}

// .turms.client.model.proto.QueryGroupInvitationsRequest query_group_invitations_request = 507;
inline bool TurmsRequest::has_query_group_invitations_request() const {
    return kind_case() == kQueryGroupInvitationsRequest;
}
inline bool TurmsRequest::_internal_has_query_group_invitations_request() const {
    return kind_case() == kQueryGroupInvitationsRequest;
}
inline void TurmsRequest::set_has_query_group_invitations_request() {
    _impl_._oneof_case_[0] = kQueryGroupInvitationsRequest;
}
inline ::turms::client::model::proto::QueryGroupInvitationsRequest*
TurmsRequest::release_query_group_invitations_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_group_invitations_request)
    if (kind_case() == kQueryGroupInvitationsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_invitations_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_group_invitations_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryGroupInvitationsRequest&
TurmsRequest::_internal_query_group_invitations_request() const {
    return kind_case() == kQueryGroupInvitationsRequest
               ? *_impl_.kind_.query_group_invitations_request_
               : reinterpret_cast<::turms::client::model::proto::QueryGroupInvitationsRequest&>(
                     ::turms::client::model::proto::
                         _QueryGroupInvitationsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryGroupInvitationsRequest&
TurmsRequest::query_group_invitations_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_group_invitations_request)
    return _internal_query_group_invitations_request();
}
inline ::turms::client::model::proto::QueryGroupInvitationsRequest*
TurmsRequest::unsafe_arena_release_query_group_invitations_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_group_invitations_request)
    if (kind_case() == kQueryGroupInvitationsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_invitations_request_;
        _impl_.kind_.query_group_invitations_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_group_invitations_request(
    ::turms::client::model::proto::QueryGroupInvitationsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_group_invitations_request();
        _impl_.kind_.query_group_invitations_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_group_invitations_request)
}
inline ::turms::client::model::proto::QueryGroupInvitationsRequest*
TurmsRequest::_internal_mutable_query_group_invitations_request() {
    if (kind_case() != kQueryGroupInvitationsRequest) {
        clear_kind();
        set_has_query_group_invitations_request();
        _impl_.kind_.query_group_invitations_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryGroupInvitationsRequest>(GetArena());
    }
    return _impl_.kind_.query_group_invitations_request_;
}
inline ::turms::client::model::proto::QueryGroupInvitationsRequest*
TurmsRequest::mutable_query_group_invitations_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryGroupInvitationsRequest* _msg =
        _internal_mutable_query_group_invitations_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_group_invitations_request)
    return _msg;
}

// .turms.client.model.proto.QueryGroupJoinRequestsRequest query_group_join_requests_request = 508;
inline bool TurmsRequest::has_query_group_join_requests_request() const {
    return kind_case() == kQueryGroupJoinRequestsRequest;
}
inline bool TurmsRequest::_internal_has_query_group_join_requests_request() const {
    return kind_case() == kQueryGroupJoinRequestsRequest;
}
inline void TurmsRequest::set_has_query_group_join_requests_request() {
    _impl_._oneof_case_[0] = kQueryGroupJoinRequestsRequest;
}
inline ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
TurmsRequest::release_query_group_join_requests_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_group_join_requests_request)
    if (kind_case() == kQueryGroupJoinRequestsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_join_requests_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_group_join_requests_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryGroupJoinRequestsRequest&
TurmsRequest::_internal_query_group_join_requests_request() const {
    return kind_case() == kQueryGroupJoinRequestsRequest
               ? *_impl_.kind_.query_group_join_requests_request_
               : reinterpret_cast<::turms::client::model::proto::QueryGroupJoinRequestsRequest&>(
                     ::turms::client::model::proto::
                         _QueryGroupJoinRequestsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryGroupJoinRequestsRequest&
TurmsRequest::query_group_join_requests_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_group_join_requests_request)
    return _internal_query_group_join_requests_request();
}
inline ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
TurmsRequest::unsafe_arena_release_query_group_join_requests_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_group_join_requests_request)
    if (kind_case() == kQueryGroupJoinRequestsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_join_requests_request_;
        _impl_.kind_.query_group_join_requests_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_group_join_requests_request(
    ::turms::client::model::proto::QueryGroupJoinRequestsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_group_join_requests_request();
        _impl_.kind_.query_group_join_requests_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_group_join_requests_request)
}
inline ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
TurmsRequest::_internal_mutable_query_group_join_requests_request() {
    if (kind_case() != kQueryGroupJoinRequestsRequest) {
        clear_kind();
        set_has_query_group_join_requests_request();
        _impl_.kind_.query_group_join_requests_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryGroupJoinRequestsRequest>(GetArena());
    }
    return _impl_.kind_.query_group_join_requests_request_;
}
inline ::turms::client::model::proto::QueryGroupJoinRequestsRequest*
TurmsRequest::mutable_query_group_join_requests_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryGroupJoinRequestsRequest* _msg =
        _internal_mutable_query_group_join_requests_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_group_join_requests_request)
    return _msg;
}

// .turms.client.model.proto.QueryGroupJoinQuestionsRequest query_group_join_questions_request =
// 509;
inline bool TurmsRequest::has_query_group_join_questions_request() const {
    return kind_case() == kQueryGroupJoinQuestionsRequest;
}
inline bool TurmsRequest::_internal_has_query_group_join_questions_request() const {
    return kind_case() == kQueryGroupJoinQuestionsRequest;
}
inline void TurmsRequest::set_has_query_group_join_questions_request() {
    _impl_._oneof_case_[0] = kQueryGroupJoinQuestionsRequest;
}
inline ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
TurmsRequest::release_query_group_join_questions_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_group_join_questions_request)
    if (kind_case() == kQueryGroupJoinQuestionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_join_questions_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_group_join_questions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryGroupJoinQuestionsRequest&
TurmsRequest::_internal_query_group_join_questions_request() const {
    return kind_case() == kQueryGroupJoinQuestionsRequest
               ? *_impl_.kind_.query_group_join_questions_request_
               : reinterpret_cast<::turms::client::model::proto::QueryGroupJoinQuestionsRequest&>(
                     ::turms::client::model::proto::
                         _QueryGroupJoinQuestionsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryGroupJoinQuestionsRequest&
TurmsRequest::query_group_join_questions_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_group_join_questions_request)
    return _internal_query_group_join_questions_request();
}
inline ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
TurmsRequest::unsafe_arena_release_query_group_join_questions_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_group_join_questions_request)
    if (kind_case() == kQueryGroupJoinQuestionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_group_join_questions_request_;
        _impl_.kind_.query_group_join_questions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_group_join_questions_request(
    ::turms::client::model::proto::QueryGroupJoinQuestionsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_group_join_questions_request();
        _impl_.kind_.query_group_join_questions_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_group_join_questions_request)
}
inline ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
TurmsRequest::_internal_mutable_query_group_join_questions_request() {
    if (kind_case() != kQueryGroupJoinQuestionsRequest) {
        clear_kind();
        set_has_query_group_join_questions_request();
        _impl_.kind_.query_group_join_questions_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryGroupJoinQuestionsRequest>(GetArena());
    }
    return _impl_.kind_.query_group_join_questions_request_;
}
inline ::turms::client::model::proto::QueryGroupJoinQuestionsRequest*
TurmsRequest::mutable_query_group_join_questions_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryGroupJoinQuestionsRequest* _msg =
        _internal_mutable_query_group_join_questions_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_group_join_questions_request)
    return _msg;
}

// .turms.client.model.proto.UpdateGroupInvitationRequest update_group_invitation_request = 510;
inline bool TurmsRequest::has_update_group_invitation_request() const {
    return kind_case() == kUpdateGroupInvitationRequest;
}
inline bool TurmsRequest::_internal_has_update_group_invitation_request() const {
    return kind_case() == kUpdateGroupInvitationRequest;
}
inline void TurmsRequest::set_has_update_group_invitation_request() {
    _impl_._oneof_case_[0] = kUpdateGroupInvitationRequest;
}
inline ::turms::client::model::proto::UpdateGroupInvitationRequest*
TurmsRequest::release_update_group_invitation_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_group_invitation_request)
    if (kind_case() == kUpdateGroupInvitationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_invitation_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_group_invitation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateGroupInvitationRequest&
TurmsRequest::_internal_update_group_invitation_request() const {
    return kind_case() == kUpdateGroupInvitationRequest
               ? *_impl_.kind_.update_group_invitation_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateGroupInvitationRequest&>(
                     ::turms::client::model::proto::
                         _UpdateGroupInvitationRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateGroupInvitationRequest&
TurmsRequest::update_group_invitation_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_group_invitation_request)
    return _internal_update_group_invitation_request();
}
inline ::turms::client::model::proto::UpdateGroupInvitationRequest*
TurmsRequest::unsafe_arena_release_update_group_invitation_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_group_invitation_request)
    if (kind_case() == kUpdateGroupInvitationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_invitation_request_;
        _impl_.kind_.update_group_invitation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_group_invitation_request(
    ::turms::client::model::proto::UpdateGroupInvitationRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_group_invitation_request();
        _impl_.kind_.update_group_invitation_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_group_invitation_request)
}
inline ::turms::client::model::proto::UpdateGroupInvitationRequest*
TurmsRequest::_internal_mutable_update_group_invitation_request() {
    if (kind_case() != kUpdateGroupInvitationRequest) {
        clear_kind();
        set_has_update_group_invitation_request();
        _impl_.kind_.update_group_invitation_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateGroupInvitationRequest>(GetArena());
    }
    return _impl_.kind_.update_group_invitation_request_;
}
inline ::turms::client::model::proto::UpdateGroupInvitationRequest*
TurmsRequest::mutable_update_group_invitation_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateGroupInvitationRequest* _msg =
        _internal_mutable_update_group_invitation_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_group_invitation_request)
    return _msg;
}

// .turms.client.model.proto.UpdateGroupJoinQuestionRequest update_group_join_question_request =
// 511;
inline bool TurmsRequest::has_update_group_join_question_request() const {
    return kind_case() == kUpdateGroupJoinQuestionRequest;
}
inline bool TurmsRequest::_internal_has_update_group_join_question_request() const {
    return kind_case() == kUpdateGroupJoinQuestionRequest;
}
inline void TurmsRequest::set_has_update_group_join_question_request() {
    _impl_._oneof_case_[0] = kUpdateGroupJoinQuestionRequest;
}
inline ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
TurmsRequest::release_update_group_join_question_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_group_join_question_request)
    if (kind_case() == kUpdateGroupJoinQuestionRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_join_question_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_group_join_question_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateGroupJoinQuestionRequest&
TurmsRequest::_internal_update_group_join_question_request() const {
    return kind_case() == kUpdateGroupJoinQuestionRequest
               ? *_impl_.kind_.update_group_join_question_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateGroupJoinQuestionRequest&>(
                     ::turms::client::model::proto::
                         _UpdateGroupJoinQuestionRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateGroupJoinQuestionRequest&
TurmsRequest::update_group_join_question_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_group_join_question_request)
    return _internal_update_group_join_question_request();
}
inline ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
TurmsRequest::unsafe_arena_release_update_group_join_question_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_group_join_question_request)
    if (kind_case() == kUpdateGroupJoinQuestionRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_join_question_request_;
        _impl_.kind_.update_group_join_question_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_group_join_question_request(
    ::turms::client::model::proto::UpdateGroupJoinQuestionRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_group_join_question_request();
        _impl_.kind_.update_group_join_question_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_group_join_question_request)
}
inline ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
TurmsRequest::_internal_mutable_update_group_join_question_request() {
    if (kind_case() != kUpdateGroupJoinQuestionRequest) {
        clear_kind();
        set_has_update_group_join_question_request();
        _impl_.kind_.update_group_join_question_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateGroupJoinQuestionRequest>(GetArena());
    }
    return _impl_.kind_.update_group_join_question_request_;
}
inline ::turms::client::model::proto::UpdateGroupJoinQuestionRequest*
TurmsRequest::mutable_update_group_join_question_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateGroupJoinQuestionRequest* _msg =
        _internal_mutable_update_group_join_question_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_group_join_question_request)
    return _msg;
}

// .turms.client.model.proto.UpdateGroupJoinRequestRequest update_group_join_request_request = 512;
inline bool TurmsRequest::has_update_group_join_request_request() const {
    return kind_case() == kUpdateGroupJoinRequestRequest;
}
inline bool TurmsRequest::_internal_has_update_group_join_request_request() const {
    return kind_case() == kUpdateGroupJoinRequestRequest;
}
inline void TurmsRequest::set_has_update_group_join_request_request() {
    _impl_._oneof_case_[0] = kUpdateGroupJoinRequestRequest;
}
inline ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
TurmsRequest::release_update_group_join_request_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_group_join_request_request)
    if (kind_case() == kUpdateGroupJoinRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_join_request_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_group_join_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateGroupJoinRequestRequest&
TurmsRequest::_internal_update_group_join_request_request() const {
    return kind_case() == kUpdateGroupJoinRequestRequest
               ? *_impl_.kind_.update_group_join_request_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateGroupJoinRequestRequest&>(
                     ::turms::client::model::proto::
                         _UpdateGroupJoinRequestRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateGroupJoinRequestRequest&
TurmsRequest::update_group_join_request_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_group_join_request_request)
    return _internal_update_group_join_request_request();
}
inline ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
TurmsRequest::unsafe_arena_release_update_group_join_request_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_group_join_request_request)
    if (kind_case() == kUpdateGroupJoinRequestRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_group_join_request_request_;
        _impl_.kind_.update_group_join_request_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_group_join_request_request(
    ::turms::client::model::proto::UpdateGroupJoinRequestRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_group_join_request_request();
        _impl_.kind_.update_group_join_request_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_group_join_request_request)
}
inline ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
TurmsRequest::_internal_mutable_update_group_join_request_request() {
    if (kind_case() != kUpdateGroupJoinRequestRequest) {
        clear_kind();
        set_has_update_group_join_request_request();
        _impl_.kind_.update_group_join_request_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateGroupJoinRequestRequest>(GetArena());
    }
    return _impl_.kind_.update_group_join_request_request_;
}
inline ::turms::client::model::proto::UpdateGroupJoinRequestRequest*
TurmsRequest::mutable_update_group_join_request_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateGroupJoinRequestRequest* _msg =
        _internal_mutable_update_group_join_request_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_group_join_request_request)
    return _msg;
}

// .turms.client.model.proto.CreateMeetingRequest create_meeting_request = 900;
inline bool TurmsRequest::has_create_meeting_request() const {
    return kind_case() == kCreateMeetingRequest;
}
inline bool TurmsRequest::_internal_has_create_meeting_request() const {
    return kind_case() == kCreateMeetingRequest;
}
inline void TurmsRequest::set_has_create_meeting_request() {
    _impl_._oneof_case_[0] = kCreateMeetingRequest;
}
inline ::turms::client::model::proto::CreateMeetingRequest*
TurmsRequest::release_create_meeting_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_meeting_request)
    if (kind_case() == kCreateMeetingRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_meeting_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_meeting_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateMeetingRequest&
TurmsRequest::_internal_create_meeting_request() const {
    return kind_case() == kCreateMeetingRequest
               ? *_impl_.kind_.create_meeting_request_
               : reinterpret_cast<::turms::client::model::proto::CreateMeetingRequest&>(
                     ::turms::client::model::proto::_CreateMeetingRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateMeetingRequest&
TurmsRequest::create_meeting_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_meeting_request)
    return _internal_create_meeting_request();
}
inline ::turms::client::model::proto::CreateMeetingRequest*
TurmsRequest::unsafe_arena_release_create_meeting_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_meeting_request)
    if (kind_case() == kCreateMeetingRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_meeting_request_;
        _impl_.kind_.create_meeting_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_meeting_request(
    ::turms::client::model::proto::CreateMeetingRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_meeting_request();
        _impl_.kind_.create_meeting_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_meeting_request)
}
inline ::turms::client::model::proto::CreateMeetingRequest*
TurmsRequest::_internal_mutable_create_meeting_request() {
    if (kind_case() != kCreateMeetingRequest) {
        clear_kind();
        set_has_create_meeting_request();
        _impl_.kind_.create_meeting_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::CreateMeetingRequest>(GetArena());
    }
    return _impl_.kind_.create_meeting_request_;
}
inline ::turms::client::model::proto::CreateMeetingRequest*
TurmsRequest::mutable_create_meeting_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateMeetingRequest* _msg =
        _internal_mutable_create_meeting_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_meeting_request)
    return _msg;
}

// .turms.client.model.proto.DeleteMeetingRequest delete_meeting_request = 901;
inline bool TurmsRequest::has_delete_meeting_request() const {
    return kind_case() == kDeleteMeetingRequest;
}
inline bool TurmsRequest::_internal_has_delete_meeting_request() const {
    return kind_case() == kDeleteMeetingRequest;
}
inline void TurmsRequest::set_has_delete_meeting_request() {
    _impl_._oneof_case_[0] = kDeleteMeetingRequest;
}
inline ::turms::client::model::proto::DeleteMeetingRequest*
TurmsRequest::release_delete_meeting_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_meeting_request)
    if (kind_case() == kDeleteMeetingRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_meeting_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_meeting_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteMeetingRequest&
TurmsRequest::_internal_delete_meeting_request() const {
    return kind_case() == kDeleteMeetingRequest
               ? *_impl_.kind_.delete_meeting_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteMeetingRequest&>(
                     ::turms::client::model::proto::_DeleteMeetingRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteMeetingRequest&
TurmsRequest::delete_meeting_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_meeting_request)
    return _internal_delete_meeting_request();
}
inline ::turms::client::model::proto::DeleteMeetingRequest*
TurmsRequest::unsafe_arena_release_delete_meeting_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_meeting_request)
    if (kind_case() == kDeleteMeetingRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_meeting_request_;
        _impl_.kind_.delete_meeting_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_meeting_request(
    ::turms::client::model::proto::DeleteMeetingRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_meeting_request();
        _impl_.kind_.delete_meeting_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_meeting_request)
}
inline ::turms::client::model::proto::DeleteMeetingRequest*
TurmsRequest::_internal_mutable_delete_meeting_request() {
    if (kind_case() != kDeleteMeetingRequest) {
        clear_kind();
        set_has_delete_meeting_request();
        _impl_.kind_.delete_meeting_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::DeleteMeetingRequest>(GetArena());
    }
    return _impl_.kind_.delete_meeting_request_;
}
inline ::turms::client::model::proto::DeleteMeetingRequest*
TurmsRequest::mutable_delete_meeting_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteMeetingRequest* _msg =
        _internal_mutable_delete_meeting_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_meeting_request)
    return _msg;
}

// .turms.client.model.proto.QueryMeetingsRequest query_meetings_request = 902;
inline bool TurmsRequest::has_query_meetings_request() const {
    return kind_case() == kQueryMeetingsRequest;
}
inline bool TurmsRequest::_internal_has_query_meetings_request() const {
    return kind_case() == kQueryMeetingsRequest;
}
inline void TurmsRequest::set_has_query_meetings_request() {
    _impl_._oneof_case_[0] = kQueryMeetingsRequest;
}
inline ::turms::client::model::proto::QueryMeetingsRequest*
TurmsRequest::release_query_meetings_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_meetings_request)
    if (kind_case() == kQueryMeetingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_meetings_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_meetings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryMeetingsRequest&
TurmsRequest::_internal_query_meetings_request() const {
    return kind_case() == kQueryMeetingsRequest
               ? *_impl_.kind_.query_meetings_request_
               : reinterpret_cast<::turms::client::model::proto::QueryMeetingsRequest&>(
                     ::turms::client::model::proto::_QueryMeetingsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryMeetingsRequest&
TurmsRequest::query_meetings_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_meetings_request)
    return _internal_query_meetings_request();
}
inline ::turms::client::model::proto::QueryMeetingsRequest*
TurmsRequest::unsafe_arena_release_query_meetings_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_meetings_request)
    if (kind_case() == kQueryMeetingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_meetings_request_;
        _impl_.kind_.query_meetings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_meetings_request(
    ::turms::client::model::proto::QueryMeetingsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_meetings_request();
        _impl_.kind_.query_meetings_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_meetings_request)
}
inline ::turms::client::model::proto::QueryMeetingsRequest*
TurmsRequest::_internal_mutable_query_meetings_request() {
    if (kind_case() != kQueryMeetingsRequest) {
        clear_kind();
        set_has_query_meetings_request();
        _impl_.kind_.query_meetings_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::QueryMeetingsRequest>(GetArena());
    }
    return _impl_.kind_.query_meetings_request_;
}
inline ::turms::client::model::proto::QueryMeetingsRequest*
TurmsRequest::mutable_query_meetings_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryMeetingsRequest* _msg =
        _internal_mutable_query_meetings_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_meetings_request)
    return _msg;
}

// .turms.client.model.proto.UpdateMeetingRequest update_meeting_request = 903;
inline bool TurmsRequest::has_update_meeting_request() const {
    return kind_case() == kUpdateMeetingRequest;
}
inline bool TurmsRequest::_internal_has_update_meeting_request() const {
    return kind_case() == kUpdateMeetingRequest;
}
inline void TurmsRequest::set_has_update_meeting_request() {
    _impl_._oneof_case_[0] = kUpdateMeetingRequest;
}
inline ::turms::client::model::proto::UpdateMeetingRequest*
TurmsRequest::release_update_meeting_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_meeting_request)
    if (kind_case() == kUpdateMeetingRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_meeting_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_meeting_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateMeetingRequest&
TurmsRequest::_internal_update_meeting_request() const {
    return kind_case() == kUpdateMeetingRequest
               ? *_impl_.kind_.update_meeting_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateMeetingRequest&>(
                     ::turms::client::model::proto::_UpdateMeetingRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateMeetingRequest&
TurmsRequest::update_meeting_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_meeting_request)
    return _internal_update_meeting_request();
}
inline ::turms::client::model::proto::UpdateMeetingRequest*
TurmsRequest::unsafe_arena_release_update_meeting_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_meeting_request)
    if (kind_case() == kUpdateMeetingRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_meeting_request_;
        _impl_.kind_.update_meeting_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_meeting_request(
    ::turms::client::model::proto::UpdateMeetingRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_meeting_request();
        _impl_.kind_.update_meeting_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_meeting_request)
}
inline ::turms::client::model::proto::UpdateMeetingRequest*
TurmsRequest::_internal_mutable_update_meeting_request() {
    if (kind_case() != kUpdateMeetingRequest) {
        clear_kind();
        set_has_update_meeting_request();
        _impl_.kind_.update_meeting_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::UpdateMeetingRequest>(GetArena());
    }
    return _impl_.kind_.update_meeting_request_;
}
inline ::turms::client::model::proto::UpdateMeetingRequest*
TurmsRequest::mutable_update_meeting_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateMeetingRequest* _msg =
        _internal_mutable_update_meeting_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_meeting_request)
    return _msg;
}

// .turms.client.model.proto.UpdateMeetingInvitationRequest update_meeting_invitation_request = 904;
inline bool TurmsRequest::has_update_meeting_invitation_request() const {
    return kind_case() == kUpdateMeetingInvitationRequest;
}
inline bool TurmsRequest::_internal_has_update_meeting_invitation_request() const {
    return kind_case() == kUpdateMeetingInvitationRequest;
}
inline void TurmsRequest::set_has_update_meeting_invitation_request() {
    _impl_._oneof_case_[0] = kUpdateMeetingInvitationRequest;
}
inline ::turms::client::model::proto::UpdateMeetingInvitationRequest*
TurmsRequest::release_update_meeting_invitation_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_meeting_invitation_request)
    if (kind_case() == kUpdateMeetingInvitationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_meeting_invitation_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_meeting_invitation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateMeetingInvitationRequest&
TurmsRequest::_internal_update_meeting_invitation_request() const {
    return kind_case() == kUpdateMeetingInvitationRequest
               ? *_impl_.kind_.update_meeting_invitation_request_
               : reinterpret_cast<::turms::client::model::proto::UpdateMeetingInvitationRequest&>(
                     ::turms::client::model::proto::
                         _UpdateMeetingInvitationRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateMeetingInvitationRequest&
TurmsRequest::update_meeting_invitation_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_meeting_invitation_request)
    return _internal_update_meeting_invitation_request();
}
inline ::turms::client::model::proto::UpdateMeetingInvitationRequest*
TurmsRequest::unsafe_arena_release_update_meeting_invitation_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_meeting_invitation_request)
    if (kind_case() == kUpdateMeetingInvitationRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_meeting_invitation_request_;
        _impl_.kind_.update_meeting_invitation_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_meeting_invitation_request(
    ::turms::client::model::proto::UpdateMeetingInvitationRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_meeting_invitation_request();
        _impl_.kind_.update_meeting_invitation_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_meeting_invitation_request)
}
inline ::turms::client::model::proto::UpdateMeetingInvitationRequest*
TurmsRequest::_internal_mutable_update_meeting_invitation_request() {
    if (kind_case() != kUpdateMeetingInvitationRequest) {
        clear_kind();
        set_has_update_meeting_invitation_request();
        _impl_.kind_.update_meeting_invitation_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateMeetingInvitationRequest>(GetArena());
    }
    return _impl_.kind_.update_meeting_invitation_request_;
}
inline ::turms::client::model::proto::UpdateMeetingInvitationRequest*
TurmsRequest::mutable_update_meeting_invitation_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateMeetingInvitationRequest* _msg =
        _internal_mutable_update_meeting_invitation_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_meeting_invitation_request)
    return _msg;
}

// .turms.client.model.proto.DeleteResourceRequest delete_resource_request = 1000;
inline bool TurmsRequest::has_delete_resource_request() const {
    return kind_case() == kDeleteResourceRequest;
}
inline bool TurmsRequest::_internal_has_delete_resource_request() const {
    return kind_case() == kDeleteResourceRequest;
}
inline void TurmsRequest::set_has_delete_resource_request() {
    _impl_._oneof_case_[0] = kDeleteResourceRequest;
}
inline ::turms::client::model::proto::DeleteResourceRequest*
TurmsRequest::release_delete_resource_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_resource_request)
    if (kind_case() == kDeleteResourceRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_resource_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_resource_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteResourceRequest&
TurmsRequest::_internal_delete_resource_request() const {
    return kind_case() == kDeleteResourceRequest
               ? *_impl_.kind_.delete_resource_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteResourceRequest&>(
                     ::turms::client::model::proto::_DeleteResourceRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteResourceRequest&
TurmsRequest::delete_resource_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_resource_request)
    return _internal_delete_resource_request();
}
inline ::turms::client::model::proto::DeleteResourceRequest*
TurmsRequest::unsafe_arena_release_delete_resource_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_resource_request)
    if (kind_case() == kDeleteResourceRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_resource_request_;
        _impl_.kind_.delete_resource_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_resource_request(
    ::turms::client::model::proto::DeleteResourceRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_resource_request();
        _impl_.kind_.delete_resource_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_resource_request)
}
inline ::turms::client::model::proto::DeleteResourceRequest*
TurmsRequest::_internal_mutable_delete_resource_request() {
    if (kind_case() != kDeleteResourceRequest) {
        clear_kind();
        set_has_delete_resource_request();
        _impl_.kind_.delete_resource_request_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::DeleteResourceRequest>(GetArena());
    }
    return _impl_.kind_.delete_resource_request_;
}
inline ::turms::client::model::proto::DeleteResourceRequest*
TurmsRequest::mutable_delete_resource_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteResourceRequest* _msg =
        _internal_mutable_delete_resource_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_resource_request)
    return _msg;
}

// .turms.client.model.proto.QueryResourceDownloadInfoRequest query_resource_download_info_request =
// 1001;
inline bool TurmsRequest::has_query_resource_download_info_request() const {
    return kind_case() == kQueryResourceDownloadInfoRequest;
}
inline bool TurmsRequest::_internal_has_query_resource_download_info_request() const {
    return kind_case() == kQueryResourceDownloadInfoRequest;
}
inline void TurmsRequest::set_has_query_resource_download_info_request() {
    _impl_._oneof_case_[0] = kQueryResourceDownloadInfoRequest;
}
inline ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
TurmsRequest::release_query_resource_download_info_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_resource_download_info_request)
    if (kind_case() == kQueryResourceDownloadInfoRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_resource_download_info_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_resource_download_info_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryResourceDownloadInfoRequest&
TurmsRequest::_internal_query_resource_download_info_request() const {
    return kind_case() == kQueryResourceDownloadInfoRequest
               ? *_impl_.kind_.query_resource_download_info_request_
               : reinterpret_cast<::turms::client::model::proto::QueryResourceDownloadInfoRequest&>(
                     ::turms::client::model::proto::
                         _QueryResourceDownloadInfoRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryResourceDownloadInfoRequest&
TurmsRequest::query_resource_download_info_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_resource_download_info_request)
    return _internal_query_resource_download_info_request();
}
inline ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
TurmsRequest::unsafe_arena_release_query_resource_download_info_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_resource_download_info_request)
    if (kind_case() == kQueryResourceDownloadInfoRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_resource_download_info_request_;
        _impl_.kind_.query_resource_download_info_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_resource_download_info_request(
    ::turms::client::model::proto::QueryResourceDownloadInfoRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_resource_download_info_request();
        _impl_.kind_.query_resource_download_info_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_resource_download_info_request)
}
inline ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
TurmsRequest::_internal_mutable_query_resource_download_info_request() {
    if (kind_case() != kQueryResourceDownloadInfoRequest) {
        clear_kind();
        set_has_query_resource_download_info_request();
        _impl_.kind_.query_resource_download_info_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryResourceDownloadInfoRequest>(GetArena());
    }
    return _impl_.kind_.query_resource_download_info_request_;
}
inline ::turms::client::model::proto::QueryResourceDownloadInfoRequest*
TurmsRequest::mutable_query_resource_download_info_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryResourceDownloadInfoRequest* _msg =
        _internal_mutable_query_resource_download_info_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_resource_download_info_request)
    return _msg;
}

// .turms.client.model.proto.QueryResourceUploadInfoRequest query_resource_upload_info_request =
// 1002;
inline bool TurmsRequest::has_query_resource_upload_info_request() const {
    return kind_case() == kQueryResourceUploadInfoRequest;
}
inline bool TurmsRequest::_internal_has_query_resource_upload_info_request() const {
    return kind_case() == kQueryResourceUploadInfoRequest;
}
inline void TurmsRequest::set_has_query_resource_upload_info_request() {
    _impl_._oneof_case_[0] = kQueryResourceUploadInfoRequest;
}
inline ::turms::client::model::proto::QueryResourceUploadInfoRequest*
TurmsRequest::release_query_resource_upload_info_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_resource_upload_info_request)
    if (kind_case() == kQueryResourceUploadInfoRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_resource_upload_info_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_resource_upload_info_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryResourceUploadInfoRequest&
TurmsRequest::_internal_query_resource_upload_info_request() const {
    return kind_case() == kQueryResourceUploadInfoRequest
               ? *_impl_.kind_.query_resource_upload_info_request_
               : reinterpret_cast<::turms::client::model::proto::QueryResourceUploadInfoRequest&>(
                     ::turms::client::model::proto::
                         _QueryResourceUploadInfoRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryResourceUploadInfoRequest&
TurmsRequest::query_resource_upload_info_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_resource_upload_info_request)
    return _internal_query_resource_upload_info_request();
}
inline ::turms::client::model::proto::QueryResourceUploadInfoRequest*
TurmsRequest::unsafe_arena_release_query_resource_upload_info_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_resource_upload_info_request)
    if (kind_case() == kQueryResourceUploadInfoRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_resource_upload_info_request_;
        _impl_.kind_.query_resource_upload_info_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_resource_upload_info_request(
    ::turms::client::model::proto::QueryResourceUploadInfoRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_resource_upload_info_request();
        _impl_.kind_.query_resource_upload_info_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_resource_upload_info_request)
}
inline ::turms::client::model::proto::QueryResourceUploadInfoRequest*
TurmsRequest::_internal_mutable_query_resource_upload_info_request() {
    if (kind_case() != kQueryResourceUploadInfoRequest) {
        clear_kind();
        set_has_query_resource_upload_info_request();
        _impl_.kind_.query_resource_upload_info_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryResourceUploadInfoRequest>(GetArena());
    }
    return _impl_.kind_.query_resource_upload_info_request_;
}
inline ::turms::client::model::proto::QueryResourceUploadInfoRequest*
TurmsRequest::mutable_query_resource_upload_info_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryResourceUploadInfoRequest* _msg =
        _internal_mutable_query_resource_upload_info_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_resource_upload_info_request)
    return _msg;
}

// .turms.client.model.proto.QueryMessageAttachmentInfosRequest
// query_message_attachment_infos_request = 1003;
inline bool TurmsRequest::has_query_message_attachment_infos_request() const {
    return kind_case() == kQueryMessageAttachmentInfosRequest;
}
inline bool TurmsRequest::_internal_has_query_message_attachment_infos_request() const {
    return kind_case() == kQueryMessageAttachmentInfosRequest;
}
inline void TurmsRequest::set_has_query_message_attachment_infos_request() {
    _impl_._oneof_case_[0] = kQueryMessageAttachmentInfosRequest;
}
inline ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
TurmsRequest::release_query_message_attachment_infos_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_message_attachment_infos_request)
    if (kind_case() == kQueryMessageAttachmentInfosRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_message_attachment_infos_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_message_attachment_infos_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryMessageAttachmentInfosRequest&
TurmsRequest::_internal_query_message_attachment_infos_request() const {
    return kind_case() == kQueryMessageAttachmentInfosRequest
               ? *_impl_.kind_.query_message_attachment_infos_request_
               : reinterpret_cast<
                     ::turms::client::model::proto::QueryMessageAttachmentInfosRequest&>(
                     ::turms::client::model::proto::
                         _QueryMessageAttachmentInfosRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryMessageAttachmentInfosRequest&
TurmsRequest::query_message_attachment_infos_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_message_attachment_infos_request)
    return _internal_query_message_attachment_infos_request();
}
inline ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
TurmsRequest::unsafe_arena_release_query_message_attachment_infos_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_message_attachment_infos_request)
    if (kind_case() == kQueryMessageAttachmentInfosRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_message_attachment_infos_request_;
        _impl_.kind_.query_message_attachment_infos_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_message_attachment_infos_request(
    ::turms::client::model::proto::QueryMessageAttachmentInfosRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_message_attachment_infos_request();
        _impl_.kind_.query_message_attachment_infos_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_message_attachment_infos_request)
}
inline ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
TurmsRequest::_internal_mutable_query_message_attachment_infos_request() {
    if (kind_case() != kQueryMessageAttachmentInfosRequest) {
        clear_kind();
        set_has_query_message_attachment_infos_request();
        _impl_.kind_.query_message_attachment_infos_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryMessageAttachmentInfosRequest>(GetArena());
    }
    return _impl_.kind_.query_message_attachment_infos_request_;
}
inline ::turms::client::model::proto::QueryMessageAttachmentInfosRequest*
TurmsRequest::mutable_query_message_attachment_infos_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryMessageAttachmentInfosRequest* _msg =
        _internal_mutable_query_message_attachment_infos_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_message_attachment_infos_request)
    return _msg;
}

// .turms.client.model.proto.UpdateMessageAttachmentInfoRequest
// update_message_attachment_info_request = 1004;
inline bool TurmsRequest::has_update_message_attachment_info_request() const {
    return kind_case() == kUpdateMessageAttachmentInfoRequest;
}
inline bool TurmsRequest::_internal_has_update_message_attachment_info_request() const {
    return kind_case() == kUpdateMessageAttachmentInfoRequest;
}
inline void TurmsRequest::set_has_update_message_attachment_info_request() {
    _impl_._oneof_case_[0] = kUpdateMessageAttachmentInfoRequest;
}
inline ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
TurmsRequest::release_update_message_attachment_info_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_message_attachment_info_request)
    if (kind_case() == kUpdateMessageAttachmentInfoRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_message_attachment_info_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_message_attachment_info_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest&
TurmsRequest::_internal_update_message_attachment_info_request() const {
    return kind_case() == kUpdateMessageAttachmentInfoRequest
               ? *_impl_.kind_.update_message_attachment_info_request_
               : reinterpret_cast<
                     ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest&>(
                     ::turms::client::model::proto::
                         _UpdateMessageAttachmentInfoRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest&
TurmsRequest::update_message_attachment_info_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_message_attachment_info_request)
    return _internal_update_message_attachment_info_request();
}
inline ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
TurmsRequest::unsafe_arena_release_update_message_attachment_info_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_message_attachment_info_request)
    if (kind_case() == kUpdateMessageAttachmentInfoRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_message_attachment_info_request_;
        _impl_.kind_.update_message_attachment_info_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_message_attachment_info_request(
    ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_message_attachment_info_request();
        _impl_.kind_.update_message_attachment_info_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_message_attachment_info_request)
}
inline ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
TurmsRequest::_internal_mutable_update_message_attachment_info_request() {
    if (kind_case() != kUpdateMessageAttachmentInfoRequest) {
        clear_kind();
        set_has_update_message_attachment_info_request();
        _impl_.kind_.update_message_attachment_info_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest>(GetArena());
    }
    return _impl_.kind_.update_message_attachment_info_request_;
}
inline ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest*
TurmsRequest::mutable_update_message_attachment_info_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateMessageAttachmentInfoRequest* _msg =
        _internal_mutable_update_message_attachment_info_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_message_attachment_info_request)
    return _msg;
}

// .turms.client.model.proto.DeleteConversationSettingsRequest delete_conversation_settings_request
// = 1100;
inline bool TurmsRequest::has_delete_conversation_settings_request() const {
    return kind_case() == kDeleteConversationSettingsRequest;
}
inline bool TurmsRequest::_internal_has_delete_conversation_settings_request() const {
    return kind_case() == kDeleteConversationSettingsRequest;
}
inline void TurmsRequest::set_has_delete_conversation_settings_request() {
    _impl_._oneof_case_[0] = kDeleteConversationSettingsRequest;
}
inline ::turms::client::model::proto::DeleteConversationSettingsRequest*
TurmsRequest::release_delete_conversation_settings_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_conversation_settings_request)
    if (kind_case() == kDeleteConversationSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_conversation_settings_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_conversation_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteConversationSettingsRequest&
TurmsRequest::_internal_delete_conversation_settings_request() const {
    return kind_case() == kDeleteConversationSettingsRequest
               ? *_impl_.kind_.delete_conversation_settings_request_
               : reinterpret_cast<
                     ::turms::client::model::proto::DeleteConversationSettingsRequest&>(
                     ::turms::client::model::proto::
                         _DeleteConversationSettingsRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteConversationSettingsRequest&
TurmsRequest::delete_conversation_settings_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_conversation_settings_request)
    return _internal_delete_conversation_settings_request();
}
inline ::turms::client::model::proto::DeleteConversationSettingsRequest*
TurmsRequest::unsafe_arena_release_delete_conversation_settings_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_conversation_settings_request)
    if (kind_case() == kDeleteConversationSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_conversation_settings_request_;
        _impl_.kind_.delete_conversation_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_conversation_settings_request(
    ::turms::client::model::proto::DeleteConversationSettingsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_conversation_settings_request();
        _impl_.kind_.delete_conversation_settings_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_conversation_settings_request)
}
inline ::turms::client::model::proto::DeleteConversationSettingsRequest*
TurmsRequest::_internal_mutable_delete_conversation_settings_request() {
    if (kind_case() != kDeleteConversationSettingsRequest) {
        clear_kind();
        set_has_delete_conversation_settings_request();
        _impl_.kind_.delete_conversation_settings_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteConversationSettingsRequest>(GetArena());
    }
    return _impl_.kind_.delete_conversation_settings_request_;
}
inline ::turms::client::model::proto::DeleteConversationSettingsRequest*
TurmsRequest::mutable_delete_conversation_settings_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteConversationSettingsRequest* _msg =
        _internal_mutable_delete_conversation_settings_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_conversation_settings_request)
    return _msg;
}

// .turms.client.model.proto.QueryConversationSettingsRequest query_conversation_settings_request =
// 1101;
inline bool TurmsRequest::has_query_conversation_settings_request() const {
    return kind_case() == kQueryConversationSettingsRequest;
}
inline bool TurmsRequest::_internal_has_query_conversation_settings_request() const {
    return kind_case() == kQueryConversationSettingsRequest;
}
inline void TurmsRequest::set_has_query_conversation_settings_request() {
    _impl_._oneof_case_[0] = kQueryConversationSettingsRequest;
}
inline ::turms::client::model::proto::QueryConversationSettingsRequest*
TurmsRequest::release_query_conversation_settings_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.query_conversation_settings_request)
    if (kind_case() == kQueryConversationSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_conversation_settings_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.query_conversation_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::QueryConversationSettingsRequest&
TurmsRequest::_internal_query_conversation_settings_request() const {
    return kind_case() == kQueryConversationSettingsRequest
               ? *_impl_.kind_.query_conversation_settings_request_
               : reinterpret_cast<::turms::client::model::proto::QueryConversationSettingsRequest&>(
                     ::turms::client::model::proto::
                         _QueryConversationSettingsRequest_default_instance_);
}
inline const ::turms::client::model::proto::QueryConversationSettingsRequest&
TurmsRequest::query_conversation_settings_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.query_conversation_settings_request)
    return _internal_query_conversation_settings_request();
}
inline ::turms::client::model::proto::QueryConversationSettingsRequest*
TurmsRequest::unsafe_arena_release_query_conversation_settings_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.query_conversation_settings_request)
    if (kind_case() == kQueryConversationSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.query_conversation_settings_request_;
        _impl_.kind_.query_conversation_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_query_conversation_settings_request(
    ::turms::client::model::proto::QueryConversationSettingsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_query_conversation_settings_request();
        _impl_.kind_.query_conversation_settings_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.query_conversation_settings_request)
}
inline ::turms::client::model::proto::QueryConversationSettingsRequest*
TurmsRequest::_internal_mutable_query_conversation_settings_request() {
    if (kind_case() != kQueryConversationSettingsRequest) {
        clear_kind();
        set_has_query_conversation_settings_request();
        _impl_.kind_.query_conversation_settings_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::QueryConversationSettingsRequest>(GetArena());
    }
    return _impl_.kind_.query_conversation_settings_request_;
}
inline ::turms::client::model::proto::QueryConversationSettingsRequest*
TurmsRequest::mutable_query_conversation_settings_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::QueryConversationSettingsRequest* _msg =
        _internal_mutable_query_conversation_settings_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.query_conversation_settings_request)
    return _msg;
}

// .turms.client.model.proto.UpdateConversationSettingsRequest update_conversation_settings_request
// = 1102;
inline bool TurmsRequest::has_update_conversation_settings_request() const {
    return kind_case() == kUpdateConversationSettingsRequest;
}
inline bool TurmsRequest::_internal_has_update_conversation_settings_request() const {
    return kind_case() == kUpdateConversationSettingsRequest;
}
inline void TurmsRequest::set_has_update_conversation_settings_request() {
    _impl_._oneof_case_[0] = kUpdateConversationSettingsRequest;
}
inline ::turms::client::model::proto::UpdateConversationSettingsRequest*
TurmsRequest::release_update_conversation_settings_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.update_conversation_settings_request)
    if (kind_case() == kUpdateConversationSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_conversation_settings_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.update_conversation_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UpdateConversationSettingsRequest&
TurmsRequest::_internal_update_conversation_settings_request() const {
    return kind_case() == kUpdateConversationSettingsRequest
               ? *_impl_.kind_.update_conversation_settings_request_
               : reinterpret_cast<
                     ::turms::client::model::proto::UpdateConversationSettingsRequest&>(
                     ::turms::client::model::proto::
                         _UpdateConversationSettingsRequest_default_instance_);
}
inline const ::turms::client::model::proto::UpdateConversationSettingsRequest&
TurmsRequest::update_conversation_settings_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.update_conversation_settings_request)
    return _internal_update_conversation_settings_request();
}
inline ::turms::client::model::proto::UpdateConversationSettingsRequest*
TurmsRequest::unsafe_arena_release_update_conversation_settings_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.update_conversation_settings_request)
    if (kind_case() == kUpdateConversationSettingsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.update_conversation_settings_request_;
        _impl_.kind_.update_conversation_settings_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_update_conversation_settings_request(
    ::turms::client::model::proto::UpdateConversationSettingsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_update_conversation_settings_request();
        _impl_.kind_.update_conversation_settings_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.update_conversation_settings_request)
}
inline ::turms::client::model::proto::UpdateConversationSettingsRequest*
TurmsRequest::_internal_mutable_update_conversation_settings_request() {
    if (kind_case() != kUpdateConversationSettingsRequest) {
        clear_kind();
        set_has_update_conversation_settings_request();
        _impl_.kind_.update_conversation_settings_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UpdateConversationSettingsRequest>(GetArena());
    }
    return _impl_.kind_.update_conversation_settings_request_;
}
inline ::turms::client::model::proto::UpdateConversationSettingsRequest*
TurmsRequest::mutable_update_conversation_settings_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UpdateConversationSettingsRequest* _msg =
        _internal_mutable_update_conversation_settings_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.update_conversation_settings_request)
    return _msg;
}

// .turms.client.model.proto.CreateMessageReactionsRequest create_message_reactions_request = 1200;
inline bool TurmsRequest::has_create_message_reactions_request() const {
    return kind_case() == kCreateMessageReactionsRequest;
}
inline bool TurmsRequest::_internal_has_create_message_reactions_request() const {
    return kind_case() == kCreateMessageReactionsRequest;
}
inline void TurmsRequest::set_has_create_message_reactions_request() {
    _impl_._oneof_case_[0] = kCreateMessageReactionsRequest;
}
inline ::turms::client::model::proto::CreateMessageReactionsRequest*
TurmsRequest::release_create_message_reactions_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.create_message_reactions_request)
    if (kind_case() == kCreateMessageReactionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_message_reactions_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.create_message_reactions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::CreateMessageReactionsRequest&
TurmsRequest::_internal_create_message_reactions_request() const {
    return kind_case() == kCreateMessageReactionsRequest
               ? *_impl_.kind_.create_message_reactions_request_
               : reinterpret_cast<::turms::client::model::proto::CreateMessageReactionsRequest&>(
                     ::turms::client::model::proto::
                         _CreateMessageReactionsRequest_default_instance_);
}
inline const ::turms::client::model::proto::CreateMessageReactionsRequest&
TurmsRequest::create_message_reactions_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.create_message_reactions_request)
    return _internal_create_message_reactions_request();
}
inline ::turms::client::model::proto::CreateMessageReactionsRequest*
TurmsRequest::unsafe_arena_release_create_message_reactions_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.create_message_reactions_request)
    if (kind_case() == kCreateMessageReactionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.create_message_reactions_request_;
        _impl_.kind_.create_message_reactions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_create_message_reactions_request(
    ::turms::client::model::proto::CreateMessageReactionsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_create_message_reactions_request();
        _impl_.kind_.create_message_reactions_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.create_message_reactions_request)
}
inline ::turms::client::model::proto::CreateMessageReactionsRequest*
TurmsRequest::_internal_mutable_create_message_reactions_request() {
    if (kind_case() != kCreateMessageReactionsRequest) {
        clear_kind();
        set_has_create_message_reactions_request();
        _impl_.kind_.create_message_reactions_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::CreateMessageReactionsRequest>(GetArena());
    }
    return _impl_.kind_.create_message_reactions_request_;
}
inline ::turms::client::model::proto::CreateMessageReactionsRequest*
TurmsRequest::mutable_create_message_reactions_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::CreateMessageReactionsRequest* _msg =
        _internal_mutable_create_message_reactions_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.create_message_reactions_request)
    return _msg;
}

// .turms.client.model.proto.DeleteMessageReactionsRequest delete_message_reactions_request = 1201;
inline bool TurmsRequest::has_delete_message_reactions_request() const {
    return kind_case() == kDeleteMessageReactionsRequest;
}
inline bool TurmsRequest::_internal_has_delete_message_reactions_request() const {
    return kind_case() == kDeleteMessageReactionsRequest;
}
inline void TurmsRequest::set_has_delete_message_reactions_request() {
    _impl_._oneof_case_[0] = kDeleteMessageReactionsRequest;
}
inline ::turms::client::model::proto::DeleteMessageReactionsRequest*
TurmsRequest::release_delete_message_reactions_request() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsRequest.delete_message_reactions_request)
    if (kind_case() == kDeleteMessageReactionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_message_reactions_request_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.delete_message_reactions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::DeleteMessageReactionsRequest&
TurmsRequest::_internal_delete_message_reactions_request() const {
    return kind_case() == kDeleteMessageReactionsRequest
               ? *_impl_.kind_.delete_message_reactions_request_
               : reinterpret_cast<::turms::client::model::proto::DeleteMessageReactionsRequest&>(
                     ::turms::client::model::proto::
                         _DeleteMessageReactionsRequest_default_instance_);
}
inline const ::turms::client::model::proto::DeleteMessageReactionsRequest&
TurmsRequest::delete_message_reactions_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsRequest.delete_message_reactions_request)
    return _internal_delete_message_reactions_request();
}
inline ::turms::client::model::proto::DeleteMessageReactionsRequest*
TurmsRequest::unsafe_arena_release_delete_message_reactions_request() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsRequest.delete_message_reactions_request)
    if (kind_case() == kDeleteMessageReactionsRequest) {
        clear_has_kind();
        auto* temp = _impl_.kind_.delete_message_reactions_request_;
        _impl_.kind_.delete_message_reactions_request_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsRequest::unsafe_arena_set_allocated_delete_message_reactions_request(
    ::turms::client::model::proto::DeleteMessageReactionsRequest* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_delete_message_reactions_request();
        _impl_.kind_.delete_message_reactions_request_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsRequest.delete_message_reactions_request)
}
inline ::turms::client::model::proto::DeleteMessageReactionsRequest*
TurmsRequest::_internal_mutable_delete_message_reactions_request() {
    if (kind_case() != kDeleteMessageReactionsRequest) {
        clear_kind();
        set_has_delete_message_reactions_request();
        _impl_.kind_.delete_message_reactions_request_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::DeleteMessageReactionsRequest>(GetArena());
    }
    return _impl_.kind_.delete_message_reactions_request_;
}
inline ::turms::client::model::proto::DeleteMessageReactionsRequest*
TurmsRequest::mutable_delete_message_reactions_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::DeleteMessageReactionsRequest* _msg =
        _internal_mutable_delete_message_reactions_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsRequest.delete_message_reactions_request)
    return _msg;
}

inline bool TurmsRequest::has_kind() const {
    return kind_case() != KIND_NOT_SET;
}
inline void TurmsRequest::clear_has_kind() {
    _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline TurmsRequest::KindCase TurmsRequest::kind_case() const {
    return TurmsRequest::KindCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_request_2fturms_5frequest_2eproto_2epb_2eh
