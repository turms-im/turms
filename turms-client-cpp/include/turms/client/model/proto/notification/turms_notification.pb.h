// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: notification/turms_notification.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_notification_2fturms_5fnotification_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_notification_2fturms_5fnotification_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "turms/client/model/proto/model/common/longs_with_version.pb.h"
#include "turms/client/model/proto/model/common/strings_with_version.pb.h"
#include "turms/client/model/proto/model/common/value.pb.h"
#include "turms/client/model/proto/model/conference/meetings.pb.h"
#include "turms/client/model/proto/model/conversation/conversation_settings_list.pb.h"
#include "turms/client/model/proto/model/conversation/conversations.pb.h"
#include "turms/client/model/proto/model/group/group_invitations_with_version.pb.h"
#include "turms/client/model/proto/model/group/group_join_questions_answer_result.pb.h"
#include "turms/client/model/proto/model/group/group_join_questions_with_version.pb.h"
#include "turms/client/model/proto/model/group/group_join_requests_with_version.pb.h"
#include "turms/client/model/proto/model/group/group_members_with_version.pb.h"
#include "turms/client/model/proto/model/group/groups_with_version.pb.h"
#include "turms/client/model/proto/model/message/messages.pb.h"
#include "turms/client/model/proto/model/message/messages_with_total_list.pb.h"
#include "turms/client/model/proto/model/storage/storage_resource_infos.pb.h"
#include "turms/client/model/proto/model/user/nearby_users.pb.h"
#include "turms/client/model/proto/model/user/user_friend_requests_with_version.pb.h"
#include "turms/client/model/proto/model/user/user_infos_with_version.pb.h"
#include "turms/client/model/proto/model/user/user_online_statuses.pb.h"
#include "turms/client/model/proto/model/user/user_relationship_groups_with_version.pb.h"
#include "turms/client/model/proto/model/user/user_relationships_with_version.pb.h"
#include "turms/client/model/proto/model/user/user_session.pb.h"
#include "turms/client/model/proto/model/user/user_settings.pb.h"
#include "turms/client/model/proto/request/turms_request.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_notification_2fturms_5fnotification_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_notification_2fturms_5fnotification_2eproto {
    static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class TurmsNotification;
struct TurmsNotificationDefaultTypeInternal;
extern TurmsNotificationDefaultTypeInternal _TurmsNotification_default_instance_;
class TurmsNotification_Data;
struct TurmsNotification_DataDefaultTypeInternal;
extern TurmsNotification_DataDefaultTypeInternal _TurmsNotification_Data_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================

// -------------------------------------------------------------------

class TurmsNotification_Data final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:turms.client.model.proto.TurmsNotification.Data) */ {
   public:
    inline TurmsNotification_Data()
        : TurmsNotification_Data(nullptr) {
    }
    ~TurmsNotification_Data() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR TurmsNotification_Data(
        ::google::protobuf::internal::ConstantInitialized);

    inline TurmsNotification_Data(const TurmsNotification_Data& from)
        : TurmsNotification_Data(nullptr, from) {
    }
    inline TurmsNotification_Data(TurmsNotification_Data&& from) noexcept
        : TurmsNotification_Data(nullptr, std::move(from)) {
    }
    inline TurmsNotification_Data& operator=(const TurmsNotification_Data& from) {
        CopyFrom(from);
        return *this;
    }
    inline TurmsNotification_Data& operator=(TurmsNotification_Data&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const std::string& unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<std::string>(
            ::google::protobuf::internal::GetEmptyString);
    }
    inline std::string* mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<std::string>();
    }

    static const TurmsNotification_Data& default_instance() {
        return *internal_default_instance();
    }
    enum KindCase {
        kLong = 1,
        kString = 2,
        kLongsWithVersion = 3,
        kStringsWithVersion = 4,
        kConversations = 5,
        kMessages = 6,
        kMessagesWithTotalList = 7,
        kUserSession = 8,
        kUserInfosWithVersion = 9,
        kUserOnlineStatuses = 10,
        kUserFriendRequestsWithVersion = 11,
        kUserRelationshipGroupsWithVersion = 12,
        kUserRelationshipsWithVersion = 13,
        kNearbyUsers = 14,
        kGroupInvitationsWithVersion = 15,
        kGroupJoinQuestionAnswerResult = 16,
        kGroupJoinRequestsWithVersion = 17,
        kGroupJoinQuestionsWithVersion = 18,
        kGroupMembersWithVersion = 19,
        kGroupsWithVersion = 20,
        kMeetings = 40,
        kStorageResourceInfos = 50,
        kConversationSettingsList = 200,
        kUserSettings = 400,
        KIND_NOT_SET = 0,
    };
    static inline const TurmsNotification_Data* internal_default_instance() {
        return reinterpret_cast<const TurmsNotification_Data*>(
            &_TurmsNotification_Data_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;
    friend void swap(TurmsNotification_Data& a, TurmsNotification_Data& b) {
        a.Swap(&b);
    }
    inline void Swap(TurmsNotification_Data* other) {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(TurmsNotification_Data* other) {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    TurmsNotification_Data* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::MessageLite::DefaultConstruct<TurmsNotification_Data>(arena);
    }
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) final;
    void CopyFrom(const TurmsNotification_Data& from);
    void MergeFrom(const TurmsNotification_Data& from);
    bool IsInitialized() const {
        return true;
    }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(::uint8_t* target,
                                  ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const {
        return _impl_._cached_size_.Get();
    }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(TurmsNotification_Data* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() {
        return "turms.client.model.proto.TurmsNotification.Data";
    }

   protected:
    explicit TurmsNotification_Data(::google::protobuf::Arena* arena);
    TurmsNotification_Data(::google::protobuf::Arena* arena, const TurmsNotification_Data& from);
    TurmsNotification_Data(::google::protobuf::Arena* arena, TurmsNotification_Data&& from) noexcept
        : TurmsNotification_Data(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::MessageLite::ClassData* GetClassData() const final;

   public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
        kLongFieldNumber = 1,
        kStringFieldNumber = 2,
        kLongsWithVersionFieldNumber = 3,
        kStringsWithVersionFieldNumber = 4,
        kConversationsFieldNumber = 5,
        kMessagesFieldNumber = 6,
        kMessagesWithTotalListFieldNumber = 7,
        kUserSessionFieldNumber = 8,
        kUserInfosWithVersionFieldNumber = 9,
        kUserOnlineStatusesFieldNumber = 10,
        kUserFriendRequestsWithVersionFieldNumber = 11,
        kUserRelationshipGroupsWithVersionFieldNumber = 12,
        kUserRelationshipsWithVersionFieldNumber = 13,
        kNearbyUsersFieldNumber = 14,
        kGroupInvitationsWithVersionFieldNumber = 15,
        kGroupJoinQuestionAnswerResultFieldNumber = 16,
        kGroupJoinRequestsWithVersionFieldNumber = 17,
        kGroupJoinQuestionsWithVersionFieldNumber = 18,
        kGroupMembersWithVersionFieldNumber = 19,
        kGroupsWithVersionFieldNumber = 20,
        kMeetingsFieldNumber = 40,
        kStorageResourceInfosFieldNumber = 50,
        kConversationSettingsListFieldNumber = 200,
        kUserSettingsFieldNumber = 400,
    };
    // int64 long = 1;
    bool has_long_() const;
    void clear_long_();
    ::int64_t long_() const;
    void set_long_(::int64_t value);

   private:
    ::int64_t _internal_long_() const;
    void _internal_set_long_(::int64_t value);

   public:
    // string string = 2;
    bool has_string() const;
    void clear_string();
    const std::string& string() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_string(Arg_&& arg, Args_... args);
    std::string* mutable_string();
    PROTOBUF_NODISCARD std::string* release_string();
    void set_allocated_string(std::string* value);

   private:
    const std::string& _internal_string() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(const std::string& value);
    std::string* _internal_mutable_string();

   public:
    // .turms.client.model.proto.LongsWithVersion longs_with_version = 3;
    bool has_longs_with_version() const;

   private:
    bool _internal_has_longs_with_version() const;

   public:
    void clear_longs_with_version();
    const ::turms::client::model::proto::LongsWithVersion& longs_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::LongsWithVersion*
    release_longs_with_version();
    ::turms::client::model::proto::LongsWithVersion* mutable_longs_with_version();
    void set_allocated_longs_with_version(::turms::client::model::proto::LongsWithVersion* value);
    void unsafe_arena_set_allocated_longs_with_version(
        ::turms::client::model::proto::LongsWithVersion* value);
    ::turms::client::model::proto::LongsWithVersion* unsafe_arena_release_longs_with_version();

   private:
    const ::turms::client::model::proto::LongsWithVersion& _internal_longs_with_version() const;
    ::turms::client::model::proto::LongsWithVersion* _internal_mutable_longs_with_version();

   public:
    // .turms.client.model.proto.StringsWithVersion strings_with_version = 4;
    bool has_strings_with_version() const;

   private:
    bool _internal_has_strings_with_version() const;

   public:
    void clear_strings_with_version();
    const ::turms::client::model::proto::StringsWithVersion& strings_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::StringsWithVersion*
    release_strings_with_version();
    ::turms::client::model::proto::StringsWithVersion* mutable_strings_with_version();
    void set_allocated_strings_with_version(
        ::turms::client::model::proto::StringsWithVersion* value);
    void unsafe_arena_set_allocated_strings_with_version(
        ::turms::client::model::proto::StringsWithVersion* value);
    ::turms::client::model::proto::StringsWithVersion* unsafe_arena_release_strings_with_version();

   private:
    const ::turms::client::model::proto::StringsWithVersion& _internal_strings_with_version() const;
    ::turms::client::model::proto::StringsWithVersion* _internal_mutable_strings_with_version();

   public:
    // .turms.client.model.proto.Conversations conversations = 5;
    bool has_conversations() const;

   private:
    bool _internal_has_conversations() const;

   public:
    void clear_conversations();
    const ::turms::client::model::proto::Conversations& conversations() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::Conversations* release_conversations();
    ::turms::client::model::proto::Conversations* mutable_conversations();
    void set_allocated_conversations(::turms::client::model::proto::Conversations* value);
    void unsafe_arena_set_allocated_conversations(
        ::turms::client::model::proto::Conversations* value);
    ::turms::client::model::proto::Conversations* unsafe_arena_release_conversations();

   private:
    const ::turms::client::model::proto::Conversations& _internal_conversations() const;
    ::turms::client::model::proto::Conversations* _internal_mutable_conversations();

   public:
    // .turms.client.model.proto.Messages messages = 6;
    bool has_messages() const;

   private:
    bool _internal_has_messages() const;

   public:
    void clear_messages();
    const ::turms::client::model::proto::Messages& messages() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::Messages* release_messages();
    ::turms::client::model::proto::Messages* mutable_messages();
    void set_allocated_messages(::turms::client::model::proto::Messages* value);
    void unsafe_arena_set_allocated_messages(::turms::client::model::proto::Messages* value);
    ::turms::client::model::proto::Messages* unsafe_arena_release_messages();

   private:
    const ::turms::client::model::proto::Messages& _internal_messages() const;
    ::turms::client::model::proto::Messages* _internal_mutable_messages();

   public:
    // .turms.client.model.proto.MessagesWithTotalList messages_with_total_list = 7;
    bool has_messages_with_total_list() const;

   private:
    bool _internal_has_messages_with_total_list() const;

   public:
    void clear_messages_with_total_list();
    const ::turms::client::model::proto::MessagesWithTotalList& messages_with_total_list() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::MessagesWithTotalList*
    release_messages_with_total_list();
    ::turms::client::model::proto::MessagesWithTotalList* mutable_messages_with_total_list();
    void set_allocated_messages_with_total_list(
        ::turms::client::model::proto::MessagesWithTotalList* value);
    void unsafe_arena_set_allocated_messages_with_total_list(
        ::turms::client::model::proto::MessagesWithTotalList* value);
    ::turms::client::model::proto::MessagesWithTotalList*
    unsafe_arena_release_messages_with_total_list();

   private:
    const ::turms::client::model::proto::MessagesWithTotalList& _internal_messages_with_total_list()
        const;
    ::turms::client::model::proto::MessagesWithTotalList*
    _internal_mutable_messages_with_total_list();

   public:
    // .turms.client.model.proto.UserSession user_session = 8;
    bool has_user_session() const;

   private:
    bool _internal_has_user_session() const;

   public:
    void clear_user_session();
    const ::turms::client::model::proto::UserSession& user_session() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UserSession* release_user_session();
    ::turms::client::model::proto::UserSession* mutable_user_session();
    void set_allocated_user_session(::turms::client::model::proto::UserSession* value);
    void unsafe_arena_set_allocated_user_session(::turms::client::model::proto::UserSession* value);
    ::turms::client::model::proto::UserSession* unsafe_arena_release_user_session();

   private:
    const ::turms::client::model::proto::UserSession& _internal_user_session() const;
    ::turms::client::model::proto::UserSession* _internal_mutable_user_session();

   public:
    // .turms.client.model.proto.UserInfosWithVersion user_infos_with_version = 9;
    bool has_user_infos_with_version() const;

   private:
    bool _internal_has_user_infos_with_version() const;

   public:
    void clear_user_infos_with_version();
    const ::turms::client::model::proto::UserInfosWithVersion& user_infos_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UserInfosWithVersion*
    release_user_infos_with_version();
    ::turms::client::model::proto::UserInfosWithVersion* mutable_user_infos_with_version();
    void set_allocated_user_infos_with_version(
        ::turms::client::model::proto::UserInfosWithVersion* value);
    void unsafe_arena_set_allocated_user_infos_with_version(
        ::turms::client::model::proto::UserInfosWithVersion* value);
    ::turms::client::model::proto::UserInfosWithVersion*
    unsafe_arena_release_user_infos_with_version();

   private:
    const ::turms::client::model::proto::UserInfosWithVersion& _internal_user_infos_with_version()
        const;
    ::turms::client::model::proto::UserInfosWithVersion*
    _internal_mutable_user_infos_with_version();

   public:
    // .turms.client.model.proto.UserOnlineStatuses user_online_statuses = 10;
    bool has_user_online_statuses() const;

   private:
    bool _internal_has_user_online_statuses() const;

   public:
    void clear_user_online_statuses();
    const ::turms::client::model::proto::UserOnlineStatuses& user_online_statuses() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UserOnlineStatuses*
    release_user_online_statuses();
    ::turms::client::model::proto::UserOnlineStatuses* mutable_user_online_statuses();
    void set_allocated_user_online_statuses(
        ::turms::client::model::proto::UserOnlineStatuses* value);
    void unsafe_arena_set_allocated_user_online_statuses(
        ::turms::client::model::proto::UserOnlineStatuses* value);
    ::turms::client::model::proto::UserOnlineStatuses* unsafe_arena_release_user_online_statuses();

   private:
    const ::turms::client::model::proto::UserOnlineStatuses& _internal_user_online_statuses() const;
    ::turms::client::model::proto::UserOnlineStatuses* _internal_mutable_user_online_statuses();

   public:
    // .turms.client.model.proto.UserFriendRequestsWithVersion user_friend_requests_with_version =
    // 11;
    bool has_user_friend_requests_with_version() const;

   private:
    bool _internal_has_user_friend_requests_with_version() const;

   public:
    void clear_user_friend_requests_with_version();
    const ::turms::client::model::proto::UserFriendRequestsWithVersion&
    user_friend_requests_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UserFriendRequestsWithVersion*
    release_user_friend_requests_with_version();
    ::turms::client::model::proto::UserFriendRequestsWithVersion*
    mutable_user_friend_requests_with_version();
    void set_allocated_user_friend_requests_with_version(
        ::turms::client::model::proto::UserFriendRequestsWithVersion* value);
    void unsafe_arena_set_allocated_user_friend_requests_with_version(
        ::turms::client::model::proto::UserFriendRequestsWithVersion* value);
    ::turms::client::model::proto::UserFriendRequestsWithVersion*
    unsafe_arena_release_user_friend_requests_with_version();

   private:
    const ::turms::client::model::proto::UserFriendRequestsWithVersion&
    _internal_user_friend_requests_with_version() const;
    ::turms::client::model::proto::UserFriendRequestsWithVersion*
    _internal_mutable_user_friend_requests_with_version();

   public:
    // .turms.client.model.proto.UserRelationshipGroupsWithVersion
    // user_relationship_groups_with_version = 12;
    bool has_user_relationship_groups_with_version() const;

   private:
    bool _internal_has_user_relationship_groups_with_version() const;

   public:
    void clear_user_relationship_groups_with_version();
    const ::turms::client::model::proto::UserRelationshipGroupsWithVersion&
    user_relationship_groups_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
    release_user_relationship_groups_with_version();
    ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
    mutable_user_relationship_groups_with_version();
    void set_allocated_user_relationship_groups_with_version(
        ::turms::client::model::proto::UserRelationshipGroupsWithVersion* value);
    void unsafe_arena_set_allocated_user_relationship_groups_with_version(
        ::turms::client::model::proto::UserRelationshipGroupsWithVersion* value);
    ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
    unsafe_arena_release_user_relationship_groups_with_version();

   private:
    const ::turms::client::model::proto::UserRelationshipGroupsWithVersion&
    _internal_user_relationship_groups_with_version() const;
    ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
    _internal_mutable_user_relationship_groups_with_version();

   public:
    // .turms.client.model.proto.UserRelationshipsWithVersion user_relationships_with_version = 13;
    bool has_user_relationships_with_version() const;

   private:
    bool _internal_has_user_relationships_with_version() const;

   public:
    void clear_user_relationships_with_version();
    const ::turms::client::model::proto::UserRelationshipsWithVersion&
    user_relationships_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UserRelationshipsWithVersion*
    release_user_relationships_with_version();
    ::turms::client::model::proto::UserRelationshipsWithVersion*
    mutable_user_relationships_with_version();
    void set_allocated_user_relationships_with_version(
        ::turms::client::model::proto::UserRelationshipsWithVersion* value);
    void unsafe_arena_set_allocated_user_relationships_with_version(
        ::turms::client::model::proto::UserRelationshipsWithVersion* value);
    ::turms::client::model::proto::UserRelationshipsWithVersion*
    unsafe_arena_release_user_relationships_with_version();

   private:
    const ::turms::client::model::proto::UserRelationshipsWithVersion&
    _internal_user_relationships_with_version() const;
    ::turms::client::model::proto::UserRelationshipsWithVersion*
    _internal_mutable_user_relationships_with_version();

   public:
    // .turms.client.model.proto.NearbyUsers nearby_users = 14;
    bool has_nearby_users() const;

   private:
    bool _internal_has_nearby_users() const;

   public:
    void clear_nearby_users();
    const ::turms::client::model::proto::NearbyUsers& nearby_users() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::NearbyUsers* release_nearby_users();
    ::turms::client::model::proto::NearbyUsers* mutable_nearby_users();
    void set_allocated_nearby_users(::turms::client::model::proto::NearbyUsers* value);
    void unsafe_arena_set_allocated_nearby_users(::turms::client::model::proto::NearbyUsers* value);
    ::turms::client::model::proto::NearbyUsers* unsafe_arena_release_nearby_users();

   private:
    const ::turms::client::model::proto::NearbyUsers& _internal_nearby_users() const;
    ::turms::client::model::proto::NearbyUsers* _internal_mutable_nearby_users();

   public:
    // .turms.client.model.proto.GroupInvitationsWithVersion group_invitations_with_version = 15;
    bool has_group_invitations_with_version() const;

   private:
    bool _internal_has_group_invitations_with_version() const;

   public:
    void clear_group_invitations_with_version();
    const ::turms::client::model::proto::GroupInvitationsWithVersion&
    group_invitations_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::GroupInvitationsWithVersion*
    release_group_invitations_with_version();
    ::turms::client::model::proto::GroupInvitationsWithVersion*
    mutable_group_invitations_with_version();
    void set_allocated_group_invitations_with_version(
        ::turms::client::model::proto::GroupInvitationsWithVersion* value);
    void unsafe_arena_set_allocated_group_invitations_with_version(
        ::turms::client::model::proto::GroupInvitationsWithVersion* value);
    ::turms::client::model::proto::GroupInvitationsWithVersion*
    unsafe_arena_release_group_invitations_with_version();

   private:
    const ::turms::client::model::proto::GroupInvitationsWithVersion&
    _internal_group_invitations_with_version() const;
    ::turms::client::model::proto::GroupInvitationsWithVersion*
    _internal_mutable_group_invitations_with_version();

   public:
    // .turms.client.model.proto.GroupJoinQuestionsAnswerResult group_join_question_answer_result =
    // 16;
    bool has_group_join_question_answer_result() const;

   private:
    bool _internal_has_group_join_question_answer_result() const;

   public:
    void clear_group_join_question_answer_result();
    const ::turms::client::model::proto::GroupJoinQuestionsAnswerResult&
    group_join_question_answer_result() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
    release_group_join_question_answer_result();
    ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
    mutable_group_join_question_answer_result();
    void set_allocated_group_join_question_answer_result(
        ::turms::client::model::proto::GroupJoinQuestionsAnswerResult* value);
    void unsafe_arena_set_allocated_group_join_question_answer_result(
        ::turms::client::model::proto::GroupJoinQuestionsAnswerResult* value);
    ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
    unsafe_arena_release_group_join_question_answer_result();

   private:
    const ::turms::client::model::proto::GroupJoinQuestionsAnswerResult&
    _internal_group_join_question_answer_result() const;
    ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
    _internal_mutable_group_join_question_answer_result();

   public:
    // .turms.client.model.proto.GroupJoinRequestsWithVersion group_join_requests_with_version = 17;
    bool has_group_join_requests_with_version() const;

   private:
    bool _internal_has_group_join_requests_with_version() const;

   public:
    void clear_group_join_requests_with_version();
    const ::turms::client::model::proto::GroupJoinRequestsWithVersion&
    group_join_requests_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::GroupJoinRequestsWithVersion*
    release_group_join_requests_with_version();
    ::turms::client::model::proto::GroupJoinRequestsWithVersion*
    mutable_group_join_requests_with_version();
    void set_allocated_group_join_requests_with_version(
        ::turms::client::model::proto::GroupJoinRequestsWithVersion* value);
    void unsafe_arena_set_allocated_group_join_requests_with_version(
        ::turms::client::model::proto::GroupJoinRequestsWithVersion* value);
    ::turms::client::model::proto::GroupJoinRequestsWithVersion*
    unsafe_arena_release_group_join_requests_with_version();

   private:
    const ::turms::client::model::proto::GroupJoinRequestsWithVersion&
    _internal_group_join_requests_with_version() const;
    ::turms::client::model::proto::GroupJoinRequestsWithVersion*
    _internal_mutable_group_join_requests_with_version();

   public:
    // .turms.client.model.proto.GroupJoinQuestionsWithVersion group_join_questions_with_version =
    // 18;
    bool has_group_join_questions_with_version() const;

   private:
    bool _internal_has_group_join_questions_with_version() const;

   public:
    void clear_group_join_questions_with_version();
    const ::turms::client::model::proto::GroupJoinQuestionsWithVersion&
    group_join_questions_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
    release_group_join_questions_with_version();
    ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
    mutable_group_join_questions_with_version();
    void set_allocated_group_join_questions_with_version(
        ::turms::client::model::proto::GroupJoinQuestionsWithVersion* value);
    void unsafe_arena_set_allocated_group_join_questions_with_version(
        ::turms::client::model::proto::GroupJoinQuestionsWithVersion* value);
    ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
    unsafe_arena_release_group_join_questions_with_version();

   private:
    const ::turms::client::model::proto::GroupJoinQuestionsWithVersion&
    _internal_group_join_questions_with_version() const;
    ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
    _internal_mutable_group_join_questions_with_version();

   public:
    // .turms.client.model.proto.GroupMembersWithVersion group_members_with_version = 19;
    bool has_group_members_with_version() const;

   private:
    bool _internal_has_group_members_with_version() const;

   public:
    void clear_group_members_with_version();
    const ::turms::client::model::proto::GroupMembersWithVersion& group_members_with_version()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::GroupMembersWithVersion*
    release_group_members_with_version();
    ::turms::client::model::proto::GroupMembersWithVersion* mutable_group_members_with_version();
    void set_allocated_group_members_with_version(
        ::turms::client::model::proto::GroupMembersWithVersion* value);
    void unsafe_arena_set_allocated_group_members_with_version(
        ::turms::client::model::proto::GroupMembersWithVersion* value);
    ::turms::client::model::proto::GroupMembersWithVersion*
    unsafe_arena_release_group_members_with_version();

   private:
    const ::turms::client::model::proto::GroupMembersWithVersion&
    _internal_group_members_with_version() const;
    ::turms::client::model::proto::GroupMembersWithVersion*
    _internal_mutable_group_members_with_version();

   public:
    // .turms.client.model.proto.GroupsWithVersion groups_with_version = 20;
    bool has_groups_with_version() const;

   private:
    bool _internal_has_groups_with_version() const;

   public:
    void clear_groups_with_version();
    const ::turms::client::model::proto::GroupsWithVersion& groups_with_version() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::GroupsWithVersion*
    release_groups_with_version();
    ::turms::client::model::proto::GroupsWithVersion* mutable_groups_with_version();
    void set_allocated_groups_with_version(::turms::client::model::proto::GroupsWithVersion* value);
    void unsafe_arena_set_allocated_groups_with_version(
        ::turms::client::model::proto::GroupsWithVersion* value);
    ::turms::client::model::proto::GroupsWithVersion* unsafe_arena_release_groups_with_version();

   private:
    const ::turms::client::model::proto::GroupsWithVersion& _internal_groups_with_version() const;
    ::turms::client::model::proto::GroupsWithVersion* _internal_mutable_groups_with_version();

   public:
    // .turms.client.model.proto.Meetings meetings = 40;
    bool has_meetings() const;

   private:
    bool _internal_has_meetings() const;

   public:
    void clear_meetings();
    const ::turms::client::model::proto::Meetings& meetings() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::Meetings* release_meetings();
    ::turms::client::model::proto::Meetings* mutable_meetings();
    void set_allocated_meetings(::turms::client::model::proto::Meetings* value);
    void unsafe_arena_set_allocated_meetings(::turms::client::model::proto::Meetings* value);
    ::turms::client::model::proto::Meetings* unsafe_arena_release_meetings();

   private:
    const ::turms::client::model::proto::Meetings& _internal_meetings() const;
    ::turms::client::model::proto::Meetings* _internal_mutable_meetings();

   public:
    // .turms.client.model.proto.StorageResourceInfos storage_resource_infos = 50;
    bool has_storage_resource_infos() const;

   private:
    bool _internal_has_storage_resource_infos() const;

   public:
    void clear_storage_resource_infos();
    const ::turms::client::model::proto::StorageResourceInfos& storage_resource_infos() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::StorageResourceInfos*
    release_storage_resource_infos();
    ::turms::client::model::proto::StorageResourceInfos* mutable_storage_resource_infos();
    void set_allocated_storage_resource_infos(
        ::turms::client::model::proto::StorageResourceInfos* value);
    void unsafe_arena_set_allocated_storage_resource_infos(
        ::turms::client::model::proto::StorageResourceInfos* value);
    ::turms::client::model::proto::StorageResourceInfos*
    unsafe_arena_release_storage_resource_infos();

   private:
    const ::turms::client::model::proto::StorageResourceInfos& _internal_storage_resource_infos()
        const;
    ::turms::client::model::proto::StorageResourceInfos* _internal_mutable_storage_resource_infos();

   public:
    // .turms.client.model.proto.ConversationSettingsList conversation_settings_list = 200;
    bool has_conversation_settings_list() const;

   private:
    bool _internal_has_conversation_settings_list() const;

   public:
    void clear_conversation_settings_list();
    const ::turms::client::model::proto::ConversationSettingsList& conversation_settings_list()
        const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::ConversationSettingsList*
    release_conversation_settings_list();
    ::turms::client::model::proto::ConversationSettingsList* mutable_conversation_settings_list();
    void set_allocated_conversation_settings_list(
        ::turms::client::model::proto::ConversationSettingsList* value);
    void unsafe_arena_set_allocated_conversation_settings_list(
        ::turms::client::model::proto::ConversationSettingsList* value);
    ::turms::client::model::proto::ConversationSettingsList*
    unsafe_arena_release_conversation_settings_list();

   private:
    const ::turms::client::model::proto::ConversationSettingsList&
    _internal_conversation_settings_list() const;
    ::turms::client::model::proto::ConversationSettingsList*
    _internal_mutable_conversation_settings_list();

   public:
    // .turms.client.model.proto.UserSettings user_settings = 400;
    bool has_user_settings() const;

   private:
    bool _internal_has_user_settings() const;

   public:
    void clear_user_settings();
    const ::turms::client::model::proto::UserSettings& user_settings() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::UserSettings* release_user_settings();
    ::turms::client::model::proto::UserSettings* mutable_user_settings();
    void set_allocated_user_settings(::turms::client::model::proto::UserSettings* value);
    void unsafe_arena_set_allocated_user_settings(
        ::turms::client::model::proto::UserSettings* value);
    ::turms::client::model::proto::UserSettings* unsafe_arena_release_user_settings();

   private:
    const ::turms::client::model::proto::UserSettings& _internal_user_settings() const;
    ::turms::client::model::proto::UserSettings* _internal_mutable_user_settings();

   public:
    void clear_kind();
    KindCase kind_case() const;
    // @@protoc_insertion_point(class_scope:turms.client.model.proto.TurmsNotification.Data)
   private:
    class _Internal;
    void set_has_long_();
    void set_has_string();
    void set_has_longs_with_version();
    void set_has_strings_with_version();
    void set_has_conversations();
    void set_has_messages();
    void set_has_messages_with_total_list();
    void set_has_user_session();
    void set_has_user_infos_with_version();
    void set_has_user_online_statuses();
    void set_has_user_friend_requests_with_version();
    void set_has_user_relationship_groups_with_version();
    void set_has_user_relationships_with_version();
    void set_has_nearby_users();
    void set_has_group_invitations_with_version();
    void set_has_group_join_question_answer_result();
    void set_has_group_join_requests_with_version();
    void set_has_group_join_questions_with_version();
    void set_has_group_members_with_version();
    void set_has_groups_with_version();
    void set_has_meetings();
    void set_has_storage_resource_infos();
    void set_has_conversation_settings_list();
    void set_has_user_settings();
    inline bool has_kind() const;
    inline void clear_has_kind();
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 24, 22, 86, 17> _table_;

    static constexpr const void* _raw_default_instance_ =
        &_TurmsNotification_Data_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
        inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena,
                              const Impl_& from,
                              const TurmsNotification_Data& from_msg);
        union KindUnion {
            constexpr KindUnion()
                : _constinit_{} {
            }
            ::google::protobuf::internal::ConstantInitialized _constinit_;
            ::int64_t long__;
            ::google::protobuf::internal::ArenaStringPtr string_;
            ::turms::client::model::proto::LongsWithVersion* longs_with_version_;
            ::turms::client::model::proto::StringsWithVersion* strings_with_version_;
            ::turms::client::model::proto::Conversations* conversations_;
            ::turms::client::model::proto::Messages* messages_;
            ::turms::client::model::proto::MessagesWithTotalList* messages_with_total_list_;
            ::turms::client::model::proto::UserSession* user_session_;
            ::turms::client::model::proto::UserInfosWithVersion* user_infos_with_version_;
            ::turms::client::model::proto::UserOnlineStatuses* user_online_statuses_;
            ::turms::client::model::proto::UserFriendRequestsWithVersion*
                user_friend_requests_with_version_;
            ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
                user_relationship_groups_with_version_;
            ::turms::client::model::proto::UserRelationshipsWithVersion*
                user_relationships_with_version_;
            ::turms::client::model::proto::NearbyUsers* nearby_users_;
            ::turms::client::model::proto::GroupInvitationsWithVersion*
                group_invitations_with_version_;
            ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
                group_join_question_answer_result_;
            ::turms::client::model::proto::GroupJoinRequestsWithVersion*
                group_join_requests_with_version_;
            ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
                group_join_questions_with_version_;
            ::turms::client::model::proto::GroupMembersWithVersion* group_members_with_version_;
            ::turms::client::model::proto::GroupsWithVersion* groups_with_version_;
            ::turms::client::model::proto::Meetings* meetings_;
            ::turms::client::model::proto::StorageResourceInfos* storage_resource_infos_;
            ::turms::client::model::proto::ConversationSettingsList* conversation_settings_list_;
            ::turms::client::model::proto::UserSettings* user_settings_;
        } kind_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        ::uint32_t _oneof_case_[1];
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_notification_2fturms_5fnotification_2eproto;
};
// -------------------------------------------------------------------

class TurmsNotification final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:turms.client.model.proto.TurmsNotification) */ {
   public:
    inline TurmsNotification()
        : TurmsNotification(nullptr) {
    }
    ~TurmsNotification() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR TurmsNotification(
        ::google::protobuf::internal::ConstantInitialized);

    inline TurmsNotification(const TurmsNotification& from)
        : TurmsNotification(nullptr, from) {
    }
    inline TurmsNotification(TurmsNotification&& from) noexcept
        : TurmsNotification(nullptr, std::move(from)) {
    }
    inline TurmsNotification& operator=(const TurmsNotification& from) {
        CopyFrom(from);
        return *this;
    }
    inline TurmsNotification& operator=(TurmsNotification&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const std::string& unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<std::string>(
            ::google::protobuf::internal::GetEmptyString);
    }
    inline std::string* mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<std::string>();
    }

    static const TurmsNotification& default_instance() {
        return *internal_default_instance();
    }
    static inline const TurmsNotification* internal_default_instance() {
        return reinterpret_cast<const TurmsNotification*>(&_TurmsNotification_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;
    friend void swap(TurmsNotification& a, TurmsNotification& b) {
        a.Swap(&b);
    }
    inline void Swap(TurmsNotification* other) {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(TurmsNotification* other) {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    TurmsNotification* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::MessageLite::DefaultConstruct<TurmsNotification>(arena);
    }
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) final;
    void CopyFrom(const TurmsNotification& from);
    void MergeFrom(const TurmsNotification& from);
    bool IsInitialized() const {
        return true;
    }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(::uint8_t* target,
                                  ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const {
        return _impl_._cached_size_.Get();
    }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(TurmsNotification* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() {
        return "turms.client.model.proto.TurmsNotification";
    }

   protected:
    explicit TurmsNotification(::google::protobuf::Arena* arena);
    TurmsNotification(::google::protobuf::Arena* arena, const TurmsNotification& from);
    TurmsNotification(::google::protobuf::Arena* arena, TurmsNotification&& from) noexcept
        : TurmsNotification(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::MessageLite::ClassData* GetClassData() const final;

   public:
    // nested types ----------------------------------------------------
    using Data = TurmsNotification_Data;

    // accessors -------------------------------------------------------
    enum : int {
        kCustomAttributesFieldNumber = 2,
        kReasonFieldNumber = 6,
        kDataFieldNumber = 7,
        kRelayedRequestFieldNumber = 12,
        kTimestampFieldNumber = 1,
        kRequestIdFieldNumber = 4,
        kCodeFieldNumber = 5,
        kCloseStatusFieldNumber = 11,
        kRequesterIdFieldNumber = 10,
    };
    // repeated .turms.client.model.proto.Value custom_attributes = 2;
    int custom_attributes_size() const;

   private:
    int _internal_custom_attributes_size() const;

   public:
    void clear_custom_attributes();
    ::turms::client::model::proto::Value* mutable_custom_attributes(int index);
    ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
    mutable_custom_attributes();

   private:
    const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
    _internal_custom_attributes() const;
    ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
    _internal_mutable_custom_attributes();

   public:
    const ::turms::client::model::proto::Value& custom_attributes(int index) const;
    ::turms::client::model::proto::Value* add_custom_attributes();
    const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
    custom_attributes() const;
    // optional string reason = 6;
    bool has_reason() const;
    void clear_reason();
    const std::string& reason() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_reason(Arg_&& arg, Args_... args);
    std::string* mutable_reason();
    PROTOBUF_NODISCARD std::string* release_reason();
    void set_allocated_reason(std::string* value);

   private:
    const std::string& _internal_reason() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
    std::string* _internal_mutable_reason();

   public:
    // .turms.client.model.proto.TurmsNotification.Data data = 7;
    bool has_data() const;
    void clear_data();
    const ::turms::client::model::proto::TurmsNotification_Data& data() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::TurmsNotification_Data* release_data();
    ::turms::client::model::proto::TurmsNotification_Data* mutable_data();
    void set_allocated_data(::turms::client::model::proto::TurmsNotification_Data* value);
    void unsafe_arena_set_allocated_data(
        ::turms::client::model::proto::TurmsNotification_Data* value);
    ::turms::client::model::proto::TurmsNotification_Data* unsafe_arena_release_data();

   private:
    const ::turms::client::model::proto::TurmsNotification_Data& _internal_data() const;
    ::turms::client::model::proto::TurmsNotification_Data* _internal_mutable_data();

   public:
    // .turms.client.model.proto.TurmsRequest relayed_request = 12;
    bool has_relayed_request() const;
    void clear_relayed_request();
    const ::turms::client::model::proto::TurmsRequest& relayed_request() const;
    PROTOBUF_NODISCARD ::turms::client::model::proto::TurmsRequest* release_relayed_request();
    ::turms::client::model::proto::TurmsRequest* mutable_relayed_request();
    void set_allocated_relayed_request(::turms::client::model::proto::TurmsRequest* value);
    void unsafe_arena_set_allocated_relayed_request(
        ::turms::client::model::proto::TurmsRequest* value);
    ::turms::client::model::proto::TurmsRequest* unsafe_arena_release_relayed_request();

   private:
    const ::turms::client::model::proto::TurmsRequest& _internal_relayed_request() const;
    ::turms::client::model::proto::TurmsRequest* _internal_mutable_relayed_request();

   public:
    // int64 timestamp = 1;
    void clear_timestamp();
    ::int64_t timestamp() const;
    void set_timestamp(::int64_t value);

   private:
    ::int64_t _internal_timestamp() const;
    void _internal_set_timestamp(::int64_t value);

   public:
    // optional int64 request_id = 4;
    bool has_request_id() const;
    void clear_request_id();
    ::int64_t request_id() const;
    void set_request_id(::int64_t value);

   private:
    ::int64_t _internal_request_id() const;
    void _internal_set_request_id(::int64_t value);

   public:
    // optional int32 code = 5;
    bool has_code() const;
    void clear_code();
    ::int32_t code() const;
    void set_code(::int32_t value);

   private:
    ::int32_t _internal_code() const;
    void _internal_set_code(::int32_t value);

   public:
    // optional int32 close_status = 11;
    bool has_close_status() const;
    void clear_close_status();
    ::int32_t close_status() const;
    void set_close_status(::int32_t value);

   private:
    ::int32_t _internal_close_status() const;
    void _internal_set_close_status(::int32_t value);

   public:
    // optional int64 requester_id = 10;
    bool has_requester_id() const;
    void clear_requester_id();
    ::int64_t requester_id() const;
    void set_requester_id(::int64_t value);

   private:
    ::int64_t _internal_requester_id() const;
    void _internal_set_requester_id(::int64_t value);

   public:
    // @@protoc_insertion_point(class_scope:turms.client.model.proto.TurmsNotification)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<4, 9, 3, 65, 2> _table_;

    static constexpr const void* _raw_default_instance_ = &_TurmsNotification_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
        inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena,
                              const Impl_& from,
                              const TurmsNotification& from_msg);
        ::google::protobuf::internal::HasBits<1> _has_bits_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>
            custom_attributes_;
        ::google::protobuf::internal::ArenaStringPtr reason_;
        ::turms::client::model::proto::TurmsNotification_Data* data_;
        ::turms::client::model::proto::TurmsRequest* relayed_request_;
        ::int64_t timestamp_;
        ::int64_t request_id_;
        ::int32_t code_;
        ::int32_t close_status_;
        ::int64_t requester_id_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_notification_2fturms_5fnotification_2eproto;
};

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TurmsNotification_Data

// int64 long = 1;
inline bool TurmsNotification_Data::has_long_() const {
    return kind_case() == kLong;
}
inline void TurmsNotification_Data::set_has_long_() {
    _impl_._oneof_case_[0] = kLong;
}
inline void TurmsNotification_Data::clear_long_() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kLong) {
        _impl_.kind_.long__ = ::int64_t{0};
        clear_has_kind();
    }
}
inline ::int64_t TurmsNotification_Data::long_() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.long)
    return _internal_long_();
}
inline void TurmsNotification_Data::set_long_(::int64_t value) {
    if (kind_case() != kLong) {
        clear_kind();
        set_has_long_();
    }
    _impl_.kind_.long__ = value;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.TurmsNotification.Data.long)
}
inline ::int64_t TurmsNotification_Data::_internal_long_() const {
    if (kind_case() == kLong) {
        return _impl_.kind_.long__;
    }
    return ::int64_t{0};
}

// string string = 2;
inline bool TurmsNotification_Data::has_string() const {
    return kind_case() == kString;
}
inline void TurmsNotification_Data::set_has_string() {
    _impl_._oneof_case_[0] = kString;
}
inline void TurmsNotification_Data::clear_string() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kString) {
        _impl_.kind_.string_.Destroy();
        clear_has_kind();
    }
}
inline const std::string& TurmsNotification_Data::string() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.string)
    return _internal_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TurmsNotification_Data::set_string(Arg_&& arg, Args_... args) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() != kString) {
        clear_kind();

        set_has_string();
        _impl_.kind_.string_.InitDefault();
    }
    _impl_.kind_.string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:turms.client.model.proto.TurmsNotification.Data.string)
}
inline std::string* TurmsNotification_Data::mutable_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    std::string* _s = _internal_mutable_string();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.string)
    return _s;
}
inline const std::string& TurmsNotification_Data::_internal_string() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    if (kind_case() != kString) {
        return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
    }
    return _impl_.kind_.string_.Get();
}
inline void TurmsNotification_Data::_internal_set_string(const std::string& value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() != kString) {
        clear_kind();

        set_has_string();
        _impl_.kind_.string_.InitDefault();
    }
    _impl_.kind_.string_.Set(value, GetArena());
}
inline std::string* TurmsNotification_Data::_internal_mutable_string() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() != kString) {
        clear_kind();

        set_has_string();
        _impl_.kind_.string_.InitDefault();
    }
    return _impl_.kind_.string_.Mutable(GetArena());
}
inline std::string* TurmsNotification_Data::release_string() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.string)
    if (kind_case() != kString) {
        return nullptr;
    }
    clear_has_kind();
    return _impl_.kind_.string_.Release();
}
inline void TurmsNotification_Data::set_allocated_string(std::string* value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (has_kind()) {
        clear_kind();
    }
    if (value != nullptr) {
        set_has_string();
        _impl_.kind_.string_.InitAllocated(value, GetArena());
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.string)
}

// .turms.client.model.proto.LongsWithVersion longs_with_version = 3;
inline bool TurmsNotification_Data::has_longs_with_version() const {
    return kind_case() == kLongsWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_longs_with_version() const {
    return kind_case() == kLongsWithVersion;
}
inline void TurmsNotification_Data::set_has_longs_with_version() {
    _impl_._oneof_case_[0] = kLongsWithVersion;
}
inline ::turms::client::model::proto::LongsWithVersion*
TurmsNotification_Data::release_longs_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.longs_with_version)
    if (kind_case() == kLongsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.longs_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.longs_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::LongsWithVersion&
TurmsNotification_Data::_internal_longs_with_version() const {
    return kind_case() == kLongsWithVersion
               ? *_impl_.kind_.longs_with_version_
               : reinterpret_cast<::turms::client::model::proto::LongsWithVersion&>(
                     ::turms::client::model::proto::_LongsWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::LongsWithVersion&
TurmsNotification_Data::longs_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.longs_with_version)
    return _internal_longs_with_version();
}
inline ::turms::client::model::proto::LongsWithVersion*
TurmsNotification_Data::unsafe_arena_release_longs_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.longs_with_version)
    if (kind_case() == kLongsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.longs_with_version_;
        _impl_.kind_.longs_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_longs_with_version(
    ::turms::client::model::proto::LongsWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_longs_with_version();
        _impl_.kind_.longs_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.longs_with_version)
}
inline ::turms::client::model::proto::LongsWithVersion*
TurmsNotification_Data::_internal_mutable_longs_with_version() {
    if (kind_case() != kLongsWithVersion) {
        clear_kind();
        set_has_longs_with_version();
        _impl_.kind_.longs_with_version_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::LongsWithVersion>(GetArena());
    }
    return _impl_.kind_.longs_with_version_;
}
inline ::turms::client::model::proto::LongsWithVersion*
TurmsNotification_Data::mutable_longs_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::LongsWithVersion* _msg = _internal_mutable_longs_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.longs_with_version)
    return _msg;
}

// .turms.client.model.proto.StringsWithVersion strings_with_version = 4;
inline bool TurmsNotification_Data::has_strings_with_version() const {
    return kind_case() == kStringsWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_strings_with_version() const {
    return kind_case() == kStringsWithVersion;
}
inline void TurmsNotification_Data::set_has_strings_with_version() {
    _impl_._oneof_case_[0] = kStringsWithVersion;
}
inline ::turms::client::model::proto::StringsWithVersion*
TurmsNotification_Data::release_strings_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.strings_with_version)
    if (kind_case() == kStringsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.strings_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.strings_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::StringsWithVersion&
TurmsNotification_Data::_internal_strings_with_version() const {
    return kind_case() == kStringsWithVersion
               ? *_impl_.kind_.strings_with_version_
               : reinterpret_cast<::turms::client::model::proto::StringsWithVersion&>(
                     ::turms::client::model::proto::_StringsWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::StringsWithVersion&
TurmsNotification_Data::strings_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.strings_with_version)
    return _internal_strings_with_version();
}
inline ::turms::client::model::proto::StringsWithVersion*
TurmsNotification_Data::unsafe_arena_release_strings_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.strings_with_version)
    if (kind_case() == kStringsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.strings_with_version_;
        _impl_.kind_.strings_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_strings_with_version(
    ::turms::client::model::proto::StringsWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_strings_with_version();
        _impl_.kind_.strings_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.strings_with_version)
}
inline ::turms::client::model::proto::StringsWithVersion*
TurmsNotification_Data::_internal_mutable_strings_with_version() {
    if (kind_case() != kStringsWithVersion) {
        clear_kind();
        set_has_strings_with_version();
        _impl_.kind_.strings_with_version_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::StringsWithVersion>(GetArena());
    }
    return _impl_.kind_.strings_with_version_;
}
inline ::turms::client::model::proto::StringsWithVersion*
TurmsNotification_Data::mutable_strings_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::StringsWithVersion* _msg =
        _internal_mutable_strings_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.strings_with_version)
    return _msg;
}

// .turms.client.model.proto.Conversations conversations = 5;
inline bool TurmsNotification_Data::has_conversations() const {
    return kind_case() == kConversations;
}
inline bool TurmsNotification_Data::_internal_has_conversations() const {
    return kind_case() == kConversations;
}
inline void TurmsNotification_Data::set_has_conversations() {
    _impl_._oneof_case_[0] = kConversations;
}
inline ::turms::client::model::proto::Conversations*
TurmsNotification_Data::release_conversations() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.conversations)
    if (kind_case() == kConversations) {
        clear_has_kind();
        auto* temp = _impl_.kind_.conversations_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.conversations_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::Conversations&
TurmsNotification_Data::_internal_conversations() const {
    return kind_case() == kConversations
               ? *_impl_.kind_.conversations_
               : reinterpret_cast<::turms::client::model::proto::Conversations&>(
                     ::turms::client::model::proto::_Conversations_default_instance_);
}
inline const ::turms::client::model::proto::Conversations& TurmsNotification_Data::conversations()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.conversations)
    return _internal_conversations();
}
inline ::turms::client::model::proto::Conversations*
TurmsNotification_Data::unsafe_arena_release_conversations() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.conversations)
    if (kind_case() == kConversations) {
        clear_has_kind();
        auto* temp = _impl_.kind_.conversations_;
        _impl_.kind_.conversations_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_conversations(
    ::turms::client::model::proto::Conversations* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_conversations();
        _impl_.kind_.conversations_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.conversations)
}
inline ::turms::client::model::proto::Conversations*
TurmsNotification_Data::_internal_mutable_conversations() {
    if (kind_case() != kConversations) {
        clear_kind();
        set_has_conversations();
        _impl_.kind_.conversations_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::Conversations>(GetArena());
    }
    return _impl_.kind_.conversations_;
}
inline ::turms::client::model::proto::Conversations* TurmsNotification_Data::mutable_conversations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::Conversations* _msg = _internal_mutable_conversations();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.conversations)
    return _msg;
}

// .turms.client.model.proto.Messages messages = 6;
inline bool TurmsNotification_Data::has_messages() const {
    return kind_case() == kMessages;
}
inline bool TurmsNotification_Data::_internal_has_messages() const {
    return kind_case() == kMessages;
}
inline void TurmsNotification_Data::set_has_messages() {
    _impl_._oneof_case_[0] = kMessages;
}
inline ::turms::client::model::proto::Messages* TurmsNotification_Data::release_messages() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.messages)
    if (kind_case() == kMessages) {
        clear_has_kind();
        auto* temp = _impl_.kind_.messages_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.messages_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::Messages& TurmsNotification_Data::_internal_messages()
    const {
    return kind_case() == kMessages
               ? *_impl_.kind_.messages_
               : reinterpret_cast<::turms::client::model::proto::Messages&>(
                     ::turms::client::model::proto::_Messages_default_instance_);
}
inline const ::turms::client::model::proto::Messages& TurmsNotification_Data::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.messages)
    return _internal_messages();
}
inline ::turms::client::model::proto::Messages*
TurmsNotification_Data::unsafe_arena_release_messages() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.messages)
    if (kind_case() == kMessages) {
        clear_has_kind();
        auto* temp = _impl_.kind_.messages_;
        _impl_.kind_.messages_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_messages(
    ::turms::client::model::proto::Messages* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_messages();
        _impl_.kind_.messages_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.messages)
}
inline ::turms::client::model::proto::Messages*
TurmsNotification_Data::_internal_mutable_messages() {
    if (kind_case() != kMessages) {
        clear_kind();
        set_has_messages();
        _impl_.kind_.messages_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::Messages>(GetArena());
    }
    return _impl_.kind_.messages_;
}
inline ::turms::client::model::proto::Messages* TurmsNotification_Data::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::Messages* _msg = _internal_mutable_messages();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.messages)
    return _msg;
}

// .turms.client.model.proto.MessagesWithTotalList messages_with_total_list = 7;
inline bool TurmsNotification_Data::has_messages_with_total_list() const {
    return kind_case() == kMessagesWithTotalList;
}
inline bool TurmsNotification_Data::_internal_has_messages_with_total_list() const {
    return kind_case() == kMessagesWithTotalList;
}
inline void TurmsNotification_Data::set_has_messages_with_total_list() {
    _impl_._oneof_case_[0] = kMessagesWithTotalList;
}
inline ::turms::client::model::proto::MessagesWithTotalList*
TurmsNotification_Data::release_messages_with_total_list() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.messages_with_total_list)
    if (kind_case() == kMessagesWithTotalList) {
        clear_has_kind();
        auto* temp = _impl_.kind_.messages_with_total_list_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.messages_with_total_list_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::MessagesWithTotalList&
TurmsNotification_Data::_internal_messages_with_total_list() const {
    return kind_case() == kMessagesWithTotalList
               ? *_impl_.kind_.messages_with_total_list_
               : reinterpret_cast<::turms::client::model::proto::MessagesWithTotalList&>(
                     ::turms::client::model::proto::_MessagesWithTotalList_default_instance_);
}
inline const ::turms::client::model::proto::MessagesWithTotalList&
TurmsNotification_Data::messages_with_total_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.messages_with_total_list)
    return _internal_messages_with_total_list();
}
inline ::turms::client::model::proto::MessagesWithTotalList*
TurmsNotification_Data::unsafe_arena_release_messages_with_total_list() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.messages_with_total_list)
    if (kind_case() == kMessagesWithTotalList) {
        clear_has_kind();
        auto* temp = _impl_.kind_.messages_with_total_list_;
        _impl_.kind_.messages_with_total_list_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_messages_with_total_list(
    ::turms::client::model::proto::MessagesWithTotalList* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_messages_with_total_list();
        _impl_.kind_.messages_with_total_list_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.messages_with_total_list)
}
inline ::turms::client::model::proto::MessagesWithTotalList*
TurmsNotification_Data::_internal_mutable_messages_with_total_list() {
    if (kind_case() != kMessagesWithTotalList) {
        clear_kind();
        set_has_messages_with_total_list();
        _impl_.kind_.messages_with_total_list_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::MessagesWithTotalList>(GetArena());
    }
    return _impl_.kind_.messages_with_total_list_;
}
inline ::turms::client::model::proto::MessagesWithTotalList*
TurmsNotification_Data::mutable_messages_with_total_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::MessagesWithTotalList* _msg =
        _internal_mutable_messages_with_total_list();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.messages_with_total_list)
    return _msg;
}

// .turms.client.model.proto.UserSession user_session = 8;
inline bool TurmsNotification_Data::has_user_session() const {
    return kind_case() == kUserSession;
}
inline bool TurmsNotification_Data::_internal_has_user_session() const {
    return kind_case() == kUserSession;
}
inline void TurmsNotification_Data::set_has_user_session() {
    _impl_._oneof_case_[0] = kUserSession;
}
inline ::turms::client::model::proto::UserSession* TurmsNotification_Data::release_user_session() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.user_session)
    if (kind_case() == kUserSession) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_session_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.user_session_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UserSession&
TurmsNotification_Data::_internal_user_session() const {
    return kind_case() == kUserSession
               ? *_impl_.kind_.user_session_
               : reinterpret_cast<::turms::client::model::proto::UserSession&>(
                     ::turms::client::model::proto::_UserSession_default_instance_);
}
inline const ::turms::client::model::proto::UserSession& TurmsNotification_Data::user_session()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.user_session)
    return _internal_user_session();
}
inline ::turms::client::model::proto::UserSession*
TurmsNotification_Data::unsafe_arena_release_user_session() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.user_session)
    if (kind_case() == kUserSession) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_session_;
        _impl_.kind_.user_session_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_user_session(
    ::turms::client::model::proto::UserSession* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_user_session();
        _impl_.kind_.user_session_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_session)
}
inline ::turms::client::model::proto::UserSession*
TurmsNotification_Data::_internal_mutable_user_session() {
    if (kind_case() != kUserSession) {
        clear_kind();
        set_has_user_session();
        _impl_.kind_.user_session_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::UserSession>(GetArena());
    }
    return _impl_.kind_.user_session_;
}
inline ::turms::client::model::proto::UserSession* TurmsNotification_Data::mutable_user_session()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UserSession* _msg = _internal_mutable_user_session();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.user_session)
    return _msg;
}

// .turms.client.model.proto.UserInfosWithVersion user_infos_with_version = 9;
inline bool TurmsNotification_Data::has_user_infos_with_version() const {
    return kind_case() == kUserInfosWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_user_infos_with_version() const {
    return kind_case() == kUserInfosWithVersion;
}
inline void TurmsNotification_Data::set_has_user_infos_with_version() {
    _impl_._oneof_case_[0] = kUserInfosWithVersion;
}
inline ::turms::client::model::proto::UserInfosWithVersion*
TurmsNotification_Data::release_user_infos_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.user_infos_with_version)
    if (kind_case() == kUserInfosWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_infos_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.user_infos_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UserInfosWithVersion&
TurmsNotification_Data::_internal_user_infos_with_version() const {
    return kind_case() == kUserInfosWithVersion
               ? *_impl_.kind_.user_infos_with_version_
               : reinterpret_cast<::turms::client::model::proto::UserInfosWithVersion&>(
                     ::turms::client::model::proto::_UserInfosWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::UserInfosWithVersion&
TurmsNotification_Data::user_infos_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.user_infos_with_version)
    return _internal_user_infos_with_version();
}
inline ::turms::client::model::proto::UserInfosWithVersion*
TurmsNotification_Data::unsafe_arena_release_user_infos_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.user_infos_with_version)
    if (kind_case() == kUserInfosWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_infos_with_version_;
        _impl_.kind_.user_infos_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_user_infos_with_version(
    ::turms::client::model::proto::UserInfosWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_user_infos_with_version();
        _impl_.kind_.user_infos_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_infos_with_version)
}
inline ::turms::client::model::proto::UserInfosWithVersion*
TurmsNotification_Data::_internal_mutable_user_infos_with_version() {
    if (kind_case() != kUserInfosWithVersion) {
        clear_kind();
        set_has_user_infos_with_version();
        _impl_.kind_.user_infos_with_version_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::UserInfosWithVersion>(GetArena());
    }
    return _impl_.kind_.user_infos_with_version_;
}
inline ::turms::client::model::proto::UserInfosWithVersion*
TurmsNotification_Data::mutable_user_infos_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UserInfosWithVersion* _msg =
        _internal_mutable_user_infos_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.user_infos_with_version)
    return _msg;
}

// .turms.client.model.proto.UserOnlineStatuses user_online_statuses = 10;
inline bool TurmsNotification_Data::has_user_online_statuses() const {
    return kind_case() == kUserOnlineStatuses;
}
inline bool TurmsNotification_Data::_internal_has_user_online_statuses() const {
    return kind_case() == kUserOnlineStatuses;
}
inline void TurmsNotification_Data::set_has_user_online_statuses() {
    _impl_._oneof_case_[0] = kUserOnlineStatuses;
}
inline ::turms::client::model::proto::UserOnlineStatuses*
TurmsNotification_Data::release_user_online_statuses() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.user_online_statuses)
    if (kind_case() == kUserOnlineStatuses) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_online_statuses_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.user_online_statuses_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UserOnlineStatuses&
TurmsNotification_Data::_internal_user_online_statuses() const {
    return kind_case() == kUserOnlineStatuses
               ? *_impl_.kind_.user_online_statuses_
               : reinterpret_cast<::turms::client::model::proto::UserOnlineStatuses&>(
                     ::turms::client::model::proto::_UserOnlineStatuses_default_instance_);
}
inline const ::turms::client::model::proto::UserOnlineStatuses&
TurmsNotification_Data::user_online_statuses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.user_online_statuses)
    return _internal_user_online_statuses();
}
inline ::turms::client::model::proto::UserOnlineStatuses*
TurmsNotification_Data::unsafe_arena_release_user_online_statuses() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.user_online_statuses)
    if (kind_case() == kUserOnlineStatuses) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_online_statuses_;
        _impl_.kind_.user_online_statuses_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_user_online_statuses(
    ::turms::client::model::proto::UserOnlineStatuses* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_user_online_statuses();
        _impl_.kind_.user_online_statuses_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_online_statuses)
}
inline ::turms::client::model::proto::UserOnlineStatuses*
TurmsNotification_Data::_internal_mutable_user_online_statuses() {
    if (kind_case() != kUserOnlineStatuses) {
        clear_kind();
        set_has_user_online_statuses();
        _impl_.kind_.user_online_statuses_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::UserOnlineStatuses>(GetArena());
    }
    return _impl_.kind_.user_online_statuses_;
}
inline ::turms::client::model::proto::UserOnlineStatuses*
TurmsNotification_Data::mutable_user_online_statuses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UserOnlineStatuses* _msg =
        _internal_mutable_user_online_statuses();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.user_online_statuses)
    return _msg;
}

// .turms.client.model.proto.UserFriendRequestsWithVersion user_friend_requests_with_version = 11;
inline bool TurmsNotification_Data::has_user_friend_requests_with_version() const {
    return kind_case() == kUserFriendRequestsWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_user_friend_requests_with_version() const {
    return kind_case() == kUserFriendRequestsWithVersion;
}
inline void TurmsNotification_Data::set_has_user_friend_requests_with_version() {
    _impl_._oneof_case_[0] = kUserFriendRequestsWithVersion;
}
inline ::turms::client::model::proto::UserFriendRequestsWithVersion*
TurmsNotification_Data::release_user_friend_requests_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.user_friend_requests_with_version)
    if (kind_case() == kUserFriendRequestsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_friend_requests_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.user_friend_requests_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UserFriendRequestsWithVersion&
TurmsNotification_Data::_internal_user_friend_requests_with_version() const {
    return kind_case() == kUserFriendRequestsWithVersion
               ? *_impl_.kind_.user_friend_requests_with_version_
               : reinterpret_cast<::turms::client::model::proto::UserFriendRequestsWithVersion&>(
                     ::turms::client::model::proto::
                         _UserFriendRequestsWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::UserFriendRequestsWithVersion&
TurmsNotification_Data::user_friend_requests_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.user_friend_requests_with_version)
    return _internal_user_friend_requests_with_version();
}
inline ::turms::client::model::proto::UserFriendRequestsWithVersion*
TurmsNotification_Data::unsafe_arena_release_user_friend_requests_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.user_friend_requests_with_version)
    if (kind_case() == kUserFriendRequestsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_friend_requests_with_version_;
        _impl_.kind_.user_friend_requests_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_user_friend_requests_with_version(
    ::turms::client::model::proto::UserFriendRequestsWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_user_friend_requests_with_version();
        _impl_.kind_.user_friend_requests_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_friend_requests_with_version)
}
inline ::turms::client::model::proto::UserFriendRequestsWithVersion*
TurmsNotification_Data::_internal_mutable_user_friend_requests_with_version() {
    if (kind_case() != kUserFriendRequestsWithVersion) {
        clear_kind();
        set_has_user_friend_requests_with_version();
        _impl_.kind_.user_friend_requests_with_version_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UserFriendRequestsWithVersion>(GetArena());
    }
    return _impl_.kind_.user_friend_requests_with_version_;
}
inline ::turms::client::model::proto::UserFriendRequestsWithVersion*
TurmsNotification_Data::mutable_user_friend_requests_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UserFriendRequestsWithVersion* _msg =
        _internal_mutable_user_friend_requests_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.user_friend_requests_with_version)
    return _msg;
}

// .turms.client.model.proto.UserRelationshipGroupsWithVersion user_relationship_groups_with_version
// = 12;
inline bool TurmsNotification_Data::has_user_relationship_groups_with_version() const {
    return kind_case() == kUserRelationshipGroupsWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_user_relationship_groups_with_version() const {
    return kind_case() == kUserRelationshipGroupsWithVersion;
}
inline void TurmsNotification_Data::set_has_user_relationship_groups_with_version() {
    _impl_._oneof_case_[0] = kUserRelationshipGroupsWithVersion;
}
inline ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
TurmsNotification_Data::release_user_relationship_groups_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.user_relationship_groups_with_version)
    if (kind_case() == kUserRelationshipGroupsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_relationship_groups_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.user_relationship_groups_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UserRelationshipGroupsWithVersion&
TurmsNotification_Data::_internal_user_relationship_groups_with_version() const {
    return kind_case() == kUserRelationshipGroupsWithVersion
               ? *_impl_.kind_.user_relationship_groups_with_version_
               : reinterpret_cast<
                     ::turms::client::model::proto::UserRelationshipGroupsWithVersion&>(
                     ::turms::client::model::proto::
                         _UserRelationshipGroupsWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::UserRelationshipGroupsWithVersion&
TurmsNotification_Data::user_relationship_groups_with_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.user_relationship_groups_with_version)
    return _internal_user_relationship_groups_with_version();
}
inline ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
TurmsNotification_Data::unsafe_arena_release_user_relationship_groups_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.user_relationship_groups_with_version)
    if (kind_case() == kUserRelationshipGroupsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_relationship_groups_with_version_;
        _impl_.kind_.user_relationship_groups_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void
TurmsNotification_Data::unsafe_arena_set_allocated_user_relationship_groups_with_version(
    ::turms::client::model::proto::UserRelationshipGroupsWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_user_relationship_groups_with_version();
        _impl_.kind_.user_relationship_groups_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_relationship_groups_with_version)
}
inline ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
TurmsNotification_Data::_internal_mutable_user_relationship_groups_with_version() {
    if (kind_case() != kUserRelationshipGroupsWithVersion) {
        clear_kind();
        set_has_user_relationship_groups_with_version();
        _impl_.kind_.user_relationship_groups_with_version_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UserRelationshipGroupsWithVersion>(GetArena());
    }
    return _impl_.kind_.user_relationship_groups_with_version_;
}
inline ::turms::client::model::proto::UserRelationshipGroupsWithVersion*
TurmsNotification_Data::mutable_user_relationship_groups_with_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UserRelationshipGroupsWithVersion* _msg =
        _internal_mutable_user_relationship_groups_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.user_relationship_groups_with_version)
    return _msg;
}

// .turms.client.model.proto.UserRelationshipsWithVersion user_relationships_with_version = 13;
inline bool TurmsNotification_Data::has_user_relationships_with_version() const {
    return kind_case() == kUserRelationshipsWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_user_relationships_with_version() const {
    return kind_case() == kUserRelationshipsWithVersion;
}
inline void TurmsNotification_Data::set_has_user_relationships_with_version() {
    _impl_._oneof_case_[0] = kUserRelationshipsWithVersion;
}
inline ::turms::client::model::proto::UserRelationshipsWithVersion*
TurmsNotification_Data::release_user_relationships_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.user_relationships_with_version)
    if (kind_case() == kUserRelationshipsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_relationships_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.user_relationships_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UserRelationshipsWithVersion&
TurmsNotification_Data::_internal_user_relationships_with_version() const {
    return kind_case() == kUserRelationshipsWithVersion
               ? *_impl_.kind_.user_relationships_with_version_
               : reinterpret_cast<::turms::client::model::proto::UserRelationshipsWithVersion&>(
                     ::turms::client::model::proto::
                         _UserRelationshipsWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::UserRelationshipsWithVersion&
TurmsNotification_Data::user_relationships_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.user_relationships_with_version)
    return _internal_user_relationships_with_version();
}
inline ::turms::client::model::proto::UserRelationshipsWithVersion*
TurmsNotification_Data::unsafe_arena_release_user_relationships_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.user_relationships_with_version)
    if (kind_case() == kUserRelationshipsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_relationships_with_version_;
        _impl_.kind_.user_relationships_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_user_relationships_with_version(
    ::turms::client::model::proto::UserRelationshipsWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_user_relationships_with_version();
        _impl_.kind_.user_relationships_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_relationships_with_version)
}
inline ::turms::client::model::proto::UserRelationshipsWithVersion*
TurmsNotification_Data::_internal_mutable_user_relationships_with_version() {
    if (kind_case() != kUserRelationshipsWithVersion) {
        clear_kind();
        set_has_user_relationships_with_version();
        _impl_.kind_.user_relationships_with_version_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::UserRelationshipsWithVersion>(GetArena());
    }
    return _impl_.kind_.user_relationships_with_version_;
}
inline ::turms::client::model::proto::UserRelationshipsWithVersion*
TurmsNotification_Data::mutable_user_relationships_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UserRelationshipsWithVersion* _msg =
        _internal_mutable_user_relationships_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.user_relationships_with_version)
    return _msg;
}

// .turms.client.model.proto.NearbyUsers nearby_users = 14;
inline bool TurmsNotification_Data::has_nearby_users() const {
    return kind_case() == kNearbyUsers;
}
inline bool TurmsNotification_Data::_internal_has_nearby_users() const {
    return kind_case() == kNearbyUsers;
}
inline void TurmsNotification_Data::set_has_nearby_users() {
    _impl_._oneof_case_[0] = kNearbyUsers;
}
inline ::turms::client::model::proto::NearbyUsers* TurmsNotification_Data::release_nearby_users() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.nearby_users)
    if (kind_case() == kNearbyUsers) {
        clear_has_kind();
        auto* temp = _impl_.kind_.nearby_users_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.nearby_users_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::NearbyUsers&
TurmsNotification_Data::_internal_nearby_users() const {
    return kind_case() == kNearbyUsers
               ? *_impl_.kind_.nearby_users_
               : reinterpret_cast<::turms::client::model::proto::NearbyUsers&>(
                     ::turms::client::model::proto::_NearbyUsers_default_instance_);
}
inline const ::turms::client::model::proto::NearbyUsers& TurmsNotification_Data::nearby_users()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.nearby_users)
    return _internal_nearby_users();
}
inline ::turms::client::model::proto::NearbyUsers*
TurmsNotification_Data::unsafe_arena_release_nearby_users() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.nearby_users)
    if (kind_case() == kNearbyUsers) {
        clear_has_kind();
        auto* temp = _impl_.kind_.nearby_users_;
        _impl_.kind_.nearby_users_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_nearby_users(
    ::turms::client::model::proto::NearbyUsers* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_nearby_users();
        _impl_.kind_.nearby_users_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.nearby_users)
}
inline ::turms::client::model::proto::NearbyUsers*
TurmsNotification_Data::_internal_mutable_nearby_users() {
    if (kind_case() != kNearbyUsers) {
        clear_kind();
        set_has_nearby_users();
        _impl_.kind_.nearby_users_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::NearbyUsers>(GetArena());
    }
    return _impl_.kind_.nearby_users_;
}
inline ::turms::client::model::proto::NearbyUsers* TurmsNotification_Data::mutable_nearby_users()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::NearbyUsers* _msg = _internal_mutable_nearby_users();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.nearby_users)
    return _msg;
}

// .turms.client.model.proto.GroupInvitationsWithVersion group_invitations_with_version = 15;
inline bool TurmsNotification_Data::has_group_invitations_with_version() const {
    return kind_case() == kGroupInvitationsWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_group_invitations_with_version() const {
    return kind_case() == kGroupInvitationsWithVersion;
}
inline void TurmsNotification_Data::set_has_group_invitations_with_version() {
    _impl_._oneof_case_[0] = kGroupInvitationsWithVersion;
}
inline ::turms::client::model::proto::GroupInvitationsWithVersion*
TurmsNotification_Data::release_group_invitations_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.group_invitations_with_version)
    if (kind_case() == kGroupInvitationsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_invitations_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.group_invitations_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::GroupInvitationsWithVersion&
TurmsNotification_Data::_internal_group_invitations_with_version() const {
    return kind_case() == kGroupInvitationsWithVersion
               ? *_impl_.kind_.group_invitations_with_version_
               : reinterpret_cast<::turms::client::model::proto::GroupInvitationsWithVersion&>(
                     ::turms::client::model::proto::_GroupInvitationsWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::GroupInvitationsWithVersion&
TurmsNotification_Data::group_invitations_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.group_invitations_with_version)
    return _internal_group_invitations_with_version();
}
inline ::turms::client::model::proto::GroupInvitationsWithVersion*
TurmsNotification_Data::unsafe_arena_release_group_invitations_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.group_invitations_with_version)
    if (kind_case() == kGroupInvitationsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_invitations_with_version_;
        _impl_.kind_.group_invitations_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_group_invitations_with_version(
    ::turms::client::model::proto::GroupInvitationsWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_group_invitations_with_version();
        _impl_.kind_.group_invitations_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_invitations_with_version)
}
inline ::turms::client::model::proto::GroupInvitationsWithVersion*
TurmsNotification_Data::_internal_mutable_group_invitations_with_version() {
    if (kind_case() != kGroupInvitationsWithVersion) {
        clear_kind();
        set_has_group_invitations_with_version();
        _impl_.kind_.group_invitations_with_version_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::GroupInvitationsWithVersion>(GetArena());
    }
    return _impl_.kind_.group_invitations_with_version_;
}
inline ::turms::client::model::proto::GroupInvitationsWithVersion*
TurmsNotification_Data::mutable_group_invitations_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::GroupInvitationsWithVersion* _msg =
        _internal_mutable_group_invitations_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.group_invitations_with_version)
    return _msg;
}

// .turms.client.model.proto.GroupJoinQuestionsAnswerResult group_join_question_answer_result = 16;
inline bool TurmsNotification_Data::has_group_join_question_answer_result() const {
    return kind_case() == kGroupJoinQuestionAnswerResult;
}
inline bool TurmsNotification_Data::_internal_has_group_join_question_answer_result() const {
    return kind_case() == kGroupJoinQuestionAnswerResult;
}
inline void TurmsNotification_Data::set_has_group_join_question_answer_result() {
    _impl_._oneof_case_[0] = kGroupJoinQuestionAnswerResult;
}
inline ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
TurmsNotification_Data::release_group_join_question_answer_result() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.group_join_question_answer_result)
    if (kind_case() == kGroupJoinQuestionAnswerResult) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_join_question_answer_result_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.group_join_question_answer_result_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::GroupJoinQuestionsAnswerResult&
TurmsNotification_Data::_internal_group_join_question_answer_result() const {
    return kind_case() == kGroupJoinQuestionAnswerResult
               ? *_impl_.kind_.group_join_question_answer_result_
               : reinterpret_cast<::turms::client::model::proto::GroupJoinQuestionsAnswerResult&>(
                     ::turms::client::model::proto::
                         _GroupJoinQuestionsAnswerResult_default_instance_);
}
inline const ::turms::client::model::proto::GroupJoinQuestionsAnswerResult&
TurmsNotification_Data::group_join_question_answer_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.group_join_question_answer_result)
    return _internal_group_join_question_answer_result();
}
inline ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
TurmsNotification_Data::unsafe_arena_release_group_join_question_answer_result() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.group_join_question_answer_result)
    if (kind_case() == kGroupJoinQuestionAnswerResult) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_join_question_answer_result_;
        _impl_.kind_.group_join_question_answer_result_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_group_join_question_answer_result(
    ::turms::client::model::proto::GroupJoinQuestionsAnswerResult* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_group_join_question_answer_result();
        _impl_.kind_.group_join_question_answer_result_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_join_question_answer_result)
}
inline ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
TurmsNotification_Data::_internal_mutable_group_join_question_answer_result() {
    if (kind_case() != kGroupJoinQuestionAnswerResult) {
        clear_kind();
        set_has_group_join_question_answer_result();
        _impl_.kind_.group_join_question_answer_result_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::GroupJoinQuestionsAnswerResult>(GetArena());
    }
    return _impl_.kind_.group_join_question_answer_result_;
}
inline ::turms::client::model::proto::GroupJoinQuestionsAnswerResult*
TurmsNotification_Data::mutable_group_join_question_answer_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::GroupJoinQuestionsAnswerResult* _msg =
        _internal_mutable_group_join_question_answer_result();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.group_join_question_answer_result)
    return _msg;
}

// .turms.client.model.proto.GroupJoinRequestsWithVersion group_join_requests_with_version = 17;
inline bool TurmsNotification_Data::has_group_join_requests_with_version() const {
    return kind_case() == kGroupJoinRequestsWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_group_join_requests_with_version() const {
    return kind_case() == kGroupJoinRequestsWithVersion;
}
inline void TurmsNotification_Data::set_has_group_join_requests_with_version() {
    _impl_._oneof_case_[0] = kGroupJoinRequestsWithVersion;
}
inline ::turms::client::model::proto::GroupJoinRequestsWithVersion*
TurmsNotification_Data::release_group_join_requests_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.group_join_requests_with_version)
    if (kind_case() == kGroupJoinRequestsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_join_requests_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.group_join_requests_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::GroupJoinRequestsWithVersion&
TurmsNotification_Data::_internal_group_join_requests_with_version() const {
    return kind_case() == kGroupJoinRequestsWithVersion
               ? *_impl_.kind_.group_join_requests_with_version_
               : reinterpret_cast<::turms::client::model::proto::GroupJoinRequestsWithVersion&>(
                     ::turms::client::model::proto::
                         _GroupJoinRequestsWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::GroupJoinRequestsWithVersion&
TurmsNotification_Data::group_join_requests_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.group_join_requests_with_version)
    return _internal_group_join_requests_with_version();
}
inline ::turms::client::model::proto::GroupJoinRequestsWithVersion*
TurmsNotification_Data::unsafe_arena_release_group_join_requests_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.group_join_requests_with_version)
    if (kind_case() == kGroupJoinRequestsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_join_requests_with_version_;
        _impl_.kind_.group_join_requests_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_group_join_requests_with_version(
    ::turms::client::model::proto::GroupJoinRequestsWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_group_join_requests_with_version();
        _impl_.kind_.group_join_requests_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_join_requests_with_version)
}
inline ::turms::client::model::proto::GroupJoinRequestsWithVersion*
TurmsNotification_Data::_internal_mutable_group_join_requests_with_version() {
    if (kind_case() != kGroupJoinRequestsWithVersion) {
        clear_kind();
        set_has_group_join_requests_with_version();
        _impl_.kind_.group_join_requests_with_version_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::GroupJoinRequestsWithVersion>(GetArena());
    }
    return _impl_.kind_.group_join_requests_with_version_;
}
inline ::turms::client::model::proto::GroupJoinRequestsWithVersion*
TurmsNotification_Data::mutable_group_join_requests_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::GroupJoinRequestsWithVersion* _msg =
        _internal_mutable_group_join_requests_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.group_join_requests_with_version)
    return _msg;
}

// .turms.client.model.proto.GroupJoinQuestionsWithVersion group_join_questions_with_version = 18;
inline bool TurmsNotification_Data::has_group_join_questions_with_version() const {
    return kind_case() == kGroupJoinQuestionsWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_group_join_questions_with_version() const {
    return kind_case() == kGroupJoinQuestionsWithVersion;
}
inline void TurmsNotification_Data::set_has_group_join_questions_with_version() {
    _impl_._oneof_case_[0] = kGroupJoinQuestionsWithVersion;
}
inline ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
TurmsNotification_Data::release_group_join_questions_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.group_join_questions_with_version)
    if (kind_case() == kGroupJoinQuestionsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_join_questions_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.group_join_questions_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::GroupJoinQuestionsWithVersion&
TurmsNotification_Data::_internal_group_join_questions_with_version() const {
    return kind_case() == kGroupJoinQuestionsWithVersion
               ? *_impl_.kind_.group_join_questions_with_version_
               : reinterpret_cast<::turms::client::model::proto::GroupJoinQuestionsWithVersion&>(
                     ::turms::client::model::proto::
                         _GroupJoinQuestionsWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::GroupJoinQuestionsWithVersion&
TurmsNotification_Data::group_join_questions_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.group_join_questions_with_version)
    return _internal_group_join_questions_with_version();
}
inline ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
TurmsNotification_Data::unsafe_arena_release_group_join_questions_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.group_join_questions_with_version)
    if (kind_case() == kGroupJoinQuestionsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_join_questions_with_version_;
        _impl_.kind_.group_join_questions_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_group_join_questions_with_version(
    ::turms::client::model::proto::GroupJoinQuestionsWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_group_join_questions_with_version();
        _impl_.kind_.group_join_questions_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_join_questions_with_version)
}
inline ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
TurmsNotification_Data::_internal_mutable_group_join_questions_with_version() {
    if (kind_case() != kGroupJoinQuestionsWithVersion) {
        clear_kind();
        set_has_group_join_questions_with_version();
        _impl_.kind_.group_join_questions_with_version_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::GroupJoinQuestionsWithVersion>(GetArena());
    }
    return _impl_.kind_.group_join_questions_with_version_;
}
inline ::turms::client::model::proto::GroupJoinQuestionsWithVersion*
TurmsNotification_Data::mutable_group_join_questions_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::GroupJoinQuestionsWithVersion* _msg =
        _internal_mutable_group_join_questions_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.group_join_questions_with_version)
    return _msg;
}

// .turms.client.model.proto.GroupMembersWithVersion group_members_with_version = 19;
inline bool TurmsNotification_Data::has_group_members_with_version() const {
    return kind_case() == kGroupMembersWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_group_members_with_version() const {
    return kind_case() == kGroupMembersWithVersion;
}
inline void TurmsNotification_Data::set_has_group_members_with_version() {
    _impl_._oneof_case_[0] = kGroupMembersWithVersion;
}
inline ::turms::client::model::proto::GroupMembersWithVersion*
TurmsNotification_Data::release_group_members_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.group_members_with_version)
    if (kind_case() == kGroupMembersWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_members_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.group_members_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::GroupMembersWithVersion&
TurmsNotification_Data::_internal_group_members_with_version() const {
    return kind_case() == kGroupMembersWithVersion
               ? *_impl_.kind_.group_members_with_version_
               : reinterpret_cast<::turms::client::model::proto::GroupMembersWithVersion&>(
                     ::turms::client::model::proto::_GroupMembersWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::GroupMembersWithVersion&
TurmsNotification_Data::group_members_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.group_members_with_version)
    return _internal_group_members_with_version();
}
inline ::turms::client::model::proto::GroupMembersWithVersion*
TurmsNotification_Data::unsafe_arena_release_group_members_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.group_members_with_version)
    if (kind_case() == kGroupMembersWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.group_members_with_version_;
        _impl_.kind_.group_members_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_group_members_with_version(
    ::turms::client::model::proto::GroupMembersWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_group_members_with_version();
        _impl_.kind_.group_members_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_members_with_version)
}
inline ::turms::client::model::proto::GroupMembersWithVersion*
TurmsNotification_Data::_internal_mutable_group_members_with_version() {
    if (kind_case() != kGroupMembersWithVersion) {
        clear_kind();
        set_has_group_members_with_version();
        _impl_.kind_.group_members_with_version_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::GroupMembersWithVersion>(GetArena());
    }
    return _impl_.kind_.group_members_with_version_;
}
inline ::turms::client::model::proto::GroupMembersWithVersion*
TurmsNotification_Data::mutable_group_members_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::GroupMembersWithVersion* _msg =
        _internal_mutable_group_members_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.group_members_with_version)
    return _msg;
}

// .turms.client.model.proto.GroupsWithVersion groups_with_version = 20;
inline bool TurmsNotification_Data::has_groups_with_version() const {
    return kind_case() == kGroupsWithVersion;
}
inline bool TurmsNotification_Data::_internal_has_groups_with_version() const {
    return kind_case() == kGroupsWithVersion;
}
inline void TurmsNotification_Data::set_has_groups_with_version() {
    _impl_._oneof_case_[0] = kGroupsWithVersion;
}
inline ::turms::client::model::proto::GroupsWithVersion*
TurmsNotification_Data::release_groups_with_version() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.groups_with_version)
    if (kind_case() == kGroupsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.groups_with_version_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.groups_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::GroupsWithVersion&
TurmsNotification_Data::_internal_groups_with_version() const {
    return kind_case() == kGroupsWithVersion
               ? *_impl_.kind_.groups_with_version_
               : reinterpret_cast<::turms::client::model::proto::GroupsWithVersion&>(
                     ::turms::client::model::proto::_GroupsWithVersion_default_instance_);
}
inline const ::turms::client::model::proto::GroupsWithVersion&
TurmsNotification_Data::groups_with_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.groups_with_version)
    return _internal_groups_with_version();
}
inline ::turms::client::model::proto::GroupsWithVersion*
TurmsNotification_Data::unsafe_arena_release_groups_with_version() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.groups_with_version)
    if (kind_case() == kGroupsWithVersion) {
        clear_has_kind();
        auto* temp = _impl_.kind_.groups_with_version_;
        _impl_.kind_.groups_with_version_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_groups_with_version(
    ::turms::client::model::proto::GroupsWithVersion* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_groups_with_version();
        _impl_.kind_.groups_with_version_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.groups_with_version)
}
inline ::turms::client::model::proto::GroupsWithVersion*
TurmsNotification_Data::_internal_mutable_groups_with_version() {
    if (kind_case() != kGroupsWithVersion) {
        clear_kind();
        set_has_groups_with_version();
        _impl_.kind_.groups_with_version_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::GroupsWithVersion>(GetArena());
    }
    return _impl_.kind_.groups_with_version_;
}
inline ::turms::client::model::proto::GroupsWithVersion*
TurmsNotification_Data::mutable_groups_with_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::GroupsWithVersion* _msg =
        _internal_mutable_groups_with_version();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.groups_with_version)
    return _msg;
}

// .turms.client.model.proto.Meetings meetings = 40;
inline bool TurmsNotification_Data::has_meetings() const {
    return kind_case() == kMeetings;
}
inline bool TurmsNotification_Data::_internal_has_meetings() const {
    return kind_case() == kMeetings;
}
inline void TurmsNotification_Data::set_has_meetings() {
    _impl_._oneof_case_[0] = kMeetings;
}
inline ::turms::client::model::proto::Meetings* TurmsNotification_Data::release_meetings() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.meetings)
    if (kind_case() == kMeetings) {
        clear_has_kind();
        auto* temp = _impl_.kind_.meetings_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.meetings_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::Meetings& TurmsNotification_Data::_internal_meetings()
    const {
    return kind_case() == kMeetings
               ? *_impl_.kind_.meetings_
               : reinterpret_cast<::turms::client::model::proto::Meetings&>(
                     ::turms::client::model::proto::_Meetings_default_instance_);
}
inline const ::turms::client::model::proto::Meetings& TurmsNotification_Data::meetings() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.meetings)
    return _internal_meetings();
}
inline ::turms::client::model::proto::Meetings*
TurmsNotification_Data::unsafe_arena_release_meetings() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.meetings)
    if (kind_case() == kMeetings) {
        clear_has_kind();
        auto* temp = _impl_.kind_.meetings_;
        _impl_.kind_.meetings_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_meetings(
    ::turms::client::model::proto::Meetings* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_meetings();
        _impl_.kind_.meetings_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.meetings)
}
inline ::turms::client::model::proto::Meetings*
TurmsNotification_Data::_internal_mutable_meetings() {
    if (kind_case() != kMeetings) {
        clear_kind();
        set_has_meetings();
        _impl_.kind_.meetings_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::Meetings>(GetArena());
    }
    return _impl_.kind_.meetings_;
}
inline ::turms::client::model::proto::Meetings* TurmsNotification_Data::mutable_meetings()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::Meetings* _msg = _internal_mutable_meetings();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.meetings)
    return _msg;
}

// .turms.client.model.proto.StorageResourceInfos storage_resource_infos = 50;
inline bool TurmsNotification_Data::has_storage_resource_infos() const {
    return kind_case() == kStorageResourceInfos;
}
inline bool TurmsNotification_Data::_internal_has_storage_resource_infos() const {
    return kind_case() == kStorageResourceInfos;
}
inline void TurmsNotification_Data::set_has_storage_resource_infos() {
    _impl_._oneof_case_[0] = kStorageResourceInfos;
}
inline ::turms::client::model::proto::StorageResourceInfos*
TurmsNotification_Data::release_storage_resource_infos() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.storage_resource_infos)
    if (kind_case() == kStorageResourceInfos) {
        clear_has_kind();
        auto* temp = _impl_.kind_.storage_resource_infos_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.storage_resource_infos_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::StorageResourceInfos&
TurmsNotification_Data::_internal_storage_resource_infos() const {
    return kind_case() == kStorageResourceInfos
               ? *_impl_.kind_.storage_resource_infos_
               : reinterpret_cast<::turms::client::model::proto::StorageResourceInfos&>(
                     ::turms::client::model::proto::_StorageResourceInfos_default_instance_);
}
inline const ::turms::client::model::proto::StorageResourceInfos&
TurmsNotification_Data::storage_resource_infos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.storage_resource_infos)
    return _internal_storage_resource_infos();
}
inline ::turms::client::model::proto::StorageResourceInfos*
TurmsNotification_Data::unsafe_arena_release_storage_resource_infos() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.storage_resource_infos)
    if (kind_case() == kStorageResourceInfos) {
        clear_has_kind();
        auto* temp = _impl_.kind_.storage_resource_infos_;
        _impl_.kind_.storage_resource_infos_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_storage_resource_infos(
    ::turms::client::model::proto::StorageResourceInfos* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_storage_resource_infos();
        _impl_.kind_.storage_resource_infos_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.storage_resource_infos)
}
inline ::turms::client::model::proto::StorageResourceInfos*
TurmsNotification_Data::_internal_mutable_storage_resource_infos() {
    if (kind_case() != kStorageResourceInfos) {
        clear_kind();
        set_has_storage_resource_infos();
        _impl_.kind_.storage_resource_infos_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::StorageResourceInfos>(GetArena());
    }
    return _impl_.kind_.storage_resource_infos_;
}
inline ::turms::client::model::proto::StorageResourceInfos*
TurmsNotification_Data::mutable_storage_resource_infos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::StorageResourceInfos* _msg =
        _internal_mutable_storage_resource_infos();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.storage_resource_infos)
    return _msg;
}

// .turms.client.model.proto.ConversationSettingsList conversation_settings_list = 200;
inline bool TurmsNotification_Data::has_conversation_settings_list() const {
    return kind_case() == kConversationSettingsList;
}
inline bool TurmsNotification_Data::_internal_has_conversation_settings_list() const {
    return kind_case() == kConversationSettingsList;
}
inline void TurmsNotification_Data::set_has_conversation_settings_list() {
    _impl_._oneof_case_[0] = kConversationSettingsList;
}
inline ::turms::client::model::proto::ConversationSettingsList*
TurmsNotification_Data::release_conversation_settings_list() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.conversation_settings_list)
    if (kind_case() == kConversationSettingsList) {
        clear_has_kind();
        auto* temp = _impl_.kind_.conversation_settings_list_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.conversation_settings_list_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::ConversationSettingsList&
TurmsNotification_Data::_internal_conversation_settings_list() const {
    return kind_case() == kConversationSettingsList
               ? *_impl_.kind_.conversation_settings_list_
               : reinterpret_cast<::turms::client::model::proto::ConversationSettingsList&>(
                     ::turms::client::model::proto::_ConversationSettingsList_default_instance_);
}
inline const ::turms::client::model::proto::ConversationSettingsList&
TurmsNotification_Data::conversation_settings_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.conversation_settings_list)
    return _internal_conversation_settings_list();
}
inline ::turms::client::model::proto::ConversationSettingsList*
TurmsNotification_Data::unsafe_arena_release_conversation_settings_list() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.conversation_settings_list)
    if (kind_case() == kConversationSettingsList) {
        clear_has_kind();
        auto* temp = _impl_.kind_.conversation_settings_list_;
        _impl_.kind_.conversation_settings_list_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_conversation_settings_list(
    ::turms::client::model::proto::ConversationSettingsList* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_conversation_settings_list();
        _impl_.kind_.conversation_settings_list_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.conversation_settings_list)
}
inline ::turms::client::model::proto::ConversationSettingsList*
TurmsNotification_Data::_internal_mutable_conversation_settings_list() {
    if (kind_case() != kConversationSettingsList) {
        clear_kind();
        set_has_conversation_settings_list();
        _impl_.kind_.conversation_settings_list_ =
            ::google::protobuf::MessageLite::DefaultConstruct<
                ::turms::client::model::proto::ConversationSettingsList>(GetArena());
    }
    return _impl_.kind_.conversation_settings_list_;
}
inline ::turms::client::model::proto::ConversationSettingsList*
TurmsNotification_Data::mutable_conversation_settings_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::ConversationSettingsList* _msg =
        _internal_mutable_conversation_settings_list();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.conversation_settings_list)
    return _msg;
}

// .turms.client.model.proto.UserSettings user_settings = 400;
inline bool TurmsNotification_Data::has_user_settings() const {
    return kind_case() == kUserSettings;
}
inline bool TurmsNotification_Data::_internal_has_user_settings() const {
    return kind_case() == kUserSettings;
}
inline void TurmsNotification_Data::set_has_user_settings() {
    _impl_._oneof_case_[0] = kUserSettings;
}
inline ::turms::client::model::proto::UserSettings*
TurmsNotification_Data::release_user_settings() {
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.Data.user_settings)
    if (kind_case() == kUserSettings) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_settings_;
        if (GetArena() != nullptr) {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.kind_.user_settings_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::turms::client::model::proto::UserSettings&
TurmsNotification_Data::_internal_user_settings() const {
    return kind_case() == kUserSettings
               ? *_impl_.kind_.user_settings_
               : reinterpret_cast<::turms::client::model::proto::UserSettings&>(
                     ::turms::client::model::proto::_UserSettings_default_instance_);
}
inline const ::turms::client::model::proto::UserSettings& TurmsNotification_Data::user_settings()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.Data.user_settings)
    return _internal_user_settings();
}
inline ::turms::client::model::proto::UserSettings*
TurmsNotification_Data::unsafe_arena_release_user_settings() {
    // @@protoc_insertion_point(field_unsafe_arena_release:turms.client.model.proto.TurmsNotification.Data.user_settings)
    if (kind_case() == kUserSettings) {
        clear_has_kind();
        auto* temp = _impl_.kind_.user_settings_;
        _impl_.kind_.user_settings_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void TurmsNotification_Data::unsafe_arena_set_allocated_user_settings(
    ::turms::client::model::proto::UserSettings* value) {
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_kind();
    if (value) {
        set_has_user_settings();
        _impl_.kind_.user_settings_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_settings)
}
inline ::turms::client::model::proto::UserSettings*
TurmsNotification_Data::_internal_mutable_user_settings() {
    if (kind_case() != kUserSettings) {
        clear_kind();
        set_has_user_settings();
        _impl_.kind_.user_settings_ = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::UserSettings>(GetArena());
    }
    return _impl_.kind_.user_settings_;
}
inline ::turms::client::model::proto::UserSettings* TurmsNotification_Data::mutable_user_settings()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::turms::client::model::proto::UserSettings* _msg = _internal_mutable_user_settings();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.Data.user_settings)
    return _msg;
}

inline bool TurmsNotification_Data::has_kind() const {
    return kind_case() != KIND_NOT_SET;
}
inline void TurmsNotification_Data::clear_has_kind() {
    _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline TurmsNotification_Data::KindCase TurmsNotification_Data::kind_case() const {
    return TurmsNotification_Data::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TurmsNotification

// int64 timestamp = 1;
inline void TurmsNotification::clear_timestamp() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t TurmsNotification::timestamp() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.timestamp)
    return _internal_timestamp();
}
inline void TurmsNotification::set_timestamp(::int64_t value) {
    _internal_set_timestamp(value);
    // @@protoc_insertion_point(field_set:turms.client.model.proto.TurmsNotification.timestamp)
}
inline ::int64_t TurmsNotification::_internal_timestamp() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.timestamp_;
}
inline void TurmsNotification::_internal_set_timestamp(::int64_t value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.timestamp_ = value;
}

// repeated .turms.client.model.proto.Value custom_attributes = 2;
inline int TurmsNotification::_internal_custom_attributes_size() const {
    return _internal_custom_attributes().size();
}
inline int TurmsNotification::custom_attributes_size() const {
    return _internal_custom_attributes_size();
}
inline ::turms::client::model::proto::Value* TurmsNotification::mutable_custom_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.custom_attributes)
    return _internal_mutable_custom_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
TurmsNotification::mutable_custom_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_mutable_list:turms.client.model.proto.TurmsNotification.custom_attributes)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _internal_mutable_custom_attributes();
}
inline const ::turms::client::model::proto::Value& TurmsNotification::custom_attributes(
    int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.custom_attributes)
    return _internal_custom_attributes().Get(index);
}
inline ::turms::client::model::proto::Value* TurmsNotification::add_custom_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    ::turms::client::model::proto::Value* _add = _internal_mutable_custom_attributes()->Add();
    // @@protoc_insertion_point(field_add:turms.client.model.proto.TurmsNotification.custom_attributes)
    return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
TurmsNotification::custom_attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_list:turms.client.model.proto.TurmsNotification.custom_attributes)
    return _internal_custom_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
TurmsNotification::_internal_custom_attributes() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.custom_attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
TurmsNotification::_internal_mutable_custom_attributes() {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return &_impl_.custom_attributes_;
}

// optional int64 request_id = 4;
inline bool TurmsNotification::has_request_id() const {
    bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
    return value;
}
inline void TurmsNotification::clear_request_id() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.request_id_ = ::int64_t{0};
    _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t TurmsNotification::request_id() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.request_id)
    return _internal_request_id();
}
inline void TurmsNotification::set_request_id(::int64_t value) {
    _internal_set_request_id(value);
    _impl_._has_bits_[0] |= 0x00000008u;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.TurmsNotification.request_id)
}
inline ::int64_t TurmsNotification::_internal_request_id() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.request_id_;
}
inline void TurmsNotification::_internal_set_request_id(::int64_t value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.request_id_ = value;
}

// optional int32 code = 5;
inline bool TurmsNotification::has_code() const {
    bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
    return value;
}
inline void TurmsNotification::clear_code() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.code_ = 0;
    _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t TurmsNotification::code() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.code)
    return _internal_code();
}
inline void TurmsNotification::set_code(::int32_t value) {
    _internal_set_code(value);
    _impl_._has_bits_[0] |= 0x00000010u;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.TurmsNotification.code)
}
inline ::int32_t TurmsNotification::_internal_code() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.code_;
}
inline void TurmsNotification::_internal_set_code(::int32_t value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.code_ = value;
}

// optional string reason = 6;
inline bool TurmsNotification::has_reason() const {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    return value;
}
inline void TurmsNotification::clear_reason() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.reason_.ClearToEmpty();
    _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TurmsNotification::reason() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.reason)
    return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TurmsNotification::set_reason(Arg_&& arg, Args_... args) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_._has_bits_[0] |= 0x00000001u;
    _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:turms.client.model.proto.TurmsNotification.reason)
}
inline std::string* TurmsNotification::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    std::string* _s = _internal_mutable_reason();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.reason)
    return _s;
}
inline const std::string& TurmsNotification::_internal_reason() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.reason_.Get();
}
inline void TurmsNotification::_internal_set_reason(const std::string& value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_._has_bits_[0] |= 0x00000001u;
    _impl_.reason_.Set(value, GetArena());
}
inline std::string* TurmsNotification::_internal_mutable_reason() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_._has_bits_[0] |= 0x00000001u;
    return _impl_.reason_.Mutable(GetArena());
}
inline std::string* TurmsNotification::release_reason() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.reason)
    if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
        return nullptr;
    }
    _impl_._has_bits_[0] &= ~0x00000001u;
    auto* released = _impl_.reason_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArena());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    return released;
}
inline void TurmsNotification::set_allocated_reason(std::string* value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000001u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    _impl_.reason_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.reason_.IsDefault()) {
        _impl_.reason_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.reason)
}

// .turms.client.model.proto.TurmsNotification.Data data = 7;
inline bool TurmsNotification::has_data() const {
    bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
    return value;
}
inline void TurmsNotification::clear_data() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (_impl_.data_ != nullptr)
        _impl_.data_->Clear();
    _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::turms::client::model::proto::TurmsNotification_Data&
TurmsNotification::_internal_data() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    const ::turms::client::model::proto::TurmsNotification_Data* p = _impl_.data_;
    return p != nullptr
               ? *p
               : reinterpret_cast<const ::turms::client::model::proto::TurmsNotification_Data&>(
                     ::turms::client::model::proto::_TurmsNotification_Data_default_instance_);
}
inline const ::turms::client::model::proto::TurmsNotification_Data& TurmsNotification::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.data)
    return _internal_data();
}
inline void TurmsNotification::unsafe_arena_set_allocated_data(
    ::turms::client::model::proto::TurmsNotification_Data* value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
    }
    _impl_.data_ = reinterpret_cast<::turms::client::model::proto::TurmsNotification_Data*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000002u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.data)
}
inline ::turms::client::model::proto::TurmsNotification_Data* TurmsNotification::release_data() {
    ::google::protobuf::internal::TSanWrite(&_impl_);

    _impl_._has_bits_[0] &= ~0x00000002u;
    ::turms::client::model::proto::TurmsNotification_Data* released = _impl_.data_;
    _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
        delete old;
    }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::turms::client::model::proto::TurmsNotification_Data*
TurmsNotification::unsafe_arena_release_data() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.data)

    _impl_._has_bits_[0] &= ~0x00000002u;
    ::turms::client::model::proto::TurmsNotification_Data* temp = _impl_.data_;
    _impl_.data_ = nullptr;
    return temp;
}
inline ::turms::client::model::proto::TurmsNotification_Data*
TurmsNotification::_internal_mutable_data() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (_impl_.data_ == nullptr) {
        auto* p = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::TurmsNotification_Data>(GetArena());
        _impl_.data_ = reinterpret_cast<::turms::client::model::proto::TurmsNotification_Data*>(p);
    }
    return _impl_.data_;
}
inline ::turms::client::model::proto::TurmsNotification_Data* TurmsNotification::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    _impl_._has_bits_[0] |= 0x00000002u;
    ::turms::client::model::proto::TurmsNotification_Data* _msg = _internal_mutable_data();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.data)
    return _msg;
}
inline void TurmsNotification::set_allocated_data(
    ::turms::client::model::proto::TurmsNotification_Data* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (message_arena == nullptr) {
        delete (_impl_.data_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000002u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000002u;
    }

    _impl_.data_ = reinterpret_cast<::turms::client::model::proto::TurmsNotification_Data*>(value);
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.data)
}

// optional int64 requester_id = 10;
inline bool TurmsNotification::has_requester_id() const {
    bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
    return value;
}
inline void TurmsNotification::clear_requester_id() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.requester_id_ = ::int64_t{0};
    _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t TurmsNotification::requester_id() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.requester_id)
    return _internal_requester_id();
}
inline void TurmsNotification::set_requester_id(::int64_t value) {
    _internal_set_requester_id(value);
    _impl_._has_bits_[0] |= 0x00000040u;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.TurmsNotification.requester_id)
}
inline ::int64_t TurmsNotification::_internal_requester_id() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.requester_id_;
}
inline void TurmsNotification::_internal_set_requester_id(::int64_t value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.requester_id_ = value;
}

// optional int32 close_status = 11;
inline bool TurmsNotification::has_close_status() const {
    bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
    return value;
}
inline void TurmsNotification::clear_close_status() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.close_status_ = 0;
    _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t TurmsNotification::close_status() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.close_status)
    return _internal_close_status();
}
inline void TurmsNotification::set_close_status(::int32_t value) {
    _internal_set_close_status(value);
    _impl_._has_bits_[0] |= 0x00000020u;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.TurmsNotification.close_status)
}
inline ::int32_t TurmsNotification::_internal_close_status() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.close_status_;
}
inline void TurmsNotification::_internal_set_close_status(::int32_t value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.close_status_ = value;
}

// .turms.client.model.proto.TurmsRequest relayed_request = 12;
inline bool TurmsNotification::has_relayed_request() const {
    bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.relayed_request_ != nullptr);
    return value;
}
inline const ::turms::client::model::proto::TurmsRequest&
TurmsNotification::_internal_relayed_request() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    const ::turms::client::model::proto::TurmsRequest* p = _impl_.relayed_request_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::turms::client::model::proto::TurmsRequest&>(
                              ::turms::client::model::proto::_TurmsRequest_default_instance_);
}
inline const ::turms::client::model::proto::TurmsRequest& TurmsNotification::relayed_request() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.TurmsNotification.relayed_request)
    return _internal_relayed_request();
}
inline void TurmsNotification::unsafe_arena_set_allocated_relayed_request(
    ::turms::client::model::proto::TurmsRequest* value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.relayed_request_);
    }
    _impl_.relayed_request_ = reinterpret_cast<::turms::client::model::proto::TurmsRequest*>(value);
    if (value != nullptr) {
        _impl_._has_bits_[0] |= 0x00000004u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000004u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.TurmsNotification.relayed_request)
}
inline ::turms::client::model::proto::TurmsRequest* TurmsNotification::release_relayed_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);

    _impl_._has_bits_[0] &= ~0x00000004u;
    ::turms::client::model::proto::TurmsRequest* released = _impl_.relayed_request_;
    _impl_.relayed_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
        delete old;
    }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArena() != nullptr) {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::turms::client::model::proto::TurmsRequest*
TurmsNotification::unsafe_arena_release_relayed_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:turms.client.model.proto.TurmsNotification.relayed_request)

    _impl_._has_bits_[0] &= ~0x00000004u;
    ::turms::client::model::proto::TurmsRequest* temp = _impl_.relayed_request_;
    _impl_.relayed_request_ = nullptr;
    return temp;
}
inline ::turms::client::model::proto::TurmsRequest*
TurmsNotification::_internal_mutable_relayed_request() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (_impl_.relayed_request_ == nullptr) {
        auto* p = ::google::protobuf::MessageLite::DefaultConstruct<
            ::turms::client::model::proto::TurmsRequest>(GetArena());
        _impl_.relayed_request_ = reinterpret_cast<::turms::client::model::proto::TurmsRequest*>(p);
    }
    return _impl_.relayed_request_;
}
inline ::turms::client::model::proto::TurmsRequest* TurmsNotification::mutable_relayed_request()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    _impl_._has_bits_[0] |= 0x00000004u;
    ::turms::client::model::proto::TurmsRequest* _msg = _internal_mutable_relayed_request();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.TurmsNotification.relayed_request)
    return _msg;
}
inline void TurmsNotification::set_allocated_relayed_request(
    ::turms::client::model::proto::TurmsRequest* value) {
    ::google::protobuf::Arena* message_arena = GetArena();
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (message_arena == nullptr) {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.relayed_request_);
    }

    if (value != nullptr) {
        ::google::protobuf::Arena* submessage_arena =
            reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
        if (message_arena != submessage_arena) {
            value = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000004u;
    } else {
        _impl_._has_bits_[0] &= ~0x00000004u;
    }

    _impl_.relayed_request_ = reinterpret_cast<::turms::client::model::proto::TurmsRequest*>(value);
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.relayed_request)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_notification_2fturms_5fnotification_2eproto_2epb_2eh
