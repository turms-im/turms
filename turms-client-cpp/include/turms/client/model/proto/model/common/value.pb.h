// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: model/common/value.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2fcommon_2fvalue_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_model_2fcommon_2fvalue_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_model_2fcommon_2fvalue_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2fcommon_2fvalue_2eproto {
    static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class Value;
struct ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================

// -------------------------------------------------------------------

class Value final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:turms.client.model.proto.Value) */ {
   public:
    inline Value()
        : Value(nullptr) {
    }
    ~Value() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR Value(::google::protobuf::internal::ConstantInitialized);

    inline Value(const Value& from)
        : Value(nullptr, from) {
    }
    inline Value(Value&& from) noexcept
        : Value(nullptr, std::move(from)) {
    }
    inline Value& operator=(const Value& from) {
        CopyFrom(from);
        return *this;
    }
    inline Value& operator=(Value&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    inline const std::string& unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.unknown_fields<std::string>(
            ::google::protobuf::internal::GetEmptyString);
    }
    inline std::string* mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
        return _internal_metadata_.mutable_unknown_fields<std::string>();
    }

    static const Value& default_instance() {
        return *internal_default_instance();
    }
    enum KindCase {
        kInt32Value = 1,
        kInt64Value = 2,
        kFloatValue = 3,
        kDoubleValue = 4,
        kBoolValue = 5,
        kBytesValue = 6,
        kStringValue = 7,
        KIND_NOT_SET = 0,
    };
    static inline const Value* internal_default_instance() {
        return reinterpret_cast<const Value*>(&_Value_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;
    friend void swap(Value& a, Value& b) {
        a.Swap(&b);
    }
    inline void Swap(Value* other) {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        } else {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Value* other) {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    Value* New(::google::protobuf::Arena* arena = nullptr) const final {
        return ::google::protobuf::MessageLite::DefaultConstruct<Value>(arena);
    }
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) final;
    void CopyFrom(const Value& from);
    void MergeFrom(const Value& from);
    bool IsInitialized() const {
        return true;
    }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(::uint8_t* target,
                                  ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const {
        return _impl_._cached_size_.Get();
    }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(Value* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() {
        return "turms.client.model.proto.Value";
    }

   protected:
    explicit Value(::google::protobuf::Arena* arena);
    Value(::google::protobuf::Arena* arena, const Value& from);
    Value(::google::protobuf::Arena* arena, Value&& from) noexcept
        : Value(arena) {
        *this = ::std::move(from);
    }
    const ::google::protobuf::MessageLite::ClassData* GetClassData() const final;

   public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int {
        kListValueFieldNumber = 8,
        kInt32ValueFieldNumber = 1,
        kInt64ValueFieldNumber = 2,
        kFloatValueFieldNumber = 3,
        kDoubleValueFieldNumber = 4,
        kBoolValueFieldNumber = 5,
        kBytesValueFieldNumber = 6,
        kStringValueFieldNumber = 7,
    };
    // repeated .turms.client.model.proto.Value list_value = 8;
    int list_value_size() const;

   private:
    int _internal_list_value_size() const;

   public:
    void clear_list_value();
    ::turms::client::model::proto::Value* mutable_list_value(int index);
    ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
    mutable_list_value();

   private:
    const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
    _internal_list_value() const;
    ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
    _internal_mutable_list_value();

   public:
    const ::turms::client::model::proto::Value& list_value(int index) const;
    ::turms::client::model::proto::Value* add_list_value();
    const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>& list_value()
        const;
    // int32 int32_value = 1;
    bool has_int32_value() const;
    void clear_int32_value();
    ::int32_t int32_value() const;
    void set_int32_value(::int32_t value);

   private:
    ::int32_t _internal_int32_value() const;
    void _internal_set_int32_value(::int32_t value);

   public:
    // int64 int64_value = 2;
    bool has_int64_value() const;
    void clear_int64_value();
    ::int64_t int64_value() const;
    void set_int64_value(::int64_t value);

   private:
    ::int64_t _internal_int64_value() const;
    void _internal_set_int64_value(::int64_t value);

   public:
    // float float_value = 3;
    bool has_float_value() const;
    void clear_float_value();
    float float_value() const;
    void set_float_value(float value);

   private:
    float _internal_float_value() const;
    void _internal_set_float_value(float value);

   public:
    // double double_value = 4;
    bool has_double_value() const;
    void clear_double_value();
    double double_value() const;
    void set_double_value(double value);

   private:
    double _internal_double_value() const;
    void _internal_set_double_value(double value);

   public:
    // bool bool_value = 5;
    bool has_bool_value() const;
    void clear_bool_value();
    bool bool_value() const;
    void set_bool_value(bool value);

   private:
    bool _internal_bool_value() const;
    void _internal_set_bool_value(bool value);

   public:
    // bytes bytes_value = 6;
    bool has_bytes_value() const;
    void clear_bytes_value();
    const std::string& bytes_value() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_bytes_value(Arg_&& arg, Args_... args);
    std::string* mutable_bytes_value();
    PROTOBUF_NODISCARD std::string* release_bytes_value();
    void set_allocated_bytes_value(std::string* value);

   private:
    const std::string& _internal_bytes_value() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
    std::string* _internal_mutable_bytes_value();

   public:
    // string string_value = 7;
    bool has_string_value() const;
    void clear_string_value();
    const std::string& string_value() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_string_value(Arg_&& arg, Args_... args);
    std::string* mutable_string_value();
    PROTOBUF_NODISCARD std::string* release_string_value();
    void set_allocated_string_value(std::string* value);

   private:
    const std::string& _internal_string_value() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
    std::string* _internal_mutable_string_value();

   public:
    void clear_kind();
    KindCase kind_case() const;
    // @@protoc_insertion_point(class_scope:turms.client.model.proto.Value)
   private:
    class _Internal;
    void set_has_int32_value();
    void set_has_int64_value();
    void set_has_float_value();
    void set_has_double_value();
    void set_has_bool_value();
    void set_has_bytes_value();
    void set_has_string_value();
    inline bool has_kind() const;
    inline void clear_has_kind();
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 8, 1, 59, 2> _table_;

    static constexpr const void* _raw_default_instance_ = &_Value_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_ {
        inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena,
                              const Impl_& from,
                              const Value& from_msg);
        ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value> list_value_;
        union KindUnion {
            constexpr KindUnion()
                : _constinit_{} {
            }
            ::google::protobuf::internal::ConstantInitialized _constinit_;
            ::int32_t int32_value_;
            ::int64_t int64_value_;
            float float_value_;
            double double_value_;
            bool bool_value_;
            ::google::protobuf::internal::ArenaStringPtr bytes_value_;
            ::google::protobuf::internal::ArenaStringPtr string_value_;
        } kind_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        ::uint32_t _oneof_case_[1];
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_model_2fcommon_2fvalue_2eproto;
};

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Value

// int32 int32_value = 1;
inline bool Value::has_int32_value() const {
    return kind_case() == kInt32Value;
}
inline void Value::set_has_int32_value() {
    _impl_._oneof_case_[0] = kInt32Value;
}
inline void Value::clear_int32_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kInt32Value) {
        _impl_.kind_.int32_value_ = 0;
        clear_has_kind();
    }
}
inline ::int32_t Value::int32_value() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.Value.int32_value)
    return _internal_int32_value();
}
inline void Value::set_int32_value(::int32_t value) {
    if (kind_case() != kInt32Value) {
        clear_kind();
        set_has_int32_value();
    }
    _impl_.kind_.int32_value_ = value;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.Value.int32_value)
}
inline ::int32_t Value::_internal_int32_value() const {
    if (kind_case() == kInt32Value) {
        return _impl_.kind_.int32_value_;
    }
    return 0;
}

// int64 int64_value = 2;
inline bool Value::has_int64_value() const {
    return kind_case() == kInt64Value;
}
inline void Value::set_has_int64_value() {
    _impl_._oneof_case_[0] = kInt64Value;
}
inline void Value::clear_int64_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kInt64Value) {
        _impl_.kind_.int64_value_ = ::int64_t{0};
        clear_has_kind();
    }
}
inline ::int64_t Value::int64_value() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.Value.int64_value)
    return _internal_int64_value();
}
inline void Value::set_int64_value(::int64_t value) {
    if (kind_case() != kInt64Value) {
        clear_kind();
        set_has_int64_value();
    }
    _impl_.kind_.int64_value_ = value;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.Value.int64_value)
}
inline ::int64_t Value::_internal_int64_value() const {
    if (kind_case() == kInt64Value) {
        return _impl_.kind_.int64_value_;
    }
    return ::int64_t{0};
}

// float float_value = 3;
inline bool Value::has_float_value() const {
    return kind_case() == kFloatValue;
}
inline void Value::set_has_float_value() {
    _impl_._oneof_case_[0] = kFloatValue;
}
inline void Value::clear_float_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kFloatValue) {
        _impl_.kind_.float_value_ = 0;
        clear_has_kind();
    }
}
inline float Value::float_value() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.Value.float_value)
    return _internal_float_value();
}
inline void Value::set_float_value(float value) {
    if (kind_case() != kFloatValue) {
        clear_kind();
        set_has_float_value();
    }
    _impl_.kind_.float_value_ = value;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.Value.float_value)
}
inline float Value::_internal_float_value() const {
    if (kind_case() == kFloatValue) {
        return _impl_.kind_.float_value_;
    }
    return 0;
}

// double double_value = 4;
inline bool Value::has_double_value() const {
    return kind_case() == kDoubleValue;
}
inline void Value::set_has_double_value() {
    _impl_._oneof_case_[0] = kDoubleValue;
}
inline void Value::clear_double_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kDoubleValue) {
        _impl_.kind_.double_value_ = 0;
        clear_has_kind();
    }
}
inline double Value::double_value() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.Value.double_value)
    return _internal_double_value();
}
inline void Value::set_double_value(double value) {
    if (kind_case() != kDoubleValue) {
        clear_kind();
        set_has_double_value();
    }
    _impl_.kind_.double_value_ = value;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.Value.double_value)
}
inline double Value::_internal_double_value() const {
    if (kind_case() == kDoubleValue) {
        return _impl_.kind_.double_value_;
    }
    return 0;
}

// bool bool_value = 5;
inline bool Value::has_bool_value() const {
    return kind_case() == kBoolValue;
}
inline void Value::set_has_bool_value() {
    _impl_._oneof_case_[0] = kBoolValue;
}
inline void Value::clear_bool_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kBoolValue) {
        _impl_.kind_.bool_value_ = false;
        clear_has_kind();
    }
}
inline bool Value::bool_value() const {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.Value.bool_value)
    return _internal_bool_value();
}
inline void Value::set_bool_value(bool value) {
    if (kind_case() != kBoolValue) {
        clear_kind();
        set_has_bool_value();
    }
    _impl_.kind_.bool_value_ = value;
    // @@protoc_insertion_point(field_set:turms.client.model.proto.Value.bool_value)
}
inline bool Value::_internal_bool_value() const {
    if (kind_case() == kBoolValue) {
        return _impl_.kind_.bool_value_;
    }
    return false;
}

// bytes bytes_value = 6;
inline bool Value::has_bytes_value() const {
    return kind_case() == kBytesValue;
}
inline void Value::set_has_bytes_value() {
    _impl_._oneof_case_[0] = kBytesValue;
}
inline void Value::clear_bytes_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kBytesValue) {
        _impl_.kind_.bytes_value_.Destroy();
        clear_has_kind();
    }
}
inline const std::string& Value::bytes_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.Value.bytes_value)
    return _internal_bytes_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Value::set_bytes_value(Arg_&& arg, Args_... args) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() != kBytesValue) {
        clear_kind();

        set_has_bytes_value();
        _impl_.kind_.bytes_value_.InitDefault();
    }
    _impl_.kind_.bytes_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:turms.client.model.proto.Value.bytes_value)
}
inline std::string* Value::mutable_bytes_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    std::string* _s = _internal_mutable_bytes_value();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.Value.bytes_value)
    return _s;
}
inline const std::string& Value::_internal_bytes_value() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    if (kind_case() != kBytesValue) {
        return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
    }
    return _impl_.kind_.bytes_value_.Get();
}
inline void Value::_internal_set_bytes_value(const std::string& value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() != kBytesValue) {
        clear_kind();

        set_has_bytes_value();
        _impl_.kind_.bytes_value_.InitDefault();
    }
    _impl_.kind_.bytes_value_.Set(value, GetArena());
}
inline std::string* Value::_internal_mutable_bytes_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() != kBytesValue) {
        clear_kind();

        set_has_bytes_value();
        _impl_.kind_.bytes_value_.InitDefault();
    }
    return _impl_.kind_.bytes_value_.Mutable(GetArena());
}
inline std::string* Value::release_bytes_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:turms.client.model.proto.Value.bytes_value)
    if (kind_case() != kBytesValue) {
        return nullptr;
    }
    clear_has_kind();
    return _impl_.kind_.bytes_value_.Release();
}
inline void Value::set_allocated_bytes_value(std::string* value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (has_kind()) {
        clear_kind();
    }
    if (value != nullptr) {
        set_has_bytes_value();
        _impl_.kind_.bytes_value_.InitAllocated(value, GetArena());
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.Value.bytes_value)
}

// string string_value = 7;
inline bool Value::has_string_value() const {
    return kind_case() == kStringValue;
}
inline void Value::set_has_string_value() {
    _impl_._oneof_case_[0] = kStringValue;
}
inline void Value::clear_string_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() == kStringValue) {
        _impl_.kind_.string_value_.Destroy();
        clear_has_kind();
    }
}
inline const std::string& Value::string_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.Value.string_value)
    return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Value::set_string_value(Arg_&& arg, Args_... args) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() != kStringValue) {
        clear_kind();

        set_has_string_value();
        _impl_.kind_.string_value_.InitDefault();
    }
    _impl_.kind_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:turms.client.model.proto.Value.string_value)
}
inline std::string* Value::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    std::string* _s = _internal_mutable_string_value();
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.Value.string_value)
    return _s;
}
inline const std::string& Value::_internal_string_value() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    if (kind_case() != kStringValue) {
        return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
    }
    return _impl_.kind_.string_value_.Get();
}
inline void Value::_internal_set_string_value(const std::string& value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() != kStringValue) {
        clear_kind();

        set_has_string_value();
        _impl_.kind_.string_value_.InitDefault();
    }
    _impl_.kind_.string_value_.Set(value, GetArena());
}
inline std::string* Value::_internal_mutable_string_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (kind_case() != kStringValue) {
        clear_kind();

        set_has_string_value();
        _impl_.kind_.string_value_.InitDefault();
    }
    return _impl_.kind_.string_value_.Mutable(GetArena());
}
inline std::string* Value::release_string_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:turms.client.model.proto.Value.string_value)
    if (kind_case() != kStringValue) {
        return nullptr;
    }
    clear_has_kind();
    return _impl_.kind_.string_value_.Release();
}
inline void Value::set_allocated_string_value(std::string* value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if (has_kind()) {
        clear_kind();
    }
    if (value != nullptr) {
        set_has_string_value();
        _impl_.kind_.string_value_.InitAllocated(value, GetArena());
    }
    // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.Value.string_value)
}

// repeated .turms.client.model.proto.Value list_value = 8;
inline int Value::_internal_list_value_size() const {
    return _internal_list_value().size();
}
inline int Value::list_value_size() const {
    return _internal_list_value_size();
}
inline void Value::clear_list_value() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.list_value_.Clear();
}
inline ::turms::client::model::proto::Value* Value::mutable_list_value(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_mutable:turms.client.model.proto.Value.list_value)
    return _internal_mutable_list_value()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
Value::mutable_list_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_mutable_list:turms.client.model.proto.Value.list_value)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _internal_mutable_list_value();
}
inline const ::turms::client::model::proto::Value& Value::list_value(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:turms.client.model.proto.Value.list_value)
    return _internal_list_value().Get(index);
}
inline ::turms::client::model::proto::Value* Value::add_list_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    ::turms::client::model::proto::Value* _add = _internal_mutable_list_value()->Add();
    // @@protoc_insertion_point(field_add:turms.client.model.proto.Value.list_value)
    return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
Value::list_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_list:turms.client.model.proto.Value.list_value)
    return _internal_list_value();
}
inline const ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>&
Value::_internal_list_value() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.list_value_;
}
inline ::google::protobuf::RepeatedPtrField<::turms::client::model::proto::Value>*
Value::_internal_mutable_list_value() {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return &_impl_.list_value_;
}

inline bool Value::has_kind() const {
    return kind_case() != KIND_NOT_SET;
}
inline void Value::clear_has_kind() {
    _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Value::KindCase Value::kind_case() const {
    return Value::KindCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_model_2fcommon_2fvalue_2eproto_2epb_2eh
